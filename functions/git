#!/usr/bin/env bash

##echo "****** GIT WRAPPER ENTERED!!!!!******" >&2
# git

# A wrapper around 'git' to extend it.

# If you want to add the command 'foo' to 'git', you can simply create the
# file 'git-foo', put it on your PATH, and invoke it as 'git foo'.

# However, if you want to add to an EXISTING command, this doesn't work;
# git-worktree on your PATH will not be called instead of 'git worktree'.

# Soooooo, we have this wrapper that will see if a script exists on the path
# for the given command, and if so, call that command. Otherwise, pass the
# command off to git.

# Note that your script git-bar that extends an EXISTING command 'git bar' must
# be able to determine when to handle the extended request itself and when to
# hand off to the existing command. Handing off is done by executing

# "$REALGIT" bar ...

# We do this because $REALGIT will not run YOUR git-bar (which is why we have THIS script
# at all), meaning you won't end up in an endless loop.

# The variables REALGIT and REALGIT_EXEC_PATH are defined in git.env
git ()
{
    # shellcheck disable=SC2034
    declare DEBUG__this_function=${FUNCNAME[0]}
    if [ -z "$REALGIT" ]
    then
        echo "ERROR: git wrapper function 'git' can't find system git because envvar REALGIT is not defined. Bailing..."
        return 1
    fi

    if [[ $1 =~ --(real|bypass) ]]
    then
        shift
        $REALGIT "$@"
        return $?
    fi

    declare doandcdfile
    declare -A doandcdlist
    doandcdlist[clone]=1
    doandcdlist[go]=1
    doandcdlist[worktree]=1
    doandcdlist[wt]=1
    doandcdlist[repo]=1

    declare command=$1; shift
    declare -a args
    if [ -n "${doandcdlist[$command]}" ]
    then
        doandcdfile=$(mktemp -t "tmp.git.doandcd.$command.XXXXXXXXXX")
        args+=('--doandcd' "$doandcdfile")
    fi
    args+=("$@")

    [ -n "$GIT_DISPATCHER_VERBOSE" ] && echo GIT WRAPPER sees command as "$command" and args as "${args[@]}" >&2
    declare extend_script="git-${command}"
    if type -P "$extend_script" 1>/dev/null 2>/dev/null
    then
        [ -n "$GIT_DISPATCHER_VERBOSE" ] && echo GIT WRAPPER calling "$extend_script" "${args[@]}" >&2
        "$extend_script" "${args[@]}"
    else
        [ -n "$GIT_DISPATCHER_VERBOSE" ] && echo GIT WRAPPER calling "${REALGIT}" "${command}" "${args[@]}" >&2
        "${REALGIT}" "${command}" "${args[@]}"
    fi
    declare status=$?

    if ((status == 0)) \
           && [ -n "$doandcdfile" ] \
           && (( $(wc -l < "$doandcdfile") > 0 ))
    then
        declare -a cdcmd
        read -r -a cdcmd < "$doandcdfile"
        if [ -n "${cdcmd[0]}" ] && \
               { [[ "${cdcmd[0]}" =~ ^(go|cd)$ ]] || \
                     { [[ "${cdcmd[0]}" == 'git' ]] && \
                           [[ "${cdcmd[1]}" == 'go' ]] ; \
                     } ; \
               }
        then
            "${cdcmd[@]}"
            status=$?
        else
            cmd-echo -ec -- "Cannot '${cdcmd[*]}' - only 'cd', 'go', and 'git go' are supported"
            status=1
        fi
    fi
    [[ -n $doandcdfile ]] && \rm -f "$doandcdfile"
    return $status
}
