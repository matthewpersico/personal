#!/usr/bin/env bash
###############################################################################
#
# Name:        addpath
#
# Author:      Matthew Persico (matthew.persico@gmail.com)
#
# Copyright:   Matthew Persico (matthew.persico@gmail.com)
#
# Derived from work by Stephen Collyer (scollyer@netspinner.co.uk),
#                      Copyright: Netspinner Ltd 2000-2003
#
# <Function Class: path functions>
# <Function Justification: env mod>
###############################################################################

addpath ()
{
    ###########################################################################
    # local variables
    ###########################################################################

    typeset options_shift_val options_missing_arg
    # shellcheck disable=SC2034 # options_unknown_opt may be set in 'options'
    typeset options_unknown_opt
    typeset options_num_args_left
    typeset opt_h opt_p opt_s
    typeset opt_x opt_v
    typeset opt_f opt_b opt_i
    typeset opt_d opt_D
    typeset sep=:

    typeset pathvar dirname tmp element

    pathfunc_usage_init
    typeset -a USAGE
    USAGE=(
        "addpath [-h] [-s separator] [-f|-b|-i n] [-d|-D] [-x] [-v] [[-p] pathvar] dirname"
        "Idempotently adds 'dirname' to 'pathvar'."
        "$USAGE_OPT_P1"
        "$USAGE_OPT_P2"
        "$USAGE_OPT_P3"
        "$USAGE_OPT_P4F"
        "$USAGE_OPT_P5"
        "$USAGE_OPT_S"
        "-f   - Add to front of 'pathvar'."
        "-b   - Add to back of 'pathvar' (default behavior)."
        "-i n - Add to 'pathvar' in position 'n'. Indexing starts"
        "       at 1. Elements are moved to higher indexes to make"
        "       room for the inserted one."
        "-d - only add if the 'dirname' exists."
        "-D - only add if the 'dirname' exists, but do NOT notify if it does not."
        "$USAGE_OPT_X"
        "$USAGE_OPT_V"
        "$USAGE_OPT_H"
    )

    ###########################################################################
    # handle options
    ###########################################################################

    options "hp:s:xvfbi:dD" "$@"
    shift "$options_shift_val"
    if [[ -n "$opt_h" ]]; then
        pathfunc_usage "${USAGE[@]}"
        return
    fi
    if [[ -n "$options_missing_arg" ]]; then
        pathfunc_usage "${USAGE[@]}" "Missing argument for -$options_missing_arg"
        return
    fi
    # shellcheck disable=SC2154
    if [[ -n "$options_unknown_opt" ]]; then
        pathfunc_usage "${USAGE[@]}" "Unknown option -$options_unknown_opt"
        return
    fi
    if ((opt_f + opt_b > 1)) ||
           ( ((opt_f + opt_b > 0)) && ((opt_i)) ); then
        pathfunc_usage "${USAGE[@]}" "Only one of -f -b -i can be specified"
        return
    fi

    if [[ "$options_num_args_left" -eq 0 ]]; then
        pathfunc_usage "${USAGE[@]}" "No directory specified"
        return
    elif [[ "$options_num_args_left" -eq 1 ]]; then
        dirname=$1
    elif [[ "$options_num_args_left" -eq 2 ]]; then
        pathvar=$1
        dirname=$2
    else
        pathfunc_usage "${USAGE[@]}" "Too many arguments"
        return
    fi

    [[ -n "$opt_s" ]] && sep=$opt_s;
    [[ -n "$opt_p" ]] && pathvar=$opt_p
    [[ -z "$pathvar" ]] && pathvar=PATH

    # Check to see if we're adding to an empty pathvar. If so we just set the
    # ennvar and move on. But first, we special case MANPATH because if it is
    # not currently set and we set it, we have to include the system manpage
    # paths, or we lose them.
    eval tmp=\$$pathvar
    local assigned=0
    if [[ "$tmp" = "" ]]; then
        if [[ "$pathvar" = 'MANPATH' ]]; then
            MANPATH=$(manpath);
            [[ -n "$opt_x" ]] && export MANPATH
        fi
        ## We re-eval just in case the manpath function returns nothing; i.e.;
        ## not present or misconfigured.
        eval tmp=\$$pathvar
        if [[ "$tmp" = "" ]]; then
            # If asked, check to see if the path exists on disk and bail if it
            # does not.
            if (( opt_d || opt_D )) && [[ ! -d "$dirname" ]]; then
                (( opt_d )) && echo "$dirname does not exist. Skipping."
                return 1
            fi
            ## Single quotes in case dirname contains spaces, (), or other
            ## "weird" characters.
            eval $pathvar="'$dirname'"
            assigned=1
        fi
    fi

    if ((!assigned)); then
        ## Only add the new value if it DNE
        local element
        local oldvalue
        oldvalue=$(eval echo \$$pathvar)
        element=$(echo "$oldvalue" | awk "BEGIN{RS=\"$sep\"}{print}" | grep -x "$dirname")
        if [[ "$element" = "" ]]; then
            # $dirname is not currently in pathvar.

            # If asked, check to see if the path exists on disk and bail if it
            # does not.
            if (( opt_d || opt_D )) && [[ ! -d "$dirname" ]]; then
                (( opt_d )) && echo "$dirname does not exist. Skipping."
                return 1
            fi

            # Add it.
            local newvalue
            if [[ -n "$opt_f" ]]; then
                newvalue="${dirname}${sep}${oldvalue}"
            elif [[ -n "$opt_i" ]]; then
                # Break it up...
                typeset -a oldparts
                mapfile -t oldparts < <(listpath -s "${sep}" -p $pathvar)

                # Insert the new directory...
                typeset -a newparts=(
                    "${oldparts[@]:0:((opt_i))}"
                    "$dirname"
                    "${oldparts[@]:$opt_i}"
                )

                # join them back with a space.
                local newpaths
                newpaths="${newparts[*]}"

                # fixup the separator
                newvalue="${newpaths// /${sep}}"
            else
                newvalue="${oldvalue}${sep}${dirname}"
            fi
            eval $pathvar="'$newvalue'"
        fi
    fi
    [[ -n "$opt_v" ]] && listpath -s "${sep}" -p $pathvar
    # shellcheck disable=SC2163 # yes, we are exporting the expansion
    [[ -n "$opt_x" ]] && export $pathvar
}

# emacs
# Local Variables:
# mode: sh
# End:
