# -*- sh -*-

# <Function Class: git>
# <Function Justification: none>

git-worktree-diff-to-root ()
{
    ##@@ 0001||group||git-worktree-diff-to-root||diff worktree file against root file

    git-in-a-worktree
    if [ ! "$?" = "$TRUE" ]
    then
        func-echo "Must be in a wt"
        return "$NOT_OK";
    fi

    declare moreopts
    moreopts=1
    declare opt_reverse
    opt_reverse=0
    declare opt_color
    opt_color='always'
    declare diff_opts
    while [[ "$1" =~ ^- ]] && ((moreopts))
    do
        ## Strip all leading dashes here so that -foo and --foo can both
        ## be processed as 'foo'.
        declare original="$1"
        declare option
        option=$(dashstripper "$original")
        shift ## That way you avoid endless loops on invalid options.

        case $option in
            reverse   ) opt_reverse=1 ;;
            color     ) opt_color=$1; shift ;;
            w         ) diff_opts="$diff_opts -w" ;;
            help      ) echo "No documentation yet. Sorry."; return 0 ;;
            debug | x ) set -x ;;
            --        ) moreopts=0 ;;
            *         ) echo "$original is an invalid option. See $0 --help"; return 1;;
        esac
    done

    declare -a files=("$@")
    if ((${#files[@]}==0))
    then
        mapfile -t files < <(git ls-files)
        if ((${#files[@]}==0))
        then
            func-echo "No git files found. Is current dir '$(pwd)' a git repo?"
            return "$NOT_OK";
        fi
    fi

    declare root
    root=$(pwd);
    root=${root%%/wt*}
    is-redirected "$STDOUT" && opt_color=never
    for i in "${files[@]}"
    do
        declare -a comp=("${root}/$i" "$i")
        if ((opt_reverse))
        then
            comp=("$i" "${root}/$i")
        fi
        git --no-pager diff --no-index --color=$opt_color "$diff_opts" "${comp[@]}" 2>&1
    done | less -RE
}
