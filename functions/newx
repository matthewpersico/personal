# -*- sh -*-

# <Function Class: xterm>

newx ()
{
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/personal/data/funcsaudit ## This is audit
    local var
    local val
    local more_opts=1
    local count=1
    local xtermgeow=$XTERMGEOW
    local colors
    while ((more_opts)) && [[ "$1" =~ ^- ]]
    do
        local original="$1"
        local option=$(dashstripper "$1")

        case $option in
            w )
                ## wide
                ((xtermgeow*=2)) ; shift ;;
            n )
                ## narrow
                ((xtermgeow/=2)) ; shift ;;
            s )
                ## std
                ((xtermgeow+-0)) ; shift ;;
            [0-9]* )
                ## number of xterms to spawn
                ((count=$1*-1)) ; shift ;;
            * )
                ## Is it a color?
                local bg=$(dashstripper $1)
                var="forebackmap_$bg"
                [ -n "${!var}" ] && colors="$colors ${!var}" && shift || more_opts=0 ;;
        esac
    done

    [ -z "${colors}" ] && var="forebackmap_$(xterm_background)" && colors=${!var}

    ## Yeah this is a little funky - you could end up creating "count"
    ## terminals of each color.
    local i=0
    local j=$i
    while ((i<count))
    do
        for color in $colors
        do
            local xtermgeo="-geometry ${xtermgeow}x${XTERMGEOH}+$((XTERMGEOX+(j*72)))+$((XTERMGEOY+(j*72)))"
            RXCmd ${HOSTNAME} $XTERMGEO $XTERMFONTS $@ -fg "${color%%,*}" -bg "${color##*,}" $xtermgeo
            sleep .05 ## Just enough to space out the &-ed invocations so that they
            ## do not randomly appear, but rather appear in a nice
            ## cascade.
            ((j+=1))
        done
        ((i+=1))
    done
}
