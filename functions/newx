#!/usr/bin/env bash

# <Function Class: xterm>
# <Function Justification: none>

newx ()
{
    local var
    local more_opts=1
    local count=1
    local bg
    local lxtermgeo_w="$XTERMGEO_W"
    local colors
    while ((more_opts)) && [[ "$1" =~ ^- ]]
    do
        local option
        option=$(dashstripper "$1")

        case $option in
            w )
                ## wide
                ((lxtermgeo_w*=2)) ; shift ;;
            n )
                ## narrow
                ((lxtermgeo_w/=2)) ; shift ;;
            s )
                ## std
                ((lxtermgeo_w+-0)) ; shift ;;
            [0-9]* )
                ## number of xterms to spawn
                ((count=$1*-1)) ; shift ;;
            * )
                ## Is it a color?
                bg=$(dashstripper "$1")
                var="forebackmap_$bg"
                [ -n "${!var}" ] && colors="$colors ${!var}" && shift || more_opts=0 ;;
        esac
    done

    [ -z "${colors}" ] && var="forebackmap_$(xterm_background)" && colors=${!var}

    ## Yeah this is a little funky - you could end up creating "count"
    ## terminals of each color.
    local i=0
    local j=$i
    while ((i<count))
    do
        for color in $colors
        do
            # shellcheck disable=SC2086 # $XTERMFONTS needs expansion
            RXCmd "$HOSTNAME" -geometry "$XTERMGEO" $XTERMFONTS "$@" -fg "${color%%,*}" -bg "${color##*,}" \
                  -geometry "${lxtermgeo_w}x${XTERMGEO_H}+$((XTERMGEO_X+(j*72)))+$((XTERMGEO_Y+(j*72)))"
            sleep .05 ## Just enough to space out the &-ed invocations so that they
            ## do not randomly appear, but rather appear in a nice
            ## cascade.
            ((j+=1))
        done
        ((i+=1))
    done
}
