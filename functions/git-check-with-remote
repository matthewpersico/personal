# -*- sh -*-

# <Function Class: git>
# <Function Justification: none>

git-check-with-remote ()
{
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${HOME}/personal/data/funcsaudit ## This is audit
    ##@@ 0001||group||git-check-with-remote||

    local usage_func="${FUNCNAME}-usage"
    local iam=$(func-name-spoof)

    local opt_branch=''
    local opt_remote='origin'
    local opt_bail_on_dirty='0'
    local OPTSARGS=$(getoptp -o hb:r:c --long help,branch:,remote:,bail_on_dirty -n $iam -- "$@")
    status=$?
    ((status != 0)) && $usage_func $iam && return $status
    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            --bail_on_dirty) opt_bail_on_dirty=1; shift;;
            -r|--remote) opt_remote="$2"; shift; shift ;;
            -b|--branch) opt_branch="$2"; shift; shift ;;
            -h|--help) $usage-func $iam; return $OK ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; $usage_func $iam; return $NOT_OK ;;
        esac
    done

    if [ -z "$opt_branch" ]
    then
        echo "--branch required"
        $usage_func $iam
        return $NOT_OK
    fi

    local cb=$(git rev-parse --abbrev-ref HEAD)
    status=$?
    ((status != 0 )) && return $NOT_OK

    if [ "$cb" == '' ]
    then
        cat <<EOF

$iam is used to check your current git repo DEVELOPMENT branch in your local
clone against changes in

branch "${opt_branch}"
repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you do not appear to even be in a repo. I'm exiting. Try again in a
proper repo.

EOF
        return $NOT_OK
    fi

    if [ "$cb" == "$opt_branch" ]
    then
        cat <<EOF

$iam is used to check your current git repo DEVELOPMENT branch in your local
clone against changes in

branch "${opt_branch}"
repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you appear to be on branch "${opt_branch}", the branch you want to
sync with. I'm exiting. Get off the branch "${opt_branch}" and onto another
branch Then rerun the command. Or just do a 'git pull' if you really need to
refresh this branch.

EOF
        return $NOT_OK
    fi

    ## Check the local branch against its origin
    stcheck=$(mktemp --suffix=.git-check-with-remote.1)
    git status 1>$stcheck 2>&1
    grep "Your branch is up-to-date with 'origin/$cb'." $stcheck 1>/dev/null
    status=$?
    if [ "$status" != '0' ]
    then
        cat $stcheck
        cat <<EOF
Your branch should be up to date with its origin in order to simplify the
check.
EOF
        if ((opt_bail_on_dirty))
        then
            echo Exiting.
            return $NOT_OK
        else
            local resp=$(func-yesno "Do you want to continue anyway" n)
            if [ "$resp" == 'n' ]
            then
                return $NOT_OK
            fi
        fi
    fi

    local ok_to_pull=1
    ((opt_confirm)) && ok_to_pull=0

    ## Now grab the remote branch
    local gflog=$(mktemp --suffix=.git-check-with-remote.2)
    git fetch ${opt_remote} ${opt_branch} 2>$gflog
    local rc=$?
    if ((rc))
    then
        cat $gflog
        rm -f $gflog
        return $NOT_OK
    fi
    rm -f $gflog

    ## Log the local branch
    local locallog=$(mktemp --suffix=.git-check-with-remote.locallog)
    git log > $locallog

    ## Log the local copy of the remote branch
    local remotelog=$(mktemp --suffix=.git-check-with-remote.remotelog)
    git log ${opt_remote}/${opt_branch} > $remotelog

    ## Diff 'em
    local difflog=$(mktemp --suffix=.git-check-with-remote.difflog)
    diff $locallog $remotelog 1> $difflog 2>&1

    if [ -s $difflog ]
    then
        if [ "$(cat $difflog | wc -l)" = '10' ] \
               && [ ! "$(grep -E "Merge pull request.*$(git-get-current-branch)" $difflog)" = '' ]
        then
            echo "Only diff to ${opt_remote} is merge pull request."
        else
            echo
            echo "*** git repo: $(pwd)"
            echo "*** Current branch $(git-get-current-branch) and ${opt_remote}/${opt_branch} are not synced:"
            echo
            cat $difflog
        fi
    fi

    rm -f $locallog $remotelog $difflog
    return $OK
}
