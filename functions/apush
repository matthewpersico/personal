# -*- sh -*-
# shellcheck shell=bash

# apush

# <Function Class: bash arrays>
# <Function Justification: env mod>

apush ()
{
    if [[ $1 == -h ]] ; then bash-usage "${FUNCNAME[0]}"; return 0; fi
    if (( $# == 0 )); then echo "Missing argments. See help (${FUNCNAME[0]} -h)."; return 1; fi

    local -n _apush_a="$1"; shift
    _apush_a+=("$@")
}
autotrack apush "$0"
:<<'__PODUSAGE__'
=head1 NAME

apush - treat a bash array like a stack and add one or more elements to the end

=head1 SYNOPSIS

 apush array <list of values>
 apush -h

=head1 DESCRIPTION

Best described by example (which you can cut 'n' paste):

  clear
  declare -a target=(apush)
  declare foobar='eek'
  declare -a newstuff=(kirk spock mccoy)
  apush target 'foo' 'bar' 'baz' 'boingo' "$foobar" "${newstuff[@]}"
  echo -n "$   # "; set | grep -E '^target='
  # target=([0]="apush" [1]="foo" [2]="bar" [3]="baz" [4]="boingo" [5]="eek" [6]="kirk" [7]="spock" [8]="mccoy")

You can code a push inline by just using the bash syntax for adding to an
array:

  target+=('foo' 'bar' 'baz' 'boingo' "$foobar" "${newstuff[@]}"

However, it may more sense for your logical/semantic flow to use the 'apush'
verb.

=head1 ARGUMENTS

=over 4

=item target

The array to which to add items. No reference syntax or sigil ($) needed; the
function has a 'local -n' statement that does referencing-by-name.

=item list of values

One or more variables, constants, arrays, etc., whose values are added to the
target. **Always** double quote all variables in order to prevent embedded
whitepace expansion.

=back

=cut

__PODUSAGE__
