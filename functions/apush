#!/usr/bin/env bash

# <Function Class: bash arrays>
# <Function Justification: env mod>

apush ()
{
    if [[ $1 == -h ]]; then bash-usage apush; return 0; fi

    declare -n array="$1"
    shift
    array+=("$@")
}

:<<'__PODUSAGE__'
=head1 NAME

apush - treat a bash array like a stack and add one or more elements to the end

=head1 SYNOPSIS

 apush array <list of values>
 apush -h

=head1 DESCRIPTION

Best described by example:

  $ declare -a target=(initvalue)
  $ declare foobar='eek'
  $ apush target 'foo' 'bar' 'baz' 'boingo' "$foobar"
  $ set | grep -E '^target='
  target=([0]="initvalue" [1]="foo" [2]="bar" [3]= "baz" [4]="boingo" [5]="eek")

In theory, you can code a push inline by just using the bash syntax for adding
to an array:

  target+=('foo' 'bar' 'baz' 'boingo' "$foobar")

However, it may more sense for your logical/semantic flow to use the 'push'
verb.

=head1 ARGUMENTS

=over 4

=item target

The array to which to add items. No reference syntax or sigil ($) needed; the
function has a 'declare -n' statement that does referencing-by-name.

=item list of values

One or more variables, constants, arrays, etc., whose values are added to the
target. **Always** double quote all variables in order to prevent embedded
whitepace expansion.

=back

=cut

__PODUSAGE__
