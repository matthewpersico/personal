#!/usr/bin/env bash

# <Function Class: n/a>
# <Function Justification: env mod>

bash-strict ()
{
    local opt=$1

    if [[ "$opt" =~ ^-+h ]]; then
        bash-usage bash-strict
        return 0
    fi

    if [[ "$opt" =~ -off ]]; then
        set +euo pipefail
        IFS=$' \n\t'
    else
        set -euo pipefail
        if [[ "$opt" = '--ifs' ]]; then
            IFS=$'\n\t'
        fi
    fi
}
autotrack bash_strict "$0"
:<<'__PODUSAGE__'
=head1 NAME

bash-strict - settings that enforce more stringent checking in bash scripts

=head1 SYNOPSIS

 bash-strict [--ifs|--off|--help]

=head1 DESCRIPTION

Sets the following bash flags for code subsequent to the call:

 - set -e: immediately exit if any command [1] has a non-zero exit status.

 - set -u: a reference to any variable you haven't previously defined - with the exceptions of $* and $@ - is an error, and causes the program to immediately exit.

 - set -o pipefail: This setting prevents errors in a pipeline from being masked.

You do not want to set this at a command line; only use it in a script. If you set it at the command line, you could get complaints about functions called in your PS1.

Reference:  http://redsymbol.net/articles/unofficial-bash-strict-mode/

=head1 OPTIONS

=over 4

=item --ifs

In addition to the sets, remove space from the list of IFS characters. This gives better behavior when iterating over a loop.

=item --off

Turn off all the sets and add space back to IFS.

=item --help

Show this help text.

=back

=cut

__PODUSAGE__
