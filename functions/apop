# -*- sh -*-
# shellcheck shell=bash

# apop

# <Function Class: bash arrays>
# <Function Justification: env mod>

apop ()
{
    [[ $1 == -h ]] && bash-usage "${FUNCNAME[0]}" && { true; return; }
    (( $# == 0 )) && echo "Missing arguments. See help (${FUNCNAME[0]} -h)." && { false; return; }
    (( $# > 2 )) && echo "Too many arguments. See help (${FUNCNAME[0]} -h)." && { false; return; }

    local -n _apop_a=$1; shift

    if [[ -n $1 ]]; then
        local -n _apop_var=$1
        # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
        _apop_var=${_apop_a[-1]}
    fi
    _apop_a=("${_apop_a[@]:0:$((${#_apop_a[@]}-1))}")
    true; return
}
autotrack apop "$0"
:<<'__PODUSAGE__'
=head1 NAME

apop - treat a bash array like a stack and remove one element from the end

=head1 SYNOPSIS

 # Move the last value of the array into the variable.
 apop source variable

 # Remove the last value of the array.
 apop source

 # This help.
 apop -h

=head1 DESCRIPTION

Best described by example (which you can cut 'n' paste):

  clear
  declare -a source
  source=('foo' 'bar' 'baz' 'boingo' 'eek' 'ork' 'a-hah')

  declare v=''
  apop source v
  echo -n "$   # "; echo "v=$v"
  # v=a-hah
  echo -n "$   # "; set | grep -E '^source='
  # source=([0]="foo" [1]="bar" [2]="baz" [3]="boingo" [4]="eek" [5]="ork")

Attempting to pop from an empty array is not an error.

=head1 ARGUMENTS

=over 4

=item source

The array from which to remove an item. No reference syntax or sigil ($)
needed; the function has a 'local -n' statement that does referencing-by-name.

=item variable

The optional variable name (no sigils), into which the popped item is placed
when removed from 'source'. Also handled via 'local -n' reference-creating
syntax.

We could have coded the function such that is was called

 variable=$(apop source)

but that would needlessly start up a sub process.

=back

=cut

__PODUSAGE__
