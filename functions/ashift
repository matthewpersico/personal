#!/usr/bin/env bash

# <Function Class: bash arrays>
# <Function Justification: env mod>

ashift ()
{
    if [[ $1 == -h ]]; then bash-usage ashift; return 0; fi

    declare -n array="$1"
    shift

    declare _i
    if (( $# == 0 )); then
        # We just want to shift off one item and don't want to save it
        _i=1
    else
        if [[ $1 =~ ^- ]]; then
            declare -n output
            while (($#)); do
                [[ $1 = '-n' ]] && _i=$2     && shift && shift && continue
                [[ $1 = '-a' ]] && output=$2 && shift && shift && continue
                [[ $1 =~ ^- ]] && echo "$1 is an invalid option" && return 1
                echo "When using -n (and optionally -a), you cannot specify target variables for popped items."
                return 1
            done
            # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
            output=("${array[@]:0:$_i}")
        else
            _i=0
            for _v ; do
                declare -n _var=$_v
                # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
                _var=${array[_i]}
                ((_i+=1))
                ((_i == ${#array[@]} )) && break
            done
        fi
    fi
    array=("${array[@]:$_i}")
    return 0
}

:<<'__PODUSAGE__'
=head1 NAME

ashift - treat a bash array like a queue and remove one or more elements from the beginning

=head1 SYNOPSIS

 ashift source <list of variables>
 ashift source -n int [-a array]
 ashift -h

=head1 DESCRIPTION

Best described by example:

  $ declare -a source
  $ source=('foo' 'bar' 'baz' 'boingo' 'eek' 'ork' 'ook' 'a-hah')

  $ declare v=''
  $ declare w=''
  $ ashift source v w
  $ echo "v=$v w=$w"
  v=foo w=bar
  $ set | grep -E '^source='
  source=([0]="baz" [1]="boingo" [2]="eek" [3]="ork" [4]="ook" [5]="a-hah")

  $ declare -a target=()
  $ ashift source -a target -n 3
  $ set | grep -E "^target="
  target=([0]="baz" [1]="boingo" [2]="eek")
  $set | grep -E '^source='
  source=([0]="ork" [1]="ook" [2]="a-hah")

Attempting to pop more elements than exist is not an error. The function just
stops removing when there are no more elements.

=head1 ARGUMENTS

=over 4

=item source

The array from which to remove items. No reference syntax or sigil ($) needed;
the function has a 'declare -n' statement that does referencing-by-name.

=item list of variables

One or more variable names (no sigils), into which the shifted items are placed
when removed from 'source'. Also handled via 'declare -n' reference-creating
syntax. The number of variables determines the number of items shifted.

=back

=head1 OPTIONS

=over 4

=item -n int

The number of items to remove from the beginning of the array. Use this alone
if you just want to remove items without storing them. Use with '-a' (described
below) if you want to save the shifted items. It is an error to provide
variables to receive shifted items when using '-n'.

=item -a array

An array name (no sigil) to accept shifted items, in conjunction with -n. Also
handled via 'declare -n' reference-creating syntax. If not specified, items are
still shifted, but they are not assigned to any variables.

=back

=cut

__PODUSAGE__
