#!/usr/bin/env bash

# <Function Class: bash arrays>
# <Function Justification: env mod>

ashift ()
{
    if [[ $1 == -h ]] ; then bash-usage "${FUNCNAME[0]}"; return 0; fi
    if (( $# == 0 )); then echo "Missing argments. See help (${FUNCNAME[0]} -h)."; return 1; fi
    if (( $# > 2 )); then echo "Too many arguments. See help (${FUNCNAME[0]} -h)."; return 1; fi

    local -n _ashift_a="$1"; shift

    if [[ -n $1 ]]; then
        local -n _ashift_var=$1
        # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
        _ashift_var=${_ashift_a[0]}
    fi
    _ashift_a=("${_ashift_a[@]:1}")
    return 0
}

:<<'__PODUSAGE__'
=head1 NAME

ashift - treat a bash array like a queue and remove one element from the beginning

=head1 SYNOPSIS

 # Move the first values of the array into the variable, slide the remaining
 # elements toward the beginning.
 ashift source variable

 # Remove the first value of the array, slide the remaining
 # elements toward the beginning.
 ashift source

 # This help.
 ashift -h

=head1 DESCRIPTION

Best described by example (which you can cut 'n' paste):

  clear
  declare -a source
  source=('foo' 'bar' 'baz' 'boingo' 'eek' 'ork' 'ook' 'a-hah')
  echo -n "$   # "; set | grep -E '^source='
  # source=([0]="foo" [1]="bar" [2]="baz" [3]="boingo" [4]="eek" [5]="ork" [6]="ook" [7]="a-hah")

  declare v=''
  ashift source v
  echo -n "$   # "; echo "v=$v"
  # v=foo
  echo -n "$   # "; set | grep -E '^source='
  #  source=([0]="bar" [1]="baz" [2]="boingo" [3]="eek" [4]="ork" [5]="ook" [6]="a-hah")

Attempting to shift from an empty array is not an error.

=head1 ARGUMENTS

=over 4

=item source

The array from which to remove an item. No reference syntax or sigil ($)
needed; the function has a 'local -n' statement that does referencing-by-name.

=item variable

The optional variable names (no sigils), into which the shifted item is placed
when removed from 'source'. Also handled via 'local -n' reference-creating
syntax.

We could have coded the function such that is was called

 variable=$(ashift source)

but that would needlessly start up a sub process.

=back

=cut

__PODUSAGE__
