#!/usr/bin/env bash

# <Function Class: git>
# <Function Justification: none>

git-branch-info ()
{
    ##@@ 0001||group||git-branch-info||Read, write or delete meta information for a branch
    local usage_func="${FUNCNAME}-usage"
    local branch=$(git rev-parse --abbrev-ref HEAD)
    local timestamp=''
    local delete=0
    OPTSARGS=$(getoptp -o b:tdu --long branch:,timestamp,delete,unset -n $FUNCNAME -- "$@")
    local status=$?
    ((status != 0)) && $usage_func && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            --branch|-b) branch=$2; shift; shift;;
            --timestamp|-t) timestamp="[$(date)]"; shift;;
            --delete|-d|--unset|-u) delete=1; shift;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; $usage_func; return $NOT_OK ;;
        esac
    done

    local get_option='--get'
    local full_key="branch.${branch}"
    local key=$1
    if [ -n "$key" ]
    then
        full_key="${full_key}.${key}"
    elif ((delete))
    then
        echo "Cannot delete without an exact key to match on"
        return 1
    else
        get_option='--get-regexp'
    fi

    shift ## $@ is now the value if writing. All spaces will be converted to
          ## %20.
    if [ -z "$1" ]
    then
        if((delete))
        then
            ## Remove existing key
            git config --unset $full_key
        else
            ## Read existing key
            git config $get_option $full_key | \
                perl -p -e 's/%20/ /g' | \
                sort
        fi
    else
        local value=$(echo $@ | perl -p -e 's/\s/%20/g')
        git config $full_key "${timestamp}$value"
    fi
}
