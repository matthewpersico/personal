# -*- sh -*-

# <Function Class: util>
# <Function Justification: uses function env>

func-echo ()
{
    if [ -n "$FUNC_ECHO_DEBUG" ]
    then
        echo
        echo "----- func-echo -----"
        for i in $(seq 0 $(((${#FUNCNAME[@]}-1))) )
        do
            echo "FUNCNAME[$i]=[${FUNCNAME[$i]}]"
        done
        echo "----- func-echo -----"
        echo
    fi

    local reset_normal="${ANSI_reset}"
    local reset_title=''
    local endofopts=0
    local nonl
    local cont=0
    while [[ "$1" =~ ^- ]] && ((endofopts==0))
    do
        ## Strip all leading dashes here so that -foo and --foo can both be
        ## processed as 'foo'.
        declare original="$1"
        declare option="$1"
        declare new=''
        while [ ! "$new" = "$option" ] && [ ! "$option" = '--' ]
        do
            new=$option
            option=${option##-}
        done
        shift ## ...to you avoid endless loops on invalid options.

        case $option in
            head) echo ;;
            title)
                echo
                reset_title="${reset_normal}"
                reset_normal=''
                ;;
            n) nonl='-n' ;;
            c) cont=1; ;;
            --)
                endofopts=1 ;;
            -* )
                echo "func-echo: $1 is an invalid option."; return 1;;
        esac
    done

    local idx=${#FUNCNAME[@]};((idx-=1))
    local funcname=${FUNCNAME[$idx]}
    [ "${FUNCNAME[$idx]}" = 'main' ] && funcname=$(basename $0)

    local printit=${funcname}
    if ((cont))
    then
        printit=$(echo $funcname | sed 's/./ /g') ## Substitutes all the
                                                  ## characters for spaces,
                                                  ## giving us a properly
                                                  ## spaced indent, sans
                                                  ## funcname, indicating a
                                                  ## continuation of the prior
                                                  ## line.
    fi
    echo $nonl -e "${ANSI_reverse}>>> ${printit}${reset_normal}: $@${reset_title}"
}
