# -*- sh -*-

# <Function Class: util>
# <Function Justification: uses function env>

func-echo ()
{
    # ANSI_reset is in the env, not all caps so chellcheck complains.
    # shellcheck disable=SC2154
    declare reset_normal="${ANSI_reset}"
    declare reset_title=''
    declare endofopts=0
    declare nonl
    declare cont=0
    declare title=0
    declare funcname=${FUNCNAME[-1]}
    while [[ "$1" =~ ^- ]] && ((endofopts==0))
    do
        ## Strip all leading dashes here so that -foo and --foo can both be
        ## processed as 'foo'.
        declare original="$1"
        declare option="$1"
        declare new=''
        while [ ! "$new" = "$option" ] && [ ! "$option" = '--' ]
        do
            new=$option
            option=${option##-}
        done
        shift

        case $option in
            head) echo ;;
            title)
                echo
                title=1
                reset_title="${reset_normal}"
                reset_normal=''
                ;;
            n) nonl='-n' ;;
            c) cont=1 ;;
            h|help) func-usage && return "$OK";;
            f) funcname=$1 ; shift ;;
            --)
                endofopts=1 ;;
            -* )
                echo "func-echo: '$original' is an invalid option."; return "$NOT_OK";;
        esac
    done

    ## Not sure how this can happen. Need to revisit if it happens
    [ "$funcname" = 'main' ] && funcname=$(basename "$0")

    declare printit=${funcname}
    if ((cont))
    then
        ## Substitutes all the characters for spaces, giving us a properly
        ## spaced indent, sans func name, indicating a continuation of the
        ## prior line.
        # shellcheck disable=SC2001
        printit=$(echo "$printit" | sed 's/./ /g')
    fi
    declare p
    for p in "$@"
    do
        # ANSI_reverse is in the env, not all caps so chellcheck complains.
        # shellcheck disable=SC2154
        echo $nonl -e "${ANSI_reverse}>>> ${printit}${reset_normal}: $p${reset_title}"

        ## If there is a next line, it should be a continue line, but check
        ## before exec to not needlessly invoc.
        if [ "$printit" = "$funcname" ]
        then
            # shellcheck disable=SC2001
            printit=$(echo "$printit" | sed 's/./ /g')
        fi

        ## Reset out of title
        if ((title))
        then
            title=0 ## no need to reset for ever
            reset_normal="${ANSI_reset}"
            reset_title=''
        fi
    done
}

return 0 ## USAGE guard during sourcing this file.

/dev/null<<EOSTRING
__USAGE__
func-echo - label info with function name

  func-echo [--head] [--title] [-n] [-c] [ -f funcname ] "text" ["text"...]

Print the first "text" on a line with a reversed-color prefix containing the
function name. Print subsequent lines indented with reversed color spaces,
indicating continuation.

--head
  Print blank line before anything else

--title
  Print blank line before anything else and then print the first text line as
  reversed, not just the function name

-n
  Do not print a new line at the end of each line

-c
  Print the first "text" element as a continuation line.

-f
  Override the derived function name with this option. Useful if your function
  is a utility function called from some other function and you want to print
  from the caller's perspective, not the utility's.

__EOUSAGE__
EOSTRING

#  LocalWords:  funcname shellcheck util func
