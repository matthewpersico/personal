# -*- sh -*-
# shellcheck disable=SC2148

# <Function Class: util>
# <Function Justification: uses function env>

func-echo ()
{
    [ "$1" = "-v" ] && echo "${CMD_ECHO_AS:-${FUNCNAME[-1]}}" && return 0
    cmd-echo -f "${CMD_ECHO_AS:-${FUNCNAME[-1]}}" "$@"
}

return 0 ## USAGE guard during sourcing this file.

:<<'__PODUSAGE__'
=head1 NAME

  func-echo - label echos in functions with the command name

=head1 SYNOPSIS

 func-echo [--head] [--title] [-n] [-c] [-v] -- "text" ["text"...]

=head1 DESCRIPTION

Call 'func-echo' to print the first "text" on a line with a reversed-color
prefix containing the command name. Print subsequent lines indented with
reversed color spaces, indicating continuation.

The name to print is determined as either the envar CMD_ECHO_AS or ${FUCNAME[-1]}

You should only call 'func-echo' only in functions. Calling it in scripts may
result in either the wrong command or no command being printed.

Furthermore, if you call a script inside a function, and that script uses
'script-echo', you must pass the current value of the command name used for
printing down to the command. This is because exporting the value while in a
function will pollute the calling environment, which may be your command
line. Not exporting the value will cause the script not to see the value in its
new subshell process. The command sequence is

  CMD_ECHO_AS="$(func-echo -v)" command args...

And yes, you have to type that. Any attempt to set with a function will set
that in the current process space and if that process space is your command
line, subsequent commands will all print the first command you typed that was a
function.


=head1 OPTIONS

=item --

Indicates end of options to 'func-echo' so that all subsequent arguments are
taken as text to print. Technically not necessary UNLESS your first argument to
print happens to match one of the options to 'func-echo'.

=item --head

Print a blank line for spacing before printing any text.

=item --title

Print a blank line for spacing before printing any text and then print the
entire first text line as reversed, not just the command name.

=item -n

Do not print a new line at the end of each line.

=item -c

Print the first "text" element as a continuation line.

=back

=head1 Environment Variable

__PODUSAGE__

#  LocalWords:  funcname shellcheck util func
