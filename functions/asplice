# -*- sh -*-
# shellcheck shell=bash

# asplice

# <Function Class: bash arrays>
# <Function Justification: env mod>

asplice ()
{
    [[ $1 == -h ]] && bash-usage "${FUNCNAME[0]}" && { true; return; }
    (( $# == 0 )) && echo "Missing arguments. See help (${FUNCNAME[0]} -h)." && { false; return; }

    local -n _asplice_a=$1
    shift

    if [[ $1 =~ ^-+tgt ]]; then
        local -n _asplice_tgt=$2; shift; shift
    fi
    local offset=0
    local adj_offset=0
    local length=${#_asplice_a[@]}
    local adj_length=${#_asplice_a[@]}

    [[ -n $1 ]] && offset=$1 && shift
    [[ -n $1 ]] && length=$1 && shift

    adj_offset=$offset
    adj_length=$length

    # Convert a negative offset into a positive one.
    if ((offset < 0)); then
        ((adj_offset = ${#_asplice_a[@]} + offset))
    fi

    # Convert the negative number of elements to keep at the end into positive
    # number of elements to remove.
    if ((length < 0 )); then
        ((adj_length = ${#_asplice_a[@]} - adj_offset + length))
        if ((adj_length < 0)); then
            ((adj_length = 0))
        fi
    fi

    # The removed elements
    _asplice_tgt=("${_asplice_a[@]:$adj_offset:$adj_length}")

    # The spliced _asplice_a
    _asplice_a=("${_asplice_a[@]:0:$adj_offset}" "$@" "${_asplice_a[@]:$((adj_offset+adj_length))}")

    true; return
}
autotrack asplice "$0"
if [[ ! $0 =~ bash ]]; then
    # Test via bash $0
    declare -a base=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14)
    declare -a addon=(a b c d e f g h i)
    declare -a input
    declare -a output
    declare -a fromperl
    declare -a fromperl_input
    declare -a fromperl_output
    declare cmd
    declare rv=0
    for (( offset=${#base[@]}*-1; offset <= ${#base[@]}; offset++)); do
        for (( length=${#base[@]}*-1; length <= ${#base[@]}; length++)); do
            readarray -t fromperl < <(perl -e "
use 5.16.3;
my @input = qw(${base[*]});
my @output = splice @input,$offset,$length,qw(${addon[*]});
say qq(@input);
say qq(@output);
")
            read -ra fromperl_input <<< "${fromperl[0]}"
            read -ra fromperl_output <<< "${fromperl[1]}"
            input=("${base[@]}")
            cmd="asplice input --tgt output $offset $length ${addon[*]}"
            $cmd
            ok=1
            if [[ ${#fromperl_input[@]} != "${#input[@]}" ]] \
                   || [[ ${#fromperl_output[@]} != "${#output[@]}" ]]; then
                ok=0; rv=1
            fi
            if ((ok==1)) && ((${#fromperl_output[@]} > 0)); then
                for (( jdx=0; jdx < ${#fromperl_output[@]}; jdx++ )) ; do
                    if [[ ${fromperl_output[$jdx]} != "${output[$jdx]}" ]]; then
                        ok=0;rv=1
                        break
                    fi
                done
            fi
            if ((ok==1)) && ((${#fromperl_input[@]})); then
                for (( idx=0;idx < ${#fromperl_input[@]}; idx++ )) ; do
                    if [[ ${fromperl_input[$idx]} != "${input[$idx]}" ]]; then
                        ok=0;rv=1
                        break
                    fi
                done
            fi
            if ((ok==0)); then
                echo "For command: $cmd"
                echo "Input:"
                echo "    Perl: ${fromperl_input[*]}"
                echo "    Bash: ${input[*]}"
                echo "Output:"
                echo "    Perl: ${fromperl_output[*]}"
                echo "    Bash: ${output[*]}"
                echo
            fi
        done
    done

    echo exit $rv
fi
:<<'__PODUSAGE__'
=head1 NAME

asplice - basic array manipulation, a la 'splice' in Perl

=head1 DESCRIPTION

 splice ARRAY [--tgt OUTARRAY] OFFSET LENGTH LIST
 splice ARRAY [--tgt OUTARRAY] OFFSET LENGTH
 splice ARRAY [--tgt OUTARRAY] OFFSET
 splice ARRAY [--tgt OUTARRAY]

B<Note> This help text librally lifted from 'perldoc -f splice' because it has
the best explanataion of what our function does.

Removes the elements designated by OFFSET and LENGTH from an array, and
replaces them with the elements of LIST, if any.  With `--tgt OUTARRAY`,
assigns the elements removed from the array to OUTARRAY.  Note that this is not
$OUTARRAY; we are passing this in by reference, not value, even though the bash
manual for the declare function says this is not possible.

The array grows or shrinks as necessary.  If OFFSET is negative then it starts
that far from the end of the array.  If LENGTH is omitted, removes everything
from OFFSET onward.  If LENGTH is negative, removes the elements from OFFSET
onward except for -LENGTH elements at the end of the array.  If both OFFSET and
LENGTH are omitted, removes everything.

Although they are not coded this way (we use the much shorter direct bash
manipulations), the following equivalences hold (assuming "${#a} >= $i")

declare -a a
apush a $x $y       asplice a ${#a[@]} 0 $x $y
apop a              asplice a -1
ashift a            asplice a 0 1
aunshift a $x $y    asplice a 0 0 $x $y
a[$i] = $y          asplice a $i 1 $y

=cut

__PODUSAGE__
