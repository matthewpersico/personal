#!/usr/bin/env bash

# <Function Class: git>
# <Function Justification: change cwd>

git-delete-repo ()
{
    local pwdmode=0
    local dirmode=''
    [ -z "$1" ] && func-usage && return 1
    [ "$1" = '--pwdmode' ] && pwdmode=1 && shift
    [ "$1" = '--dirmode' ] && dirmode=$2 && shift && shift

    local repo
    local returnpath
    returnpath=$(realpath "$(pwd)")

    if [ -n "$dirmode" ]
    then
        builtin cd "$dirmode"
        local root_or_err
        root_or_err="$(git root 2>&1)"
        local status=$?
        if ((status))
        then
            func-echo -- "$root_or_err"
            builtin cd "$returnpath"
            return $status
        else
            builtin cd "$root_or_err"
            repo=$(basename "$(realpath "$(pwd)")")
        fi
    elif ((!pwdmode))
    then
        local protocol=$1;shift
        local namespace=$1;shift
        repo=$1;shift

        local protocol_url
        protocol_url=$(kvstore get gitfuncs_gitsvcs "$protocol")
        if [ -z "$protocol_url" ]
        then
            func-echo -- "$protocol is unknown. Valid protocols are:$(kvstore vals gitfuncs_gitsvcs)"
            return 1
        fi

        ## Go to what we want to whack, to make sure it's there.
        git-go "$protocol/$namespace/$repo"
        status=$?
        ((status != 0)) && return 1; ## If the git-go fails, we should
        ## see error messages, no need to
        ## add more.
    fi

    (
        ## Subshell to allow cding around to be handled gracefully at the end

        ## Make sure it's clean
        if [ -d wt ] && (($(find wt | wc -l) > 1))
        then
            func-echo "worktrees found:"
            ls -la wt
            func-echo
            func-echo "Will not delete repo"
            return 1
        fi

        dirty=$(git status --porcelain)
        if [ -n "$dirty" ]
        then
            git status
            func-echo
            func-echo "Will not delete current repo"
            return 1
        fi

        builtin cd ..
        \rm -rf "$repo"
        status=$?
        ((status != 0)) && return 1; ## If the rm fails, we should see
                                           ## error messages, no need to add
                                           ## more.

        func-echo "Done. Not touching remote repo. Resetting git list..."
        ## Remove the just-deleted repo from the list of local git repos.
        git-go-set

        return 0
    )

    status=$?
    if [ -d "$returnpath" ]
    then
        builtin cd "$returnpath"
    else
        builtin cd
    fi
    return $status
}
