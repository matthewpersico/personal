#!/usr/bin/env bash

# <Function Class: bash env>
# <Function Justification: env mod, sourcing file>

use ()
{
    if [[ -z $1 ]]; then
        bash-usage use
        false; return
    fi

    local name=$1
    local ext
    local libspec
    for ext in binc env; do
        libspec="$BASH_INC_DIR/${name}.$ext"
        if [[ -r $libspec ]]; then
            break;
        fi
    done

    if [[ -z $ext ]]; then
        echo "use(bash): Cannot find any '${name}.[binc|ext] in $BASH_INC_DIR to load">&2
        false; return
    fi

    # shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090
    if . "$libspec"; then
        [[ -n $BASH_INC_VERBOSE ]] \
            && echo "use(bash): '$libspec' sourced">&2
        true; return
    fi

    echo "use(bash): Error sourcing '$libspec'">&2
    false
}


:<<'__PODUSAGE__'
=head1 NAME

use - include bash include files

=head1 SYNOPSIS

 use file [file...]

=head1 DESCRIPTION

Source in files of bash utils.

=head1 ARGUMENTS

=over 4

=item file

For file "foo", find "$BASH_INC_DIR/foo.[binc|env]" and source it in. All
"*.[binc|env]" files must return true when sourced. Call 'true' at the end of
the file (like putting a 1; at the end of a Perl module).

Unlike its Perl counterpart, a 'use'd script B<will be> reloaded each time it
is encountered. There is no safe way to ensure that results of a prior run
(function definitions, array and hash declarations to name two) will be visible
at a deeper shell level.

=back

=cut

__PODUSAGE__
