# -*- sh -*-
# shellcheck disable=SC2148

# <Function Class: util>
# <Function Justification: uses $0>

script-echo ()
{
    cmd-echo -s "${CMD_ECHO_AS:-$0}" "$@"
}

return 0 ## USAGE guard during sourcing this file.

:<<'__PODUSAGE__'
=head1 NAME

  script-echo - label echos in scripts with the command name

=head1 SYNOPSIS

 script-echo [--head] [--title] [-n] [-c] -- "text" ["text"...]

=head1 DESCRIPTION

Call 'script-echo' to print the first "text" on a line with a reversed-color
prefix containing the command name. Print subsequent lines indented with
reversed color spaces, indicating continuation.

The name to print is determined as either the envar CMD_ECHO_AS or $0.

You must call 'script-echo' in only in scripts. Calling 'script-echo' in a
function could pollute the environment; the CMD_ECHO_AS ennvar, used to
communicate the command name across the function/script process barrier will
end up being set in function's process. If you called that function from your
command line, all subsequent usages of func-echo or script-echo will to print
the wrong command.

=head1 OPTIONS

=item --

Indicates end of options to 'script-echo', so that all subsequent arguments are
taken as text to print. Technically not necessary UNLESS your first argument to
print happens to match one of the options to 'script-echo'.

=item --head

Print a blank line for spacing before printing any text.

=item --title

Print a blank line for spacing before printing any text and then print the
entire first text line as reversed, not just the command name.

=item -n

Do not print a new line at the end of each line.

=item -c

Print the first "text" element as a continuation line.

=back

=head1 Environment Variable

__PODUSAGE__

#  LocalWords:  funcname shellcheck util func
