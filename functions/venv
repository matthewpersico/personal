# -*- sh -*-
# shellcheck shell=bash
# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
        # shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090

# venv - because why not wrap a wrapper?

# <Function Class: python>
# <Function Justification: env>

venv::create()
{
    declare action=${FUNCNAME[0]//venv::}

    if $PYTHON_EXE -m venv .venv && [[ -d .venv ]]; then
        cmd-echo --id "venv:$action" -- "Created venv .venv (${PWD})"
    else
        cmd-echo --id "venv:$action" -- "Failed to create venv .venv"
        false; return
    fi

    _venv::assign_envvars

    cat <<EOF >> "${PYTHON_VIRTUAL_ENV_INIT_SPEC}"
pip install --upgrade pip
python -m pip install ruff black isort mypy pylint
# Per-project customizations here:

EOF

    cmd-echo --id "venv:$action" -- ".venv init file (.venv/${PYTHON_VIRTUAL_ENV_INIT_FILE}):"
    cat "${PYTHON_VIRTUAL_ENV_INIT_SPEC}"
}

venv::info()
{
   declare action=${FUNCNAME[0]//venv::}

   cmd-echo --id "venv:$action" --title -- "pyvenv.cfg"
   cat ".venv/pyvenv.cfg"
   cmd-echo --id "venv:$action" --title -- ".venv.init"
   cat ".venv.init"
   cmd-echo --id "venv:$action" --title -- "envvars"
   _venv::show_envvars
}

venv::show()
{
    venv::info
}

venv::init()
{
   declare action=${FUNCNAME[0]//venv::}

   if [[ ! -r ${PYTHON_VIRTUAL_ENV_INIT_SPEC} ]]; then
       cmd-echo --id "venv:$action" -ec -- "Cannot find venv init file ${PYTHON_VIRTUAL_ENV_INIT_SPEC}."
       false; return
   fi

   if [[ -e ${PYTHON_VIRTUAL_ENV_INITED_SPEC} ]]; then
       cmd-echo --id "venv:$action" -ec -- "Already executed $action; marker file ${PYTHON_VIRTUAL_ENV_INIT_SPEC} exists. Try 'reinit' if you want to run the init again."
       false; return
   fi

   . "${PYTHON_VIRTUAL_ENV_INIT_SPEC}" && touch "${PYTHON_VIRTUAL_ENV_INITED_SPEC}"
}

venv::edit()
{
    ${EDITOR:-vi} "${PYTHON_VIRTUAL_ENV_INIT_SPEC}"
}

venv::reinit()
{
   declare action=${FUNCNAME[0]//venv::}

   if [[ ! -r ${PYTHON_VIRTUAL_ENV_INIT_SPEC} ]]; then
       cmd-echo --id "venv:$action" -ec -- "Cannot find venv init file ${PYTHON_VIRTUAL_ENV_INIT_SPEC}."
       false; return
   fi

   if [[ ! -e ${PYTHON_VIRTUAL_ENV_INITED_SPEC} ]]; then
       cmd-echo --id "venv:$action" -ec -- "Cannot $action; marker file ${PYTHON_VIRTUAL_ENV_INITED_SPEC} not found. Try 'init' if you want to run the init."
       false; return
   fi

   \rm "${PYTHON_VIRTUAL_ENV_INITED_SPEC}"
   . "${PYTHON_VIRTUAL_ENV_INIT_SPEC}" && touch "${PYTHON_VIRTUAL_ENV_INITED_SPEC}"
}

_venv::assign_envvars()
{
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    export PYTHON_VIRTUAL_ENV_SPEC=$(realpath .venv)
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    export PYTHON_VIRTUAL_ENV_NAME=$(basename "${PYTHON_VIRTUAL_ENV_SPEC}")
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    export PYTHON_VIRTUAL_ENV_ROOT=$(dirname "${PYTHON_VIRTUAL_ENV_SPEC}")

    export PYTHON_VIRTUAL_ENV_INIT_FILE=${PYTHON_VIRTUAL_ENV_NAME}.init
    export PYTHON_VIRTUAL_ENV_INIT_SPEC=${PYTHON_VIRTUAL_ENV_ROOT}/${PYTHON_VIRTUAL_ENV_INIT_FILE}

    export PYTHON_VIRTUAL_ENV_INITED_FILE=${PYTHON_VIRTUAL_ENV_NAME}.inited
    export PYTHON_VIRTUAL_ENV_INITED_SPEC=${PYTHON_VIRTUAL_ENV_ROOT}/${PYTHON_VIRTUAL_ENV_INITED_FILE}

    export PYTHON_VIRTUAL_ENV_PID=$$
}

_venv::show_envvars()
{
    env | grep -E '^(PYTHON_)?VIRTUAL_ENV' | sort
}

venv::activate()
{
    # shellcheck disable=SC1091 #https://github.com/koalaman/shellcheck/wiki/SC1091
    source ".venv/bin/activate"
    _venv::assign_envvars
    if [[ -e ${PYTHON_VIRTUAL_ENV_INIT_SPEC} ]] \
           && [[ ! -e ${PYTHON_VIRTUAL_ENV_INITED_SPEC} ]]; then
        venv::init
    fi
}

venv::pip()
{
    if python -m pip "$@"; then
        echo "python -m pip $* # venv pip-install $(date)" >> "${PYTHON_VIRTUAL_ENV_INIT_SPEC}"
    fi
}

venv::deactivate()
{
    if is-a-function 'deactivate'; then
        cmd-echo --id "venv:$action" -- 'deactiving"...'
        deactivate
        cmd-echo --id "venv:$action" -- 'Done.'
    else
        cmd-echo --id "venv:$action" --wc -- '"deactivate" function not found. Not in a venv?.'
    fi
}

venv::destroy ()
{
    declare action=${FUNCNAME[0]//venv::}

    if is-a-function 'deactivate'; then
        cmd-echo --id "venv:$action" -- 'deactiving...'
        deactivate
        cmd-echo --id "venv:$action" -- 'Done.'
        cmd-echo --id "venv:$action" -- 'Removing venv dir...'
        rm -rf "${PYTHON_VIRTUAL_ENV_SPEC}"
        cmd-echo --id "venv:$action" -- 'Done.'
        _venv::unassign_envvars
    elif [[ -z $VIRTUAL_ENV ]]; then
        cmd-echo --id "venv:$action" -- '"VIRTUAL_ENV" is not set; nothing to do.'
    else
        cmd-echo --id "venv:$action" --wc -- 'No "deactivate function found, but VIRTUAL_ENV is set. Investigate.'
    fi
}

_venv::unassign_envvars()
{
    unset PYTHON_VIRTUAL_ENV_SPEC
    unset PYTHON_VIRTUAL_ENV_NAME
    unset PYTHON_VIRTUAL_ENV_ROOT
    unset PYTHON_VIRTUAL_ENV_INIT_FILE
    unset PYTHON_VIRTUAL_ENV_INIT_SPEC
    unset PYTHON_VIRTUAL_ENV_INITED_FILE
    unset PYTHON_VIRTUAL_ENV_INITED_SPEC
}

_venv::verify_venv_dir_should_exist()
{
    if [[ ! -d .venv ]]; then
        cmd-echo --id "venv:$1" -ec -- "Cannot $1 with '.venv'; directory not found."
        false; return
    fi
    true; return
}

_venv::verify_venv_dir_should_not_exist()
{
    if [[ -e .venv ]]; then
        cmd-echo --id "venv:$1" -ec -- "Cannot $1; directory '.venv' already exists: "
        ls -la ".venv"
        false; return
    fi
    true; return
}

_venv::verify_should_not_be_in_a_venv()
{
    if [[ -n $VIRTUAL_ENV ]]; then
        if [[ "$PYTHON_VIRTUAL_ENV_PID" = "$$" ]]; then
            cmd-echo --id "venv:$1" -ec -- "Cannot $1 in a venv. Currently in $VIRTUAL_ENV."
            false; return
        # else
        #   This is probably a spawned shell inheriting envvars from the parent
        fi
    fi
    true; return
}

_venv::verify_should_be_in_a_venv()
{
    if [[ -z $VIRTUAL_ENV ]]; then
        cmd-echo --id "venv:$1" -ec -- "Cannot $1 outside a venv. VIRTUAL_ENV not defined."
        false; return
    fi
    if [[ "$PYTHON_VIRTUAL_ENV_PID" != "$$" ]]; then
        cmd-echo --id "venv:$1" -ec -- "Cannot $1 outside a venv. VIRTUAL_ENV is set, but the process id is incorrect ($PYTHON_VIRTUAL_ENV_PID instead of $$)."
        false; return
    fi
    true; return
}

_venv::usage()
{
    bash-usage venv "$PYTHON_EXE" -m venv -h
}

venv()
{
    local OPTSARGS
    local shortopts='h'
    local longopts='help'
    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@") || return
    eval set -- "$OPTSARGS"

    while true; do
        local option=$1
        shift
        [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
        case $option in
            h | help )
                _venv::usage
                set +x; true; return
                ;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
                         ## remaining $*, if any, are args
            *)
                cmd-echo --id venv -ec -- "$option is an invalid option. See $0 --help"
                set +x; false; return
                ;;
        esac
    done

    local action=$1; shift
    if [[ -z $action ]]; then
        _venv::usage
        set +x; true; return
    fi

    # Shortcut processing here
    case $action in
        ac | act ) action='activate';;
        deac) action='deactivate';;
    esac

    declare ceid="venv:$action"
    local action_func_name="venv::${action}"

    if declare -F "$action_func_name" >/dev/null; then
        case $action in
            abandon | destroy )
                ;;
            create )
                if ! _venv::verify_venv_dir_should_not_exist "$action" \
                        || ! _venv::verify_should_not_be_in_a_venv "$action"; then
                    set +x; false; return
                fi
                ;;
            activate )
                if ! _venv::verify_venv_dir_should_exist "$action" \
                        || ! _venv::verify_should_not_be_in_a_venv "$action"; then
                    set +x; false; return
                fi
                ;;
            cd | reinit | deactivate | edit )
                if ! _venv::verify_should_be_in_a_venv "$action"; then
                    set +x; false; return
                fi
                ;;
            info | show )
                if ! _venv::verify_venv_dir_should_exist "$action" ; then
                    set +x; false; return
                fi
                ;;
            pip )
                if ! _venv::verify_venv_dir_should_exist "$action" \
                        || ! _venv::verify_should_be_in_a_venv "$action"; then
                    set +x; false; return
                fi
                ;;
            help )
                bash_usage venv
                set +x; true; return
                ;;
            * )
                cmd-echo --id "venv:$action" -ec -- "'$action' not supported."
                set +x; false; return
                ;;
        esac

        "$action_func_name" "$@"
        declare dq=$?
        set +x; return $dq
    else
        cmd-echo --id "$ceid" -ec -- "unknown env action '$action'"
        set +x; false; return
    fi
}

declare f
for f in $(declare -F | sed 's/.* //' | grep _venv); do
    echo "re-typesetting $f"
    typeset -fx "$f"
done

autotrack venv "$0"

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
#line 288
=head1 NAME

venv - useful things to do with venv

=head1 SYNOPSIS

 venv create
 venv info|show
 venv activate
 venv reinit
 venv deactivate
 venv destroy
 venv pip [install]

=head1 DESCRIPTION

A collection of actions and data about a python venv.

=head1 ACTIONS

=over 4

=item create

Create a venv environment. Will not function if you are already in a venv (as
defined by the envvar VIRTUAL_ENV). A file C<.venv.init> will also be created
in the current directory with commands to take to initialize the venv the first
time it is activated.

=item info|show

Show the venv config information, querying C<$VIRTUAL_ENV/pyvenv.cfg>, then
C<$VIRTUAL_ENV/pyvenv.cfg>.

=item activate

Starts up the requested venv. Will not function if you are already in a venv
(as defined by the envvar VIRTUAL_ENV). Also looks for the file C<.venv.inited>
in .venv and, if not found, runs C<.venv.init> if it is found. If the init is
successful, C<.venv.ininted> is created to prevent init re-execution.

=item reinit

Rerun the C<.venv.init> script, even if it has been previously run.

=item deactivate

Exit the current venv. Will not funtion if you are not in a venv (as defined by
the envvar VIRTUAL_ENV).

=item destroy

Exit the current venv. Remove the .venv subdir.

=item pip

Runs pip install but adds the requested package to the .venv.init file so you
don't have to re-run the command if you re-init the venv.

=back

=head1 OPTIONS

=over 4

=item -help|-h

Print this help text.

=back

__PODUSAGE__
