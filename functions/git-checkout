# -*- sh -*-

# <Function Class: git

git-checkout ()
{
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/personal/data/funcsaudit ## This is audit
    ##@@ 0001||group||git-checkout||
    local usage_func="${FUNCNAME}-usage"

    local opt_m=''
    local message=''
    OPTSARGS=$(getoptp -o m: --long message: -n $FUNCNAME -- "$@")
    local status=$?
    ((status != 0)) && $usage_func && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -m|--message) opt_m=$1; message="$2"; shift ; shift ;;
            -h|--help) $usage_func; return $OK ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; $usage_func; return $NOT_OK ;;
        esac
    done

    local newbranch=$1
    local createbranch=''
    if [ -z "$newbranch" ]
    then
        local branchesa=($(git-branch-list --strip))
        if [ ${#branchesa[@]} == '0' ]
        then
            echo "No branches found. Are you in a git repo?"
            return $NOT_OK
        fi
        local current_branch=$(git-get-current-branch)
        local PS3="Choose by number, q to quit: "
        local newonemsg="Create a new one from $current_branch"
        local selected
        COLUMNS=1 ## One character wide terminal, forces list to be one column
        select selected in "'$newonemsg'" ${branchesa[@]}
        do
            if [ -n "$selected" ]
            then
                if [ "$selected" == "$current_branch" ]
                then
                    echo "$selected is current. Cannot checkout current."
                elif [ "$selected" == "'$newonemsg'" ]
                then
                    while [ -z "$newbranch" ]
                    do
                        read -p "Enter a new branch name: " newbranch
                    done
                    if [ -d './wt' ]
                    then
                        local resp=$(func-yesno "As a worktree" y)
                        if [ "$resp" == 'y' ]
                        then
                            builtin cd ./wt || return $?
                            git-worktree-create $opt_m "$message" $newbranch
                            return $?
                        fi
                    fi
                    createbranch='-b'
                else
                    newbranch=$(echo $selected | sed 's|\*||')
                fi
                break
            elif [ "$(echo $REPLY | tr '[A-Z]' '[a-z]')" = 'q' ]
            then
                return $OK
            else
                echo "'$REPLY' is an invalid choice"
            fi
        done
    fi
    if [ -n "$newbranch" ]
    then
        if [ "$newbranch" = 'help' ]
        then
            echo "Use -help or --help"
            return
        fi
        if [ "$newbranch" = 'info' ]
        then
            git branch -vv
            return
        fi
        git checkout $createbranch $newbranch
        status=$?
        if [ "$status" = '0' ] && [ "$createbranch" = '-b' ]
        then
            echo "Setting upstream..."
            git push --set-upstream origin $newbranch
        fi

        if [ -n "$opt_m" ]
        then
            git-st-ext "$message"
        fi
        ## Update with changed branches
        git-go-set
        return $?
    fi
    return $OK
}


