# -*- sh -*-
# shellcheck shell=bash

# nfssnapshot

# A wrapper around some nfs snapshot convenience functions. The reason that we
# use a bash function is that one of the convenience functions allows us to cd
# to the snapshot directory, so that has to be done in a function.

nfssnapshot ()
{
    use mktemp
    # shellcheck disable=SC2034
    local DEBUG__this_function=${FUNCNAME[0]}

    local doandcdfile
    local -A doandcdlist
    doandcdlist[go]=1

    local command=$1; shift
    local -a args
    if [[ -n "${doandcdlist[$command]}" ]]; then
        doandcdfile=$(mktempfile -+ "doandcd.$command")
        args+=('--doandcd' "$doandcdfile")
    fi
    args+=("$@")

    [[ -n "$NFSSNAPSHOT_DISPATCHER_VERBOSE" ]] && echo NFSSNAPSHOT WRAPPER sees command as "$command" and args as "${args[@]}" >&2
    local extend_script="nfssnapshot-${command}"
    if type -P "$extend_script" 1>/dev/null 2>/dev/null; then
        [[ -n "$NFSSNAPSHOT_DISPATCHER_VERBOSE" ]] && echo NFSSNAPSHOT WRAPPER calling "$extend_script" "${args[@]}" >&2
        "$extend_script" "${args[@]}"
    else
        echo "${command} not an nfssnapshot function"
        false; return
    fi
    local status=$?; true

    if ((status == $?)) \
           && [[ -n "$doandcdfile" ]] \
           && (( $(wc -l < "$doandcdfile") > 0 )); then
        local -a cdcmd
        read -r -a cdcmd < "$doandcdfile"
        if [[ -n "${cdcmd[0]}" ]] && [[ "${cdcmd[0]}" =~ ^(cd|ecd)$ ]]; then
            "${cdcmd[@]}"
            status=$?
        else
            cmd-echo --id nfssnapshot -ec -- "Cannot '${cdcmd[*]}' - only 'cd' and 'ecd' are supported"
            false; status=$?
        fi
    fi
    [[ -n $doandcdfile ]] && builtin rm -f "$doandcdfile"
    return $status
}
autotrack nfssnapshot "$0"
