# -*- sh -*-

# <Function Class: git

git-merge-pull-request-usage ()
{
    local cmd=$1;shift
    local protocol=$1
    local protocolarg=$1
    if [ -z "$protocol" ]
    then
        protocol='protocol'
        protocolarg='protocol'
    else
        protocolarg=''
    fi

    cat <<EOUSAGE

Usage: $cmd $protocolarg tgtnamespace/tgtrepo/tgtbranch srcnamespace/srcrepo/srcbranch
       $cmd $protocolarg tgtnamespace/tgtrepo/tgtbranch srcnamespace:srcbranch
       $cmd $protocolarg tgtnamespace/tgtrepo/tgtbranch srcbranch
       $cmd $protocolarg --upstream srcbranch
       $cmd $protocolarg --upstream
       $cmd $protocolarg

       Other options:
           --verbose - prints blow-by-blow action descriptions
           --keep    - unconditionally keep (do not ask about)
                       the target clone

       Merge the branch from the 'src' into the 'tgt'.

       The typical usage looks like

           $cmd $protocolarg dkpg/bulddeb mybranch

       In this case:

           - the source namespace defaults to your username
           - the source repo defaults to the target repo name
           - the target branch is 'master'

       Merging someone else's branch looks like

           $cmd $protocolarg dpkg/builddeb/ user//theirbranch

       As a cut 'n paste convenience, we also accept

           $cmd $protocolarg dpkg/builddeb/ user:theirbranch

       Furthermore, if your local repo that has the objects to merge is clone
       of a fork of the canonical repo, i.e. you are using the 'triangle'
       workflow, you can replace the target spec with --upstream. In this case,
       the target namespace and repo is the result of the command

           git config --get remote.upstream.url

       If the source is not specified, we assume the current branch.

       If the target is not specified, we assume --upstream.

       The use of --upstream and the current branch assumes you are in the
       branch that you have just pushed up to be merged.

EOUSAGE

}


