# -*- sh -*-
# shellcheck shell=bash
###############################################################################
#
# Name:        delpath
#
# Author:      Matthew Persico (matthew.persico@gmail.com)
#
# Copyright:   Matthew Persico (matthew.persico@gmail.com)
#
# Derived from work by Stephen Collyer (scollyer@netspinner.co.uk),
#                      Copyright: Netspinner Ltd 2000-2003
#
# <Function Class: path functions>
# <Function Justification: env mod>
###############################################################################

delpath ()
{
    ###########################################################################
    # local variables
    ###########################################################################

    typeset options_shift_val options_missing_arg options_unknown_opt
    typeset options_num_args_left
    typeset opt_h opt_p opt_s
    typeset opt_x opt_v
    typeset opt_e opt_c opt_r
    typeset sep=:

    typeset pathvar MATCH pathspec TEMP

    pathfunc_usage_init
    typeset -a USAGE
    USAGE=(
        "delpath [-h] [-s separator] [-e|-c] [-r] [-x] [-v] [[-p] pathvar] pathspec"
        "Deletes all path elements from 'pathvar' that match 'pathspec'. "
        "The match is partial by default."
        "$USAGE_OPT_P1"
        "$USAGE_OPT_P2"
        "$USAGE_OPT_P3"
        "$USAGE_OPT_P4F"
        "$USAGE_OPT_P5"
        "$USAGE_OPT_S"
        "$USAGE_OPT_E"
        "-c - 'pathspec' must be a complete match for a path element."
        "-r - P(r)une currently non-existent path elements from 'pathvar'."
        "$USAGE_OPT_X"
        "$USAGE_OPT_V"
        "$USAGE_OPT_H"
    )

    ###########################################################################
    # handle options
    ###########################################################################

    options "hp:s:xvecr:" "$@"
    shift "$options_shift_val"
    if [[ -n "$opt_h" ]]; then
        pathfunc_usage "${USAGE[@]}"
        return
    fi
    if [[ -n "$opt_e" ]] && [[ -n "$opt_c" ]]; then
        Usage "${USAGE[@]}" "Cannot use both options -e and -c simultaneously"
        return
    fi
    if [[ -n "$options_missing_arg" ]]; then
        Usage "${USAGE[@]}" "Missing argument for -$options_missing_arg"
        return
    fi
    if [[ -n "$options_unknown_opt" ]]; then
        Usage "${USAGE[@]}" "Unknown option -$options_unknown_opt"
        return
    fi
    if [[ "$options_num_args_left" -eq 0 ]] && [[ -z "$opt_r" ]]; then
        Usage "${USAGE[@]}" "No directory specified"
        return
    elif [[ "$options_num_args_left" -eq 1 ]]; then
        pathspec="$1"
    elif [[ "$options_num_args_left" -eq 2 ]]; then
        pathvar=$1
        pathspec="$2"
    elif [[ "$options_num_args_left" -ge 3 ]]; then
        Usage "${USAGE[@]}" "Too many arguments"
    fi

    [[ -n "$opt_s" ]] && sep=$opt_s;
    [[ -n "$opt_p" ]] && pathvar=$opt_p
    [[ -z "$pathvar" ]] && pathvar=PATH

    [[ -n "$opt_e" ]] && MATCH="-E"     # make grep use regexps
    if [[ -n "$opt_c" ]]; then
        MATCH="-E"
        # match complete line
        delit="^$pathspec\$"
    else
        delit="$pathspec"
    fi

    ###########################################################################
    # main
    ###########################################################################

    # Long path variable values may overflow arg list limits on some Unices. It
    # is also difficult, in a series of pipes, to deal with paths that have
    # spaces in them . Therefore we use an intermediate file.

    TEMP=/tmp/delpath.$$
    listpath -s "${sep}" -p $pathvar | grep -v $MATCH "$delit" > $TEMP
    local newvalue
    local line
    while read -r line; do
        if [[ -z "$opt_r" ]] || [[ -d "$line" ]]; then
            [[ -n "$newvalue" ]] \
                && newvalue="${newvalue}${sep}${line}" \
                    || newvalue="${line}"
        fi
    done < $TEMP
    eval $pathvar="'$newvalue'"
    /bin/rm -f $TEMP
    [[ -n "$opt_v" ]] && listpath -s "${sep}" -p $pathvar
    # shellcheck disable=SC2163 # We know we are exporting the reference.
    [[ -n "$opt_x" ]] && export "$pathvar"
}
autotrack delpath "$0"
# emacs
# Local Variables:
# mode: sh
# End:
