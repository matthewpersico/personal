#!/usr/bin/env bash

# <Function Class: bash arrays>
# <Function Justification: env mod>

aunshift ()
{
    if [[ $1 == -h ]]; then bash-usage aunshift; return 0; fi

    local -n array="$1"
    shift
    array=("$@" "${array[@]}")
}

:<<'__PODUSAGE__'
=head1 NAME

aunshift - treat a bash array like a queue and add one or more elements to the beginning

=head1 SYNOPSIS

 aunshift array <list of values>
 aunshift -h

=head1 DESCRIPTION

Best described by example:

  $ declare -a target=(initvalue)
  $ declare foobar='eek'
  $ aunshift target 'foo' 'bar' 'baz' 'boingo' "$foobar"
  $ set | grep -E '^target='
  target=([0]="foo" [1]="bar" [2]="baz" [3]="boingo" [4]="eek" [5]="initvalue")

In theory, you can code an unshift inline by just using the bash syntax for
prepending to an array:

  target=('foo' 'bar' 'baz' 'boingo' "$foobar" "${target[@]}")

However, it may more sense for your logical/semantic flow to use the 'unshift'
verb.

=head1 ARGUMENTS

=over 4

=item target

The array to which to add items. No reference syntax or sigil ($) needed; the
function has a 'declare -n' statement that does referencing-by-name.

=item list of values

One or more variables, constants, arrays, etc., whose values are added to the
target. **Always** double quote all variables in order to prevent embedded
whitepace expansion.

=back

=cut

__PODUSAGE__
