#!/usr/bin/env bash

# <Function Class: util>
# <Function Justification: can export>

function cmd-echo() {
    ## ANSI_reset is in the env, variable is not all caps, so shellcheck
    ## complains.
    # shellcheck disable=SC2154
    declare reset_normal="${ANSI_reset}"
    declare reset_title=''
    declare moreopts=1
    declare nonl=''
    declare continueline=0
    declare title=0
    while [[ "$1" =~ ^- ]] && ((moreopts))
    do
        declare original="$1"
        declare option="$1"
        option=$(dashstripper "$original")
        shift

        case $option in
            head ) echo ;;
            title )
                echo
                title=1
                reset_title="${reset_normal}"
                reset_normal=''
                ;;
            n ) nonl='-n' ;;
            c ) continueline=1 ;;
            h | help ) func-usage cmd-echo && return 0;;
            f | s | o )
                echo "-f, -s and -o are no longer used. Ignored..."
                ;;
            --)
                moreopts=0 ;;
            -* )
                echo "cmd-echo: '$original' is an invalid option."
                return 1
                ;;
        esac
    done

    declare prefix='>>> '
    for p in "$@"
    do
        if ((continueline))
        then
            ## Substitutes all characters for spaces, giving us a properly
            ## spaced indent, which indicates a continuation of the prior line.
            # shellcheck disable=SC2001
            prefix=$(echo "$prefix" | sed 's/./ /g')
        fi

        ## ANSI_reverse is in the env, variable is not all caps, so shellcheck
        ## complains.
        # shellcheck disable=SC2154
        echo $nonl -e "${ANSI_reverse}${prefix}: $p${reset_title}${reset_normal}"

        ## If there is a next line, it should be a continue line
        ((continueline)) || continueline=1

        ## Reset out of title
        if ((title))
        then
            title=0 ## no need to reset for ever
            reset_normal="${ANSI_reset}"
            reset_title=''
        fi
    done

}

return 0 ## USAGE guard during sourcing this file.

:<<'__PODUSAGE__'
=head1 NAME

  cmd-echo - label echo with some prefix and highlighting

=head1 SYNOPSIS

 cmd-echo [--head] [--title] [-n] [-c] -- "text" ["text"...]

=head1 DESCRIPTION

Call 'cmd-echo' to print the first "text" on a line with a reversed-color
prefix. Print subsequent lines indented with reversed color spaces, indicating
continuation. The name of the calling script is no longer printed. Too
difficult get it right with a mixture of functions and scripts at different
nesting levels. It is sufficient just to be able to pick out our messages vs
those printed by the utilities we call.

=head1 OPTIONS

=over 4

=item --

Indicates end of options to 'cmd-echo' so that all subsequent arguments are
taken as text to print. Technically not necessary UNLESS your first argument to
print happens to match one of the options to 'cmd-echo'.

=item --head

Print a blank line for spacing before printing any text.

=item --title

Print a blank line for spacing before printing any text and then print the
entire first text line as reversed, not just the prefix.

=item -n

Do not print a new line at the end of each line.

=item -c

Print the first "text" element as a continuation line.

=back

=cut

__PODUSAGE__

#  LocalWords:  funcname shellcheck util func
