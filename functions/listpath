###############################################################################
#
# Name:        listpath
#
# Author:      Stephen Collyer (scollyer@netspinner.co.uk)
#
# Copyright:   Netspinner Ltd 2000-2003
#
# <Function Class: path functions>
# <Function Justification: none>
###############################################################################

listpath ()
{
    echo "${FUNCNAME[0]} \"$@\" ## $(date +%Y%m%d%H%M%S)" >> ${TILDAE:-$HOME}/personal/data/funcsaudit ## This is audit
    ###########################################################################
    # local variables
    ###########################################################################

    typeset options_shift_val options_missing_arg options_unknown_opt
    typeset options_num_args_left
    typeset opt_h opt_p opt_s
    typeset opt_n
    typeset sep=:

    typeset pathvar

    pathfunc_usage_init
    typeset -a USAGE
    i=0; USAGE[i]="listpath [-h] [-s separator] [-n] [[-p] pathvar]"
    ((i+=1)); USAGE[i]="List elements of 'pathvar' on separate lines"
    ((i+=1)); USAGE[i]="$USAGE_OPT_P1"
    ((i+=1)); USAGE[i]="$USAGE_OPT_P2"
    ((i+=1)); USAGE[i]="$USAGE_OPT_P3"
    ((i+=1)); USAGE[i]="$USAGE_OPT_P4O"
    ((i+=1)); USAGE[i]="$USAGE_OPT_P5"
    ((i+=1)); USAGE[i]="$USAGE_OPT_S"
    ((i+=1)); USAGE[i]="$USAGE_OPT_N"
    ((i+=1)); USAGE[i]="$USAGE_OPT_H"

    ###########################################################################
    # handle options
    ###########################################################################

    options "hp:s:n" "$@"
    shift $options_shift_val

    if [ -n "$opt_h" ]
    then
        Usage "${USAGE[@]}"
        return
    fi
    if [ -n "$options_missing_arg" ]
    then
        Usage "$USAGE" "Missing argument for -$options_missing_arg"
        return
    fi
    if [ -n "$options_unknown_option" ]
    then
        Usage "$USAGE" "Unknown option -$options_unknown_option"
        return
    fi
    if [ $options_num_args_left -eq 1 ]
    then
        pathvar=$1
    fi

    [ -n "$opt_p" ] && pathvar=$opt_p # use specified pathvar
    [ -z "$pathvar" ] && pathvar=PATH  # default

    [ -n "$opt_s" ] && sep=$opt_s;

    if [ -n "$opt_n" ]
    then
        opt_n='-n'
    fi
    ###########################################################################
    # main
    ###########################################################################

    eval echo \$$pathvar | sep2line "${sep}" | grep $opt_n '.'
    ## grep for '.' cheats for listing with numbers

}

# emacs
# Local Variables:
# mode: sh
# End:
