#!/usr/bin/env bash

# <Function Class: util>
# <Function Justification: io channel access>
# Must be a function, not a script. If a script, the next descriptor will be
# that of the subshell of the script, not the shell of the caller.

get-next-descriptor ()
{
    local found=none
    local fd
    local rco
    local rci
    for fd in {0..255}; do
        # shellcheck disable=SC2261 #https://github.com/koalaman/shellcheck/wiki/SC2261
        rco="$(ftrue 2>/dev/null >&"${fd}"; echo $?)";
        rci="$(ftrue 2>/dev/null <&"${fd}"; echo $?)";
        [[ "${rco}${rci}" = "11" ]] && found=${fd} && break
    done
    if [[ -z "$found" ]]; then
        ffalse
    else
        echo "$found"
        ftrue
    fi

    return $?

    ## Note: If you need more than one descriptor, then you must open the
    ## descriptor you get from a call to this function before making the next
    ## call to this function; otherwise you will keep getting the
    ## same one. In other words:

    ## holdstdout=$(get-next-descriptor) # If this is 3...
    ## eval "exec $holdstdout>&1"        # now that it's open...
    ## holdstderr=$(get-next-descriptor) # this is 4.
    ## eval "exec $holdstderr>&2"

    ## not

    ## holdstdout=$(get-next-descriptor) # If this is 3...
    ## holdstderr=$(get-next-descriptor) # this is also 3.
    ## eval "exec $holdstdout>&1"
    ## eval "exec $holdstderr>&2"
}
