#!/usr/bin/env bash

# <Function Class: util>
# <Function Justification: save a shell>

same ()
{
    if [[ $1 == '-h' ]] || [[ $1 == '--help' ]]; then
        bash-usage same
        true
    elif diff -q "$@" >/dev/null; then
        true
    else
        false
    fi
}

:<<'__PODUSAGE__'
=head1 NAME

same - logicial syntactic sugar for diff

=head1 SYNOPSIS

 $ if same .bashrc .kshrc  ; then echo they are the same; fi
 $ if same .bashrc .bashrc  ; then echo they are the same; fi
 they are the same

 $ same -h|--help

=head1 DESCRIPTION

B<diff> logic is "backwards"; you get B<false> when there B<is> a diff. This
function corrects that problem. It does so efficiently by using the B<-q>
option. It also reroutes the output. That's two less things to cluttering up your
code.

Example:

 $ if diff -q .kshrc .bashrc; then \
      echo they are the different; \
   else \
      echo they are the same; \
   fi
 Files .kshrc and .bashrc differ
 they are the same

That logic reads wrong. If they are different, you want the first B<echo> to
execute. Plus, you have to remember to redirect B<diff>'s "file differ" output to
B</dev/null> (B<-q> stands for "quick", not "quiet").

By comparison:

 $ if same .kshrc .bashrc; then \
      echo they are the same; \
   else
      echo they are different; \
   fi
 they are different

=head1 ARGUMENTS

=over 4

=item files

Pass two files to B<same> for comparison, just like you would do with B<diff>.

=back

=head1 OPTIONS

=over 4

=item -h|--help

Print this help text.

=item all other options

You can pass any options to B<same> that you do to B<diff>. Keep in mind it is already using B<-q> and it routes the output to </dev/null>, so formatting commands are useless.

=back

=cut

__PODUSAGE__
