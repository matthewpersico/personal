# -*- sh -*-

# <Function Class: git

git-delete-branch ()
{
    ##@@ 0001||group||git-delete-branch||

    local no_remote=0
    local opt_yes=0
    local do_go_set=1
    OPTSARGS=$(getoptp -o y --long yes,no-remote,local-only,no-go-set -n $FUNCNAME -- "$@")
    local status=$?
    ((status != 0)) && $usage_func && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -y|--yes) opt_yes=1; shift ;;
            --no-remote|--local-only) no_remote=1; shift ;;
            --no-go-set) do_go_set=0; shift ;;
            -h|--help) $usage_func; return $OK ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; $usage_func; return $NOT_OK ;;
        esac
    done

    local branch=$1;
    local current_branch=$(git-get-current-branch)
    if [ -z "$branch" ]
    then
        local branchesa=($(git-branch-list --strip))
        if [ ${#branchesa[@]} == '0' ]
        then
            echo "No branches found. Are you in a git repo?"
            return $NOT_OK
        fi
        local PS3="Choose by number, q to quit: "
        local selected
        COLUMNS=1 ## One character wide terminal, forces list to be one column
        select selected in ${branchesa[@]}
        do
            if [ -n "$selected" ]
            then
                if [ "$selected" == "$current_branch" ]
                then
                    echo $selected is current. Cannot delete current.
                else
                    branch=$selected
                    break
                fi
            elif [ "$(echo $REPLY | tr '[A-Z]' '[a-z]')" = 'q' ]
            then
                return $OK
            else
                echo "'$REPLY' is an invalid choice"
            fi
        done
    fi

    if [ -n "$branch" ]
    then
        ## $branch was either $1 or we did not ctrl-c out of the select.
        if [ "$branch" = "$current_branch" ]
        then
            echo "Nope, you can't delete the current branch."
            return $NOT_OK
        fi

        local brdelstat
        git branch -d $branch
        brdelstat=$?
        if ((brdelstat))
        then
            func-echo "ERROR: git branch -d $branch failed. Returning $brdelstat."
            return $brdelstat
        fi
        func-echo "Branch deleted locally."

        if [ "$no_remote" = '1' ]
        then
            return $OK
        fi

        remotes=$(git remote)
        for remote in $remotes
        do
            local inremote=$(git-branch-list --strip -r | grep "$remote/$branch")
            if [ -n "$inremote" ]
            then
                local resp
                if ((opt_yes))
                then
                    resp='y'
                else
                    resp=$(func-yesno "Try deleting in remote $remote" n)
                fi
                if [ "$resp" == 'y' ]
                then
                    git push --delete $remote $branch ## This should not fail
                                                      ## since we have checked
                                                      ## that the branch exists
                                                      ## in the remote.
                    brdelstat=$?
                    if ((brdelstat))
                    then
                        func-echo "ERROR: git push --delete $remote $branch failed. Returning $brdelstat."
                        return $brdelstat
                    fi
                    func-echo "Branch deleted remotely."
                fi
            fi
        done
    fi

    ## Update with changed branches
    ((do_go_set)) && git-go-set
    return $?
}


