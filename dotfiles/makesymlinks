# -*- sh -*-
############################
# makesymlinks

# This script creates symlinks from any target file to the git-controlled
# source in ~/personal/dotfiles. Use this when initing a new vm.

############################

########## Variables

dotfiles_dir=~/personal/dotfiles            # dotfiles directory
dotfiles_olddir=~/personal/dotfiles_old     # old dotfiles backup directory
if [ ! $(basename "$SHELL") = 'bash' ]
then
    echo "We are using associative arrays. I can't tell if this is bash so I'm outta here"
    exit 1
fi
. ~/personal/dotfiles/makesymlinks.manifest
                                           # declares dotfiles as an assoc
                                           # array and fills is with names and
                                           # locations of files/folders to
                                           # symlink

##########

# create dotfiles_old
if [ ! -d $dotfiles_olddir ]
then
    echo -n "Creating $olddir for backup of any existing dotfiles in ~ ..."
    mkdir -p $dotfiles_olddir
    echo "done"
fi

# change to the dotfiles directory
echo -n "Changing to the $dotfiles_ir directory ..."
cd $dotfiles_dir
echo "done"

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks from the homedir to any files in the ~/dotfiles directory specified in $files
for src in ${!dotfiles[@]}; do
    fullsrc=$dotfiles_dir/$src
    link=${dotfiles[$src]}
    if [ ! -f $fullsrc ]
    then
        echo "'$fullsrc' not found. Skipping processing of '$link'."
    else
        if [ -e $link ] && [ -f $link ]
        then
            echo "Moving real file '$link' to $dotfiles_old so we can link it to '$fullsrc'."
            mv $link $dotfiles_old/$(basename $link).$(date '+%Y%m%d%H%M%S')
        fi
        echo "Creating symlink '$link' to '$fullsrc'."
        ln -s $link $fullsrc
    fi
done
