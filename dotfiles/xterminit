# -*- sh -*-
# shellcheck shell=ksh

# xterminit

## WARNING: This script is sourced (which is why it has "return"s outside of a
## function) in the (WORKPLACE REDACTED) environment on dev machines under ksh
## before Chimera switches over to bash. This script MUST be valid KORN SHELL
## for as long as it is run in a (WORKPLACE REDACTED) environment, meaning,
## among other things:
## - No associative arrays.
## - No variables with - in them. Use _ instead.

if [[ -z "$DISPLAY" ]]; then
    if iswsl && gwsl-ctrl running; then
        gwsl-ctrl set-envvars
    else
        # Maybe this is a putty - see if there's another process with DISPLAY
        # defined:
        # ps -U $USER -expandedcomamndsincludingenvvars \
            #   | sed -E -e 's/.*DISPLAY/DISPLAY/' -e 's/ .*//' \
            #   | sort -u | grep -v '=:0.0'
        export DISPLAY=:0.0
    fi
fi

## Is X installed?
if ! type -P xmodmap 1>/dev/null; then
    echo 'No X installed. xterm setup skipped.'
    true; return
fi

## Is X running?
if ! perl -e 'alarm shift @ARGV; exec @ARGV' 5 xmodmap 1>/dev/null 2>/dev/null; then
    if ! ~/personal/bin/launchxserver --silent; then
        echo "XServer not running, can't be launched. xterm setup skipped."
        true; return
    fi
fi

if [[ -z "$XTERM" ]]; then
    declare i
    for i in /usr/bin/X11 /usr/bin /bin /opt/bb/bin; do
        if [[ -z "$XTERM" ]] && [[ -e "$i/xterm" ]]; then
            XTERM="$i/xterm -sb -sl 40000"
            break
        fi
    done
    if [[ -z "$XTERM" ]]; then
        echo "$(date) - $(hostname) - Cannot find an xterm to use. xterm setup stops." >> ~/xterminit.stop
        true; return
    fi
fi

[[ -z "${HOSTNAME}" ]] && HOSTNAME=$(hostname)
if [[ -z "${HOSTNAME_FQDN}" ]]; then
    if [[ $OS_O == 'Linux' ]]; then
        HOSTNAME_FQDN=$(hostname --fqdn)
    else
        HOSTNAME_FQDN=$(nslookup "$(hostname)" | grep Name: | sed -E 's/Name:\s+//')
    fi
fi

export XTERM HOSTNAME HOSTNAME_FQDN

XTERMGEO_W=132
export XTERMGEO_W
XTERMGEO_H=40
export XTERMGEO_H
## Try to bring windows center screen, no matter how many you have. This gets
## tricky when you are using multiple monitors with differing sizes and
## resolutions. As of 2021/05, the X server that comes up when using the
## ThinkPad X1X is doing weird things so we are changing the rules.
declare root_width
root_width=$(x-current-root -w)
case $root_width in
    6400) XTERMGEO_X=3900 ;;
    * ) XTERMGEO_X=$(( root_width/2 ))
esac
export XTERMGEO_X
XTERMGEO_Y=$(( $(x-current-root -h)/6 ))
export XTERMGEO_Y
XTERMGEO="${XTERMGEO_W}x${XTERMGEO_H}+${XTERMGEO_X}+${XTERMGEO_Y}"
export XTERMGEO
case ${HOSTNAME_FQDN} in
    *depop* )
        NEWXCOLOR=DARKRED
        XTERMFONT_SIZE='12'
        ;;

    monolith* | MONOLITH* )
        NEWXCOLOR=BLACK
            XTERMFONT_NAME='lucidasanstypewriter'
            XTERMFONT_SIZE='12'
        ;;

    * )
        if iswsl; then
            NEWXCOLOR=BLACK
            XTERMFONT_NAME='lucidasanstypewriter'
            XTERMFONT_SIZE='12'
        else
            NEWXCOLOR=GREY
            XTERMFONT_NAME=''
            XTERMFONT_SIZE=''
        fi
        ;;
esac

export NEWXCOLOR
export XTERMFONT_NAME
export XTERMFONT_SIZE

## If we want to change git colors, then define the color assignments
## with a series of -c name=value assignments in an ennvar GIT_COLORS
## and make git be a function such that it calls '/the/real/git
## $GIT_COLORS "$@"'.

declare -A RGB
RGB=( ["GREY"]='169:169:169'
      ["RED"]='255:00:00'
      ["DARKRED"]='139:00:00'
      ["WHITE"]='255:255:255'
      ["BLACK"]='00:00:00'
      ["BLUE"]='00:00:255'
      ["STEELBLUE"]='70:130:180'
      ["GREEN"]='00:255:00'
      ["SEAGREEN"]='46:139:87'
      ["WHEAT"]='245:222:179'
      ["ORANGE"]='255:165:00'
      ["CHOCOLATE"]='210:105:30'
      ["LIGHTSTEELBLUE"]='176:196:222'
      ["PINK"]='255:192:203'
      ["BROWN"]='165:42:42'
    )

## Settings for xterm, distinct from the ANSI printable sequences above.
export FOREBACKMAP_GREY='BLACK,GREY'
export FOREBACKMAP_RED='WHEAT,RED'
export FOREBACKMAP_DARKRED='WHEAT,DARKRED'
export FOREBACKMAP_WHITE='BLACK,WHITE'
export FOREBACKMAP_BLACK='WHITE,BLACK'
export FOREBACKMAP_BLUE='WHITE,BLUE'
export FOREBACKMAP_STEELBLUE='WHITE,STEELBLUE'
export FOREBACKMAP_GREEN='BLACK,GREEN'
export FOREBACKMAP_SEAGREEN='WHITE,SEAGREEN'
export FOREBACKMAP_WHEAT='BLACK,WHEAT'
export FOREBACKMAP_ORANGE='BLACK,ORANGE'
export FOREBACKMAP_CHOCOLATE='WHITE,CHOCOLATE'
export FOREBACKMAP_LIGHTSTEELBLUE='WHITE,LIGHTSTEELBLUE'

## This creates envvars
##  FOREBACKMAP_<scheme>_RGB
## from envvars
##  FOREBACKMAP_<scheme> and RGB
for key in $(env | grep FOREBACKMAP | grep -v RGB | sed 's/=.*//'); do
    # shellcheck disable=SC2016 #https://github.com/koalaman/shellcheck/wiki/SC2016
    stmt='export '${key}'_RGB=${RGB[${'${key}'%%,*}]},${RGB[${'${key}'##*,}]}'
    # debug echo $val
    eval "$stmt"
done

## This creates envvars
##  XTERM_XGROUND_MAP_RBG<hex color>
## from
##  RGB
## The names and RGB values of the colors are taken from
## 'https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart'.
## The pattern is the three hex numbers for the color, each doubled up.
## For example. 'BLUE' is 4682B4 but comes up 46468282B4B4. Why? Who knows?
for key in "${!RGB[@]}"; do
    IFS=':' read -ra foo <<< "${RGB[$key]}"
    stmt=$(printf "export XTERM_XGROUND_MAP_RGB%02X%02X%02X%02X%02X%02X='$key'" "${foo[0]}" "${foo[0]}" "${foo[1]}" "${foo[1]}" "${foo[2]}" "${foo[2]}")
    # debug echo $stmt
    eval "$stmt"
done

export ESC="\\033"
export CSI="${ESC}["
export OSC="${ESC}]"

xset -b ## bell off

XTERMINIT_LOADED=1
export XTERMINIT_LOADED
