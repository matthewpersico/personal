# -*- sh -*-
# shellcheck shell=ksh

# xterminit

## WARNING: This script is sourced (which is why it has "return"s outside of a
## function) in the (WORKPLACE REDACTED) environment on dev machines under ksh
## before Chimera switches over to bash. This script MUST be valid KORN SHELL
## for as long as it is run in a (WORKPLACE REDACTED) environment, meaning,
## among other things:
## - No associative arrays.
## - No variables with - in them. Use _ instead.

if [[ -z "$DISPLAY" ]]; then
    if iswsl && gwsl-ctrl running; then
        gwsl-ctrl set-envvars
    else
        # Maybe this is a putty - see if there's another process with DISPLAY
        # defined:
        # ps -U $USER -expandedcomamndsincludingenvvars \
            #   | sed -E -e 's/.*DISPLAY/DISPLAY/' -e 's/ .*//' \
            #   | sort -u | grep -v '=:0.0'
        export DISPLAY=:0.0
    fi
fi

## Is X installed?
if ! type -P xmodmap 1>/dev/null; then
    echo 'No X installed. xterm setup skipped.'
    true; return
fi

## Is X running?
if ! perl -e 'alarm shift @ARGV; exec @ARGV' 5 xmodmap 1>/dev/null 2>/dev/null; then
    if ! ~/personal/bin/launchxserver --silent; then
        echo "XServer not running, can't be launched. xterm setup skipped."
        true; return
    fi
fi

if [[ -z "$XTERM" ]]; then
    declare i
    for i in /usr/bin/X11 /usr/bin /bin /opt/bb/bin; do
        if [[ -z "$XTERM" ]] && [[ -e "$i/xterm" ]]; then
            XTERM="$i/xterm -sb -sl 40000"
            break
        fi
    done
    if [[ -z "$XTERM" ]]; then
        echo "$(date) - $(hostname) - Cannot find an xterm to use. xterm setup stops." >> ~/xterminit.stop
        true; return
    fi
fi

[[ -z "${HOSTNAME}" ]] && HOSTNAME=$(hostname)
if [[ -z "${HOSTNAME_FQDN}" ]]; then
    if [[ $OS_O == 'Linux' ]]; then
        HOSTNAME_FQDN=$(hostname --fqdn)
    else
        HOSTNAME_FQDN=$(nslookup "$(hostname)" | grep Name: | sed -E 's/Name:\s+//')
    fi
fi

export XTERM HOSTNAME HOSTNAME_FQDN

XTERMGEO_W=132
export XTERMGEO_W
XTERMGEO_H=40
export XTERMGEO_H
## Try to bring windows center screen, no matter how many you have. This gets
## tricky when you are using multiple monitors with differing sizes and
## resolutions. As of 2021/05, the X server that comes up when using the
## ThinkPad X1X is doing weird things so we are changing the rules.
declare root_width
root_width=$(x-current-root -w)
case $root_width in
    6400) XTERMGEO_X=3900 ;;
    * ) XTERMGEO_X=$(( root_width/2 ))
esac
export XTERMGEO_X
XTERMGEO_Y=$(( $(x-current-root -h)/6 ))
export XTERMGEO_Y
XTERMGEO="${XTERMGEO_W}x${XTERMGEO_H}+${XTERMGEO_X}+${XTERMGEO_Y}"
export XTERMGEO
case ${HOSTNAME_FQDN} in
    *depop* )
        NEWXCOLOR=DARKRED
        XTERMFONT_SIZE='12'
        ;;

    monolith* | MONOLITH* )
        NEWXCOLOR=BLACK
            XTERMFONT_NAME='lucidasanstypewriter'
            XTERMFONT_SIZE='12'
        ;;

    * )
        if iswsl; then
            NEWXCOLOR=BLACK
            XTERMFONT_NAME='lucidasanstypewriter'
            XTERMFONT_SIZE='12'
        else
            NEWXCOLOR=GREY
            XTERMFONT_NAME=''
            XTERMFONT_SIZE=''
        fi
        ;;
esac

export NEWXCOLOR
export XTERMFONT_NAME
export XTERMFONT_SIZE

## If we want to change git colors, then define the color assignments
## with a series of -c name=value assignments in an ennvar GIT_COLORS
## and make git be a function such that it calls '/the/real/git
## $GIT_COLORS "$@"'.

## Settings for xterm, distinct from the ANSI printable sequences above.
export FOREBACKMAP_GREY='BLACK,GREY'
export FOREBACKMAP_RED='WHEAT,RED'
export FOREBACKMAP_DARKRED='WHEAT,DARKRED'
export FOREBACKMAP_WHITE='BLACK,WHITE'
export FOREBACKMAP_BLACK='WHITE,BLACK'
export FOREBACKMAP_BLUE='WHITE,BLUE'
export FOREBACKMAP_STEELBLUE='WHITE,STEELBLUE'
export FOREBACKMAP_GREEN='BLACK,GREEN'
export FOREBACKMAP_SEAGREEN='BLACK,SEAGREEN'
export FOREBACKMAP_WHEAT='BLACK,WHEAT'
export FOREBACKMAP_ORANGE='BLACK,ORANGE'
export FOREBACKMAP_CHOCOLATE='WHITE,CHOCOLATE'

export FOREBACKMAP_GREY_RGB='00:00:00,169:169:169'
export FOREBACKMAP_RED_RGB='246:222:179,256:00:00'
export FOREBACKMAP_DARKRED_RGB='256:256:256,139:00:00'
export FOREBACKMAP_WHITE_RGB='00:00:00,256:256:256'
export FOREBACKMAP_BLACK_RGB='256:256:256,00:00:00'
export FOREBACKMAP_BLUE_RGB='256:256:256,00:00:256'
export FOREBACKMAP_STEELBLUE_RGB='256:256:256,70:130:180'
export FOREBACKMAP_GREEN_RGB='0:0:0,00:256:00'
export FOREBACKMAP_SEAGREEN_RGB='0:0:0,46:139:87'
export FOREBACKMAP_WHEAT_RGB='00:00:00,245:222:179'
export FOREBACKMAP_ORANGE_RGB='00:00:00,256:165:00'
export FOREBACKMAP_CHOCOLATE_RGB='256:256:256,210:105:30'
export FOREBACKMAP_LIGHT_STEEL_BLUE_RGB='256:256:256,176:196:222'

## Make sure that the value of each entry below matches a color in one of the
## 'FOREBACKMAP_' variables above. The names and RGB values of the colors are
## taken from
## 'https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart'. The
## pattern is the three hex numbers for the color, each doubled up. So 'BLUE'
## is 4682B4 but comes up 46468282B4B4. Why? Who knows.
export XTERM_XGROUND_MAP_RGB46468282B4B4='BLUE'
export XTERM_XGROUND_MAP_RGBC0C0C0C0C0C0='GREY'
export XTERM_XGROUND_MAP_RGB8B8B00000000='DARKRED'
export XTERM_XGROUND_MAP_RGBFFFFFFFFFFFF='WHITE'
export XTERM_XGROUND_MAP_RGB000000000000='BLACK'
export XTERM_XGROUND_MAP_RGB46468282B4B4='BLUE'
export XTERM_XGROUND_MAP_RGB2E2E8B8B5757='GREEN'
export XTERM_XGROUND_MAP_RGBF5F5DEDEB3B3='WHEAT'
export XTERM_XGROUND_MAP_RGBFFFFA5A50000='ORANGE'
export XTERM_XGROUND_MAP_RGBFFFFFFFF0000='YELLOW'
export XTERM_XGROUND_MAP_RGBFFFFC0C0CBCB='PINK'
export XTERM_XGROUND_MAP_RGBA5A52A2A2A2A='BROWN'
export XTERM_XGROUND_MAP_RGBD2D269691E1E='CHOC'
export XTERM_XGROUND_MAP_RGBB0B0C4C4DEDE='LIGHT_STEEL_BLUE'

export ESC="\\033"
export CSI="${ESC}["
export OSC="${ESC}]"

xset -b ## bell off

XTERMINIT_LOADED=1
export XTERMINIT_LOADED
