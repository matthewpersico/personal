# -*- sh -*-
# shellcheck shell=bash

# profile
# Linked by ~/.profile.${USER}

# Note: the shebang is ignored. It is only there to help editors and
# linters. profiles are not executed. They are sourced into the shell that
# calls them, to which any line with a # is a comment.

# shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck disable=SC1091 #https://github.com/koalaman/shellcheck/wiki/SC1091

# How to tell if we are running during profile setup or not
RUNNING_IN_PROFILE=1
export RUNNING_IN_PROFILE

# CRON def, must be before anything that can reference it.
# It should be set at the very top of your "crontab" to the word 'true'.
# If we are under cron, $CRON, it will be 'true' below.
# If we are not under cron, $CRON will be blank below. In that case, we set it to 'false'.
# Now "$CRON" will end up executing the command 'true' or 'false' which will
# set $? to The Right Value in if statments such as:
#   if $CRON; then
#   if ! $CRON; then
[[ -z "$CRON" ]] && CRON=false;
export CRON

## For use under sudo
if [[ "$1" = '--tildae' ]]; then
    export TILDAE=$2; shift; shift;
    echo "Base for this profile is overriden to TILDAE=${TILDAE}"
else
    export TILDAE=$HOME
fi
declare this_profile="${TILDAE}/.profile.${USER}"
## How to plug in (monkeypatch) 'set -x', VERBOSE_PROFILE, etc, if needed. Use
## the "monkeypatch" program to manage this file.
[[ -r "${TILDAE}/profile.${USER}.monkeypatch" ]] && . "${TILDAE}/profile.${USER}.monkeypatch"

"$HOME/personal/bin/monkeytell" \
    "$VERBOSE_PROFILE" "$this_profile" 'start'

## OS_O(riginal) is the 'proclaimed' operating system name. Use this where a system may
## be lying, but fakes it pretty well. Do **NOT** use OS for this variable;
## that can be set by the operating system itself for its own purposes.
OS_O=$(uname -s)
export OS_O

## NFS cross-mount check
declare undershell
undershell="$(realpath "$SHELL")"
undershell="$(basename "$undershell")"
if [[ ! "$undershell" = 'bash' ]]; then
    echo "Skipping personal profile under '$SHELL'"
    true; return ## return is ok even though this is not a function because
                 ## this script is dotted in.
fi

shopt -s expand_aliases

##
## Start here
##
if [[ -d /opt/mop ]]; then
    export OPTROOT=/opt/mop
    export OPTBIN=$OPTROOT/bin
fi
export PERSONALROOT=${TILDAE}/personal
export PERSONALBIN=$PERSONALROOT/bin
export PERSONALLIB=$PERSONALROOT/lib
export PERSONALDATA=$PERSONALROOT/data
export LOCALROOT=${TILDAE}/local
export LOCALBIN=$LOCALROOT/bin
export LOCALDATA=$LOCALROOT/data
## Python creates this, but our python.mopenv is a bit of a mess right now, so we
## stick this definition here.
export DOTLOCALROOT=${TILDAE}/.local
export DOTLOCALBIN=$DOTLOCALROOT/bin
export DOTLOCALDATA=$DOTLOCALROOT/data
if [[ -d ${TILDAE}/.config ]]; then
    export CONFIGDIR=${TILDAE}/.config
fi

##
## autoload setup
##
export FPATH=$PERSONALROOT/functions ## First profile called so init is
                                     ## safe. Besides, we will not have
                                     ## 'addpath' until the autoload is done.
if [[ -z "$(declare -F autoload )" ]]; then
    ## Load autoloading. All of these functions get exported.
    . "$PERSONALBIN/autoload"
fi

if [[ -z "$(declare -F autoloaded-personal)" ]]; then
    declare -a _profile_autoload_args
    _profile_autoload_args=(-x -o)
    declare -a _profile_autoload_summary

    ## First, load autoload tracking, unshimmed, since every other function
    ## will use it.
    autoload "${_profile_autoload_args[@]}" \
             "${_profile_autoload_summary[@]}" \
             -l \
             autotrack
    declare _profile_unshim_count=1

    ## Over time you discover that many of your functions are only used in the
    ## context of backticks and other scripts that are executed but never
    ## sourced into your current process directly. That means that all of these
    ## subshells are going to re-evalute the shim over and over, even if you
    ## have exported the functions. This code will run 'autoload -l' on
    ## specified functions to do just that - unshim the most widely used
    ## functions. Don't be verbose under cron.
    declare _profile_unshim_func
    declare _profile_unshim_list="${TILDAE}/.config/autoload-unshim.config"
    if [[ -f "$_profile_unshim_list" ]]; then
        while read -r _profile_unshim_func; do
            autoload "${_profile_autoload_args[@]}" \
                     -l \
                     "$_profile_unshim_func"
            ((_profile_unshim_count+=1))
        done < "$_profile_unshim_list"
        ! $CRON && "$PERSONALBIN/cmd-echo" --id ".profile.$USER" --info "auto-unshimmed: $_profile_unshim_count"
    fi

    ## Finally, autoload everything else. Order does not matter here since it's all
    ## shims, so nothing needs to know about anything else until it's actually
    ## called, in which case its shim, or its full function code, will be
    ## ready.
    ! $CRON && _profile_autoload_summary+=(-y)
    autoload "${_profile_autoload_args[@]}" \
             "${_profile_autoload_summary[@]}" \
             -a "$PERSONALROOT/functions"

fi

## Now that functions are loaded, we can use them.
## Add our base paths.
[[ -n $OPTBIN ]] && addpath -fx PATH "$OPTBIN"
addpath -fx PATH "$PERSONALBIN"
addpath -fx PATH "$LOCALBIN"
addpath -fx PATH "$DOTLOCALBIN"
## Fix path we inherit from system - remove dups but, more importantly, non-existent paths.
uniqpath -dx PATH

##
## env setup
##

## Variables that can be exported to subshells are loaded here. We also load
## the xterminit file here (via xtermfuncs) as it contains functions that we
## cannot break out into their own files for autoload since xterminit is run
## under ksh before bash is invoked on chimera machines.
declare -a _profile_env_list
if [[ -f ${TILDAE}/empenv/bin/early.mopenv ]]; then
    _profile_env_list+=("${TILDAE}/empenv/bin/early.mopenv")
fi

declare -a _profile_env_init_list
_profile_env_init_list+=('util.mopenv' 'cd.mopenv' 'git.mopenv')
_profile_env_init_list+=('ansi-colors.mopenv' 'xtermfuncs')
_profile_env_init_list+=('nfssnapshot.mopenv' 'rsync.mopenv' 'bash-history.mopenv')
_profile_env_init_list+=('nvm.mopenv')
if iswsl; then
    _profile_env_init_list+=('wsl.mopenv')
fi
if [[ ! -d ${TILDAE}/empenv ]]; then
    _profile_env_init_list+=('python.mopenv')
fi

declare _profile_env_init
for _profile_env_init in "${_profile_env_init_list[@]}"; do
    _profile_env_list+=("$PERSONALBIN/${_profile_env_init}")
done

declare _profile_env _profile_env_full _profile_envvar _profile_envvar_val
for _profile_env_full in "${_profile_env_list[@]}"; do
    declare _profile_env
    _profile_env=$(basename "$_profile_env_full")
    _profile_envvar="$(echo "${_profile_env^^}" | tr -d '.' | tr '-' '_')_LOADED"
    _profile_envvar_val="$(eval echo "\$$_profile_envvar")"
    if [[ -z "$_profile_envvar_val" ]]; then
        "$HOME/personal/bin/monkeytell" \
            "$VERBOSE_PROFILE" "$this_profile" "Loading $_profile_env"
        . "$_profile_env_full"
    else
        "$HOME/personal/bin/monkeytell" \
            "$VERBOSE_PROFILE" "$this_profile" \
            "Skipped loading $_profile_env, $_profile_envvar=$_profile_envvar_val"
    fi
done

if ! $CRON; then
    ## Items we don't need in a cron job, some potentially fatal in that
    ## environment

    ## Check the personal repo.
    git-daily-repo-check "$PERSONALROOT"

    # MISC

    # X - Don't clear the screen.
    # R - Don't cleanse colors.
    # F - Exit at end only if one page so that you can go back if needed.
    # i - Case insensitive search unless you type one or more capital letters.
    LESS="-XRFi"
    export LESS

    # Needs setting
    declare _profile_pager
    for _profile_pager in less more; do
        [[ -z "$PAGER" ]] && PAGER=$(type -P $_profile_pager)
    done
    [[ -n "$PAGER" ]] && export PAGER

    # Editing
    declare iEDITOR
    for iEDITOR in xo emacs vi; do
        if [[ "$(type -P $iEDITOR 2>/dev/null)" ]]; then
            EDITOR="$iEDITOR"
            export EDITOR
            if [[ $EDITOR == 'xo' ]]; then
                LOGIT_EDITOR='xo -nf'
                export LOGIT_EDITOR
            fi
            break
        fi
    done

    # Browsing (decidedly non-standard)
    set-browser firefox

    # for silencing emacs dbus warning message
    export NO_AT_BRIDGE=1

    # History - set up a new history file per shell session. By the time we get
    # here, the function is defined in this session or an ancestor session, unless
    # we skipped it because we are running under cron.
    bash-history-init

fi

"$HOME/personal/bin/monkeytell" \
    "$VERBOSE_PROFILE" "$this_profile" 'end'

RAN_PROFILE="PID:$$ at $(date)"
export RAN_PROFILE

unset RUNNING_IN_PROFILE
