#-*- sh -*-

# dotfiles_funcs

DOTFILESFUNCS_FILE=${BASH_SOURCE[0]}

dotfilesfuncs_edit ()
{
    xo $DOTFILESFUNCS_FILE
}
alias dotfilesfuncs-edit=dotfilesfuncs_edit

dotfilesfuncs_reload ()
{
    . $DOTFILESFUNCS_FILE
}
alias dotfilesfuncs-reload=dotfilesfuncs_reload
alias dotfilesfuncs-load=dotfilesfuncs_reload

DOTFILES_DIR=~/personal/dotfiles         # dotfiles directory
DOTFILES_OLDDIR=~/personal/dotfiles_old  # old dotfiles backup directory
DOTFILES_MANIFEST=$DOTFILES_DIR/dotfiles.manifest
                                         # declares dotfiles as an assoc array
                                         # and fills is with names and
                                         # locations of files/folders to
                                         # symlink
if [ ! $(basename "$SHELL") = 'bash' ]
then
    echo "We are using associative arrays. I can't tell if this is bash so caveat programmer."
fi

dotfilesfuncs_help()
{
    local tmpfile=$(mktemp)
    declare -F | grep dot | sed 's|.* ||' > ${tmpfile}.df1
    declare -F | grep syml | sed 's|.* ||' >> ${tmpfile}.df1
    alias | grep dot | sed 's|.* ||' >> ${tmpfile}.df1
    cat ${tmpfile}.df1 | sort -u | grep -v '^_'
    \rm -f ${tmpfile}.df1
}
alias dotfilesfuncs-help='dotfilesfuncs_help '

_save_dotfile_entry()
{
    local key=$1
    local link=$2
    local tmp=${DOTFILES_MANIFEST}.$$

    cp -f $DOTFILES_MANIFEST $tmp
    echo "dotfiles[$key]=$link" >> $tmp
    mv $tmp $DOTFILES_MANIFEST
    . $DOTFILES_MANIFEST
}

# Converts real files into dotfiles-based symlinks. Use this to add new files
# to be controlled.
adddotfile ()
{
    if [ "$1" = '' ]
    then
        echo "usage: adddotfile fileToSymlink"
        return 1
    fi

    local link="$(cd $(dirname $1);pwd)/$(basename $1)"
    local fullsrc=$(basename $1)
    ## Strip the dot from the stored version.
    fullsrc=$DOTFILES_DIR/${fullsrc##.}
    ## All - to _
    fullsrc=$(echo ${fullsrc} | tr '-' '_')
    . $DOTFILES_MANIFEST

    # change to the dotfiles directory
    echo -n "Changing to the $DOTFILES_DIR directory ..."
    builtin cd $DOTFILES_DIR
    echo "done"

    # Move the requested dotfile to the dotfiles directory, add it to the git
    # repo, link it and add it to the manifest.
    if [ -f $fullsrc ]
    then
        echo "File '$fullsrc' already exists. Skipping processing of '$link'."
    elif [ -d $fullsrc ]
    then
        echo "Directory '$fullsrc' already exists. Skipping processing of '$link'."
    elif [ ! -e $link ]
    then
        echo "'$link' does not exist to be copied and linked. Skipping processing of '$link'."
    elif [ ! -f $link ] && [ ! -d $link ]
    then
        echo "'$link' is not a file or directory that can be copied and linked. Skipping processing of '$link'."
    else
        srctype='directory'; if [ -f $link ]; then srctype='file'; fi

        echo "Moving real $srctype '$link' to '$fullsrc'"
        mv $link $fullsrc

        echo "Adding to local dotfiles repo. Don't forget to commit and push."
        git add ${fullsrc##$(pwd)/}

        echo "Creating symlink '$link' to $srctype '$fullsrc'"
        ln -s $fullsrc $link
        _save_dotfile_entry $(basename $fullsrc) $link
    fi
    builtin cd -
}
alias dotfileadd='adddotfile '

# creates symlinks from any target file to the git-controlled source in
# ~/personal/dotfiles. Use this when initing a new vm.
makesymlinks ()
{
    # create DOTFILES_OLDDIR
    if [ ! -d $DOTFILES_OLDDIR ]
    then
        echo -n "Creating $olddir for backup of any existing dotfiles in ~..."
        mkdir -p $DOTFILES_OLDDIR
        echo "done"
    fi

    . $DOTFILES_MANIFEST

    # change to the dotfiles directory
    echo -n "Changing to the $DOTFILES_DIR directory ..."
    builtin cd $DOTFILES_DIR
    echo "done"

    # Move any existing dotfiles in to dotfiles_old directory, then create
    # symlinks from the original location to the corresponding files in the
    # ~/dotfiles directory.
    for src in ${!dotfiles[@]}; do
        local fullsrc=$DOTFILES_DIR/$src
        local link=${dotfiles[$src]}
        if [ ! -e $fullsrc ]
        then
            echo "'$fullsrc' not found. Skipping processing of '$link'."
        elif [ -h $link ]
        then
            echo "'$link' is already a link. Skipping processing of '$link'."
        elif [ -f $link ] || [ -d $link ]
        then
            srctype='directory'; if [ -f $link ]; then srctype='file'; fi
            echo "Moving existing $srctype '$link' to $DOTFILES_OLDDIR so we can link it to '$fullsrc'."
            mv $link $DOTFILES_OLDDIR/$(basename $link).$(date '+%Y%m%d%H%M%S')
        else
            echo "Creating symlink '$link' to '$fullsrc'."
            ln -s $fullsrc $link
        fi
    done
}
alias dotfilessync='makesymlinks '
alias syncdotfiles='makesymlinks '

makesshconfig()
{
    local config=~/.ssh/config
    local newconfig=${config}.new
    local oldumask=$(umask)
    umask 0077
    if [ -e $config ]
    then
        local bkup=${config}.$(date +%Y%m%d%H%M%S)
        echo "Backing up existing $config to $bkup"
        cp $config $bkup
        status=$?
        if ((status!=0))
        then
            echo "Backup did not succeed: $status. Bailing..."
            umask $oldumask
            return 1
        fi
    fi
    is_vm=$(hostname | grep bcpc | wc -l)
    echo "# Generated from $DOTFILES_DIR on $(date)" > $newconfig
    for i in $DOTFILES_DIR/ssh.*
    do
        local include=0
        if [ -n "$(echo $i | grep '.all')" ] ||
               ( [ -n "$(echo $i | grep '.vm')" ] && ((is_vm)) )
        then
            echo '' >> $newconfig
            cat $i >> $newconfig
        fi
    done
    mv $newconfig $config
    status=$?
    if ((status!=0))
    then
        echo "mv $newconfig $config did not succeed: $status. Bailing..."
        umask $oldumask
        return 1
    else
        echo "$config created"
    fi
    umask $oldumask
    return 0
}

showdotfiles ()
{
    . $DOTFILES_MANIFEST

    echo foo
    echo ${!dotfiles[@]}
    for src in ${!dotfiles[@]}
    do
        fullsrc=$DOTFILES_DIR/$src
        link=${dotfiles[$src]}
        echo
        echo "******"
        echo "$link"
        echo "******"
        ls -la $link $fullsrc
    done
}

gitcheck_dotfiles()
{
    builtin cd $DOTFILES_DIR
    git status
}
