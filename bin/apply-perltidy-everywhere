#!/usr/bin/env perl

use strict;
use warnings;

## The first two lines help us locate ApplyEverwhereUtils.
use FindBin qw($RealBin);
use lib "$RealBin/../lib";
#<<< perltidy
use ApplyEverywhereUtils qw(find_perl_code
                    is_git_repo
                    git_find_perl_code);
#>>> perltidy

use Test::More;

use Getopt::Long;
my $update_mode   = 0;
my $help          = 0;
my $findrc        = 0;
my $chattiness    = 1;
my $verbose       = 0;
my $silent        = 0;
my $keep          = 0;
my $profile       = '.../.perltidyrc';
my $use_tdy       = undef;
my @ptopts        = ();
my $names_only    = 0;
my $use_fail      = 0;
my $mod_only      = 0;
my $nonmod_only   = 0;
my $all           = 0;
my $stop_on_first = 0;

use File::Temp;

our %excludes;

## Option processing
GetOptions(
    update                => \$update_mode,
    'use-tdy:s'           => \$use_tdy,
    help                  => \$help,
    findrc                => \$findrc,
    'verbose:i'           => \$verbose,
    silent                => \$silent,
    keep                  => \$keep,
    'profile=s'           => \$profile,
    'ptopt=s@'            => \@ptopts,
    'names-only'          => \$names_only,
    'use-fail'            => \$use_fail,
    'mod-only|mod'        => \$mod_only,
    'nonmod-only|nonmod'  => \$nonmod_only,
    'all'                 => \$all,
    'stop-on-first-error' => \$stop_on_first
) or die "Bad argument, see --help for documentation.\n";

## Two early exits
exit system(qw(perltidy -dpro)) if ($findrc);
exec 'perldoc', $0 if ($help);

## Option checking
$profile = "-pro=$profile"                if ($profile);
die "Cannot set --verbose and --silent\n" if ( $verbose && $silent );
$chattiness += ( $verbose - $silent );
$chattiness = 0 if $ENV{HARNESS_ACTIVE};
if ( defined($use_tdy) ) {
    die "Cannot set --update and --use-tidy"
      if $update_mode;
    if ( $use_tdy eq '' ) {
        $use_tdy = '.tdy';
    } else {
        $use_tdy =~ s/\^.//;
        $use_tdy = ".${use_tdy}";
    }
}

die "Cannot set --update and --names-only"
  if $update_mode and $names_only;
die "Cannot set --update and --use-fail"
  if $update_mode and $use_fail;
die "Cannot set --names-only and --use-fail"
  if $names_only and $use_fail;
die "Cannot set --all and --mod-only"
  if $all and $mod_only;
die "Cannot set --all and --nonmod-only"
  if $all and $nonmod_only;

## Files to process
my @files;
if ( is_git_repo() ) {
    @files = git_find_perl_code(
        files       => ( $all || $mod_only || $nonmod_only ? [] : \@ARGV ),
        mod_only    => $mod_only,
        nonmod_only => $nonmod_only,
    );
#<<< perltidy
    die
      "No files given as arguments and no Perl files found to match mod($mod_only), nonmod($nonmod_only) or all($all) options"
      if !@files;
#>>> perltidy
} else {
    @files = find_perl_code( files => \@ARGV );
#<<< perltidy
    die
      "No files given as arguments and no Perl files found"
      if !@files;
#>>> perltidy
}

my $warnfmt =
  '%-' . ( sort { $b <=> $a } map { length($_) } @files )[0] . 's - %s';

system(qw(perltidy @ptopts -ddf))          if ( $chattiness >= 3 );
system(qw(perltidy @ptopts -dpro))         if ( $chattiness >= 2 );
system(qw(perltidy @ptopts $profile -dop)) if ( $chattiness >= 3 );

#my $perltidycmdbase = "$^X -d:ptkdb -S perltidy $profile";
my $perltidycmdbase = "perltidy @ptopts $profile";
my $diffs           = 0;
my $mods            = 0;
my $excludes_file   = (
    grep { -r $_ } (
        $ENV{PERLTIDY} ? dirname("$ENV{PERLTIDY}/.perltidyex") : (),
        "$ENV{PWD}/.perltidyex",
        "$ENV{HOME}/.perltidyex"
    )
)[0];

if ($excludes_file) {
    my $ih = IO::File->new( $excludes_file, 'r' );
    my $ex = join( '', <$ih> );
    eval $ex
      or die $@;
}

my @summary;
SOURCES: for my $file (@files) {

    ## Exclusion pre-preprocessing
    my @excludes;

    for my $exclude_type ( keys(%excludes) ) {
        if ( $exclude_type eq 'grep' ) {
            my @output;
            for my $excl_pat ( @{ $excludes{'grep'} } ) {
                my $ih = IO::File->new( $file, 'r' );
                push @output, grep { m/$excl_pat/ } <$ih>;
            }
            push @excludes, "By contents:\n", @output if (@output);
        } elsif ( $exclude_type eq 'name' ) {
            my @output;
            for my $excl_name ( @{ $excludes{'name'} } ) {
                push @output, $file if $file =~ m/$excl_name/;
            }
            push @excludes, "By name:\n", join( qq(\n), @output, '' )
              if (@output);
        } else {
            die "exclude type $exclude_type has no processing steps.";
        }
    }

    if (@excludes) {
        warn "$file is excluded from tidying for the following reasons:\n",
          @excludes
          if ( $update_mode and $chattiness >= 1 );
        next SOURCES;
    }

    if ($update_mode) {
        ## then modify the files in place so they can be committed with proper
        ## formatting.

        my @warn;
        my $bakext      = 'tdybak';
        my $bakfile     = "${file}.${bakext}";
        my $perltidycmd = "$perltidycmdbase -b -bext='$bakext' $file";
        my @diffout;
        my $diff_status;
        my $more_runs = 4;
        my $tidied    = 0;

        ## What's it's git status before...
        my @git_status;
        my $different = '       same as';
        for ( '', '--cached' ) {
            @git_status = qx(git diff $_ $file);
            if (@git_status) {
                $different = 'different than';
                last;
            }
        }
        push @warn, "$different git version"
          if ( $chattiness >= 1 );

        ## Yep, you have to run perltidy multiple times to catch some really
        ## nasty formatting. perltidy supposedly has a --iterations flag to
        ## control this, but I couldn't get it to work, so we implement it here
        ## by repeating until perltidy doesn't change anything. I also decided
        ## on 4 as the absolute upper limit because perltidy suggests that in
        ## their docs.
        do {
            qx($perltidycmd);
            @diffout = qx(diff $bakfile $file);
            $diff_status += $?;
            print "**********\ndiff $bakfile $file\n", @diffout
              if @diffout and $chattiness >= 2;
            unlink $bakfile if ( not $keep );
            $more_runs--;
        } while (@diffout) and $more_runs;
        if ( !$more_runs ) {
            warn "$file required four iterations - check it carefully\n"
              if $chattiness > 0;
        } elsif ( $chattiness >= 1 ) {
            my $tmp = 4 - $more_runs;
            push @warn, $tmp . ' run' . ( $tmp == 1 ? '' : 's' )
              if ( $tmp > 2 and $chattiness > 0 );
        }

        my $modified = '  modified';
        if ($diff_status) {
            $mods++;
            $tidied = 1;
        } else {
            $modified = 'unmodified';
        }
        push @warn, "$modified by perltidy"
          if ( $chattiness >= 1 );

        ## and its git status after...
        @git_status = ();
        $different  = '       same as';
        for ( '', '--cached' ) {
            @git_status = qx(git diff $_ $file);
            if (@git_status) {
                $different = 'different than';
                last;
            }
        }
        push @warn, "$different git version"
          if ( $chattiness >= 1 );
        if (@warn) {
            my $line = sprintf( $warnfmt, $file, join( ', ', @warn ) ) . "\n";
            warn $line;
            push @summary, $line
              if $tidied;
        }
    } else {
        ## just do a diff and indicate an error if the tidied version does not
        ## match the repo version.
        my $tdyname;
        if ( !$use_tdy ) {
            my $tmp = File::Temp->new();
            $tdyname = $tmp->filename;
        } else {
            $tdyname = "${file}${use_tdy}";
        }
        my $cmd = qq($perltidycmdbase -o=$tdyname $file);
        print("$cmd\n") if ( $chattiness >= 3 );
        qx($cmd);
        my @diff = qx(diff -U3 $file $tdyname );
        $diffs += @diff;
        if (@diff) {
            if ($names_only) {
                print "$file\n";
            } elsif ($use_fail) {
                fail("perltidy $file");
            } else {
                print @diff;
            }
        }
        unlink $tdyname;
        last SOURCES
          if ( @diff and $stop_on_first );
    }
}

print "\n*** Modification summary ***\n", @summary
  if @summary;
exit( $diffs ? 1 : 0 );

__END__

=head1 NAME

  apply-perltidy-everywhere - runs perltidy on files for validation

=head1 SYNOPSIS

  apply-perltidy-everywhere --stop-on-first-error
                            ## for use in t/0-perltidy.t

  apply-perltidy-everywhere [ --use-tdy [ ext ] ] \
                            [ --names-only ] \
                            [ --verbose|--silent ] \
                            [ --profile profile_file ] \
                            [ --ptopt '--opt=value ' [ --ptopt '--opt=value ']... ] \
                            [ --[non]mod-only | @files ]


  apply-perltidy-everywhere [ --update [ --keep ] ] \
                            [ --verbose|--silent ] \
                            [ --profile profile_file ] \
                            [ --ptopt '--opt=value ' [ --ptopt '--opt=value ']... ] \
                            [ --[non]mod-only | @files ]

  apply-perltidy-everywhere --findrc

  apply-perltidy-everywhere --help

=head1 DESCRIPTION

Runs 'perltidy' on its arguments assumed to be Perl files. If no files are
provided and the current directory is a git repo, 'git ls-files' is run to find
Perl files with extentions matching the regexp 'm/\.(p[ml]|t|sgi)$/i' or that
contain a perl shebang on the first line.

=head2 Modes

There are two main modes in which this program can be run.

=head3 Confirmation mode

This is the default mode. In this mode, perltidy is run on each file with the
results shunted to a temp file. A diff is then run between the original and the
perltidy-ed temp file. If there are any differences, a 'warn'ing to that effect
is printed and after all files are processed, the program will exit with a
failure status.

This mode should be used in a test 0-perltidy.t file, so that if a non-tidy
file exists, running the test suite in the course of development will catch the
issue before the offending file gets checked in.

=head3 Update mode

The other mode is update mode, set using the --update option. In this mode, the
file itself is actually tidied. This is the mode you would use to update the
offending files that failed the confirmation test.

=head2 Exclusions

If you need to exclude files from being perltidied, simply create a
'.perltidyex' file in the root of the git repo or project with the following
format:

  $excludes{grep} = [ a list of regular expressions found in the files to exclude ];
  $excludes{name} = [ a list of paths to the files to exclude unconditionally,
                     relative to the repo root ];

.perltidyex is simply Perl code that is processed by reading in the text and
eval'ing it. Syntax errors will be caught. The file is searched for in three
locations and the first one found is used exclusively:

  dirname($ENV{PERLTIDY})
  $ENV{PWD}
  $ENV{HOME}

=head2 Operation

This file is meant to be run as part of the test suite in a dpkg repo. It is
invoked when the 'runtests' command is run during normal testing or with the
'--check-only' flag.

=head1 ARGUMENTS

Any non-option arguments are considered to be Perl files, but are not confirmed
to be such before being processed.

=head1 OPTIONS

=over

=item --use-tdy [ ext ]

In confirmation mode, for each file, do not direct the output to a temp file
that is disposed of, but put it in a file with the same path as the source,
with the extension '.tdy. added. Specify 'ext' if you want to use another
extension.

=item --names-only

In confirmation mode, print only the names of files that are not
tidy. Otherwise, a diff against the tidied version is printed.

=item --stop-on-first-error

In confirmation mode, stop when the first error is encountered. For running the
test suite, this is sufficient; one error is enough to require a code update
before proceeding. When in update mode, all errors will be found and corrected.

=item --update

Use update mode, where, for each file, the output is written to the original
file.

=item --mod-only

In all modes, only process files that are tracked and modified, as determined by

 git status --porcelain | grep -v '?' | sed 's/.* //'

Any file arguments are ignored.

=item --nonmod-only

In all modes, only process files that are NOT tracked and modified, as
determined by inverse of

 git status --porcelain | grep -v '?' | sed 's/.* //'

Any file arguments are ignored.

=item --all

In update mode, check all tracked files, modified or not, as determined by

 git ls-files

Any file arguments are ignored. This is the same as invoking the command with
no file arguments.

=item --keep

In update mode, the original text is lost if changes are made. With this flag,
the original is written to a file with the same path as the source, with the
extension '.tdybak'. added.

=item --verbose level

In update mode, if this flag is not set at all, then the script will print out
the names of files which have been modified by perltidy or for which perltidy
had to be run more than twice. If level >= 1, the contents and location of the
.perltidyrc file are added to the output. If level == 2, the following
information is added to the output:

o Default options before .perltidyrc is processed

o Options after .perltidyrc is processed

o File exclusions

However, if running under Test::Harness ($ENV{HARNESS_ACTIVE} is set),
--verbose will be ignored, printing default messages.

=item --silent

All messages and warnings are silenced. However, if running under Test::Harness
($ENV{HARNESS_ACTIVE} is set), --silent will be ignored, printing default messages.

=item --profile profile_file

Override the provided .perltidyrc file. In general, don't do this when tidying
up for git commit.

=item --popt '--opt=value'

'opt' is a perltidy option and 'value' is its setting. These will override the
settings in .perltidyrc. In general, don't do this when tidying up for git
commit.

=item --findrc

Locate the .perltidyrc file being used and exit.

=item --help

Print this help text.

=cut
