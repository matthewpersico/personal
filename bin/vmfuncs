# -*- sh -*-

# vmfuncs

VMFUNCS_FILE=${BASH_SOURCE[0]}

vmfuncs_edit ()
{
    xo $VMFUNCS_FILE
}
export -f vmfuncs_edit
alias vmfuncs-edit=vmfuncs_edit

vmfuncs_reload ()
{
    . $VMFUNCS_FILE
}
export -f vmfuncs_reload
alias vmfuncs-reload=vmfuncs_reload
alias vmfuncs-load=vmfuncs_reload

VMFUNCS_TOOLKIT_FILE=~/.ssh/id_rsa.toolkit
VMFUNCS_TOOLKIT_EXPIRE_FILE=~/.ssh/id_rsa.toolkit.expires
VMFUNCS_BCPCVMS_FILE=~/personal/bin/.bcpcvms

_vm_toolkit_file_maint_usage ()
{
    echo "Usage: vm_toolkit_file_maint [-f|--force|-u|--update]"
}
export -f _vm_toolkit_file_maint_usage

vm_toolkit_file_maint ()
{
    local msg=''
    local expiretime=0
    local update=0
    local OPTSARGS=$(getopt -o fuh --long force,update,help -n 'vm_toolkit_file_maint' -- "$@")
    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -h|--help) _rsync2nfs_usage; return 0 ;;
            -f|-u|--force|--update) update=1; shift ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; git-st-strip-usage; return 1 ;;
        esac
    done

    if [ "$update" = '1' ]
    then
        msg="Toolkit credential update requested."
    elif [ ! -r $VMFUNCS_TOOLKIT_FILE ]
    then
        msg="Toolkit credential file $VMFUNCS_TOOLKIT_FILE not found. Generating..."
        update=1
    elif [ ! -r $VMFUNCS_TOOLKIT_EXPIRE_FILE ]
    then
        msg="Toolkit credential file $VMFUNCS_TOOLKIT_EXPIRE_FILE not found. Generating..."
        update=1
    else
        expiretime=$(cat $VMFUNCS_TOOLKIT_EXPIRE_FILE | grep -v '#')
        expiremsg=$(cat $VMFUNCS_TOOLKIT_EXPIRE_FILE | grep '#' | sed 's/#//g' | sed 's/ //g' )
        msg="Toolkit credential has expired ($expiremsg). Regenerating..."
        now=$(date +%s)
        if ((expiretime < now))
        then
            update=1
        fi
    fi

    if [ "$update" = '1' ]
    then
        echo $msg

        ## Backups
        if [ -r $VMFUNCS_TOOLKIT_FILE ]
        then
            cp -pvf ${VMFUNCS_TOOLKIT_FILE} ${VMFUNCS_TOOLKIT_FILE}.${now}
        fi
        if [ -r $VMFUNCS_TOOLKIT_EXPIRE_FILE ]
        then
            cp -pvf ${VMFUNCS_TOOLKIT_EXPIRE_FILE} ${VMFUNCS_TOOLKIT_EXPIRE_FILE}.${now}
        fi

        ## Create
        ~/personal/bin/toolkit-login $VMFUNCS_TOOLKIT_FILE $USER

        if [ "$(df . | grep / | sed 's|.*/||' | wc -w)" = '0' ]
        then
            ## I'm not on the NFS mount - export files to NFS
            echo "scp ${VMFUNCS_TOOLKIT_FILE}* nylxdev2.dev.bloomberg.com:.ssh ...:"
            scp ${VMFUNCS_TOOLKIT_FILE}* nylxdev2.dev.bloomberg.com:.ssh
        else
            echo "Make sure you copy ${VMFUNCS_TOOLKIT_FILE}* to your BCPC VMs"
        fi

    fi
}
export -f vm_toolkit_file_maint
alias vm-toolkit-file-maint='vm_toolkit_file_maint'

vmchoose ()
{
    local PS3='Pick a machine:'
    select vmname in ${!vmips[@]}
    do
        if [ -n "$vmname" ]
        then
            break
        fi
    done
    echo $vmname
}
export -f vmchoose

vmgo ()
{
    vm_toolkit_file_maint

    . $VMFUNCS_BCPCVMS_FILE
    vmname=${1:-undef}

    if [ "${vmips[$vmname]}" = '' ]
    then
        vmname=$(vmchoose)
    fi
    vmip=${vmips[$vmname]}
    ssh -i $VMFUNCS_TOOLKIT_FILE $vmip $@
}
export -f vmgo
alias govm='vmgo '

vmshow ()
{
    cat $VMFUNCS_BCPCVMS_FILE | grep -v 'declare -A vmips'
}
export -f vmshow
alias showvm='vmshow '

vmadd ()
{
    if [ $# != '2' ]
    then
        echo usage vmadd name ip
        return 1
    fi

    echo "vmips[$1]=$2" >> $VMFUNCS_BCPCVMS_FILE
    sort -u $VMFUNCS_BCPCVMS_FILE | grep -v 'declare -A vmips' > $VMFUNCS_BCPCVMS_FILE.$$

    echo 'declare -A vmips' >  $VMFUNCS_BCPCVMS_FILE
    cat $VMFUNCS_BCPCVMS_FILE.$$ >> $VMFUNCS_BCPCVMS_FILE
    rm -f $VMFUNCS_BCPCVMS_FILE.$$
    vmshow
}
export -f vmadd
alias addvm='vmadd '

vmdel ()
{
    . $VMFUNCS_BCPCVMS_FILE
    vmname=${1:-undef}

    if [ "${vmips[$vmname]}" = '' ]
    then
        vmname=$(vmchoose)
    fi
    cat $VMFUNCS_BCPCVMS_FILE | grep -v "vmips\[$vmname\]=${vmips[$vmname]}" > $VMFUNCS_BCPCVMS_FILE.$$
    mv $VMFUNCS_BCPCVMS_FILE.$$ $VMFUNCS_BCPCVMS_FILE
    vmshow
}
export -f vmdel
alias delvm='vmdel '
