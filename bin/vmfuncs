# -*- sh -*-

# vmfuncs

VMFUNCS_FILE=${BASH_SOURCE[0]}

vmfuncs_edit ()
{
    xo $VMFUNCS_FILE
}
alias vmfuncs-edit=vmfuncs_edit

vmfuncs_reload ()
{
    . $VMFUNCS_FILE
}
alias vmfuncs-reload=vmfuncs_reload
alias vmfuncs-load=vmfuncs_reload

VMFUNCS_TOOLKIT_FILE=~/.ssh/id_rsa.toolkit
VMFUNCS_TOOLKIT_EXPIRE_FILE=~/.ssh/id_rsa.toolkit.expires
VMFUNCS_BCPCVMS_FILE=~/personal/bin/.bcpcvms

vm_toolkit_file_maint ()
{
    local msg=''
    local expiretime=0
    if [ ! -r $VMFUNCS_TOOLKIT_FILE ]
    then
        msg="Toolkit credential file $VMFUNCS_TOOLKIT_FILE not found. Generating..."
    elif [ ! -r $VMFUNCS_TOOLKIT_EXPIRE_FILE ]
    then
        msg="Toolkit credential file $VMFUNCS_TOOLKIT_FILE not found. Generating..."
    else
        expiretime=$(cat $VMFUNCS_TOOLKIT_EXPIRE_FILE | grep -v '#')
        expiremsg=$(cat $VMFUNCS_TOOLKIT_EXPIRE_FILE | grep '#' | sed 's/#//g' | sed 's/ //g' )
        msg="Toolkit credential has expired ($expiremsg). Regenerating..."
    fi
    now=$(date +%s)
    if ((expiretime < now))
    then
        echo $msg
        ## Backups
        if [ -r $VMFUNCS_TOOLKIT_FILE ]
        then
            cp -pvf ${VMFUNCS_TOOLKIT_FILE} ${VMFUNCS_TOOLKIT_FILE}.${now}
        fi
        if [ -r $VMFUNCS_TOOLKIT_EXPIRE_FILE ]
        then
            cp -pvf ${VMFUNCS_TOOLKIT_EXPIRE_FILE} ${VMFUNCS_TOOLKIT_EXPIRE_FILE}.${now}
        fi
        ## Create
        ~/personal/bin/toolkit-login $VMFUNCS_TOOLKIT_FILE $USER
    fi
}

vmchoose ()
{
    local PS3='Pick a machine:'
    select vmname in ${!vmips[@]}
    do
        if [ -n "$vmname" ]
        then
            break
        fi
    done
    echo $vmname
}

vmgo ()
{
    vm_toolkit_file_maint

    . $VMFUNCS_BCPCVMS_FILE
    vmname=${1:-undef}

    if [ "${vmips[$vmname]}" = '' ]
    then
        vmname=$(vmchoose)
    fi
    vmip=${vmips[$vmname]}
    ssh -i $VMFUNCS_TOOLKIT_FILE $vmip $@
}
alias govm='vmgo '

vmshow ()
{
    cat $VMFUNCS_BCPCVMS_FILE | grep -v 'declare -A vmips'
}
alias showvm='vmshow '

vmadd ()
{
    if [ $# != '2' ]
    then
        echo usage vmadd name ip
        return 1
    fi

    echo "vmips[$1]=$2" >> $VMFUNCS_BCPCVMS_FILE
    sort -u $VMFUNCS_BCPCVMS_FILE | grep -v 'declare -A vmips' > $VMFUNCS_BCPCVMS_FILE.$$

    echo 'declare -A vmips' >  $VMFUNCS_BCPCVMS_FILE
    cat $VMFUNCS_BCPCVMS_FILE.$$ >> $VMFUNCS_BCPCVMS_FILE
    rm -f $VMFUNCS_BCPCVMS_FILE.$$
    vmshow
}
alias addvm='vmadd '

vmdel ()
{
    . $VMFUNCS_BCPCVMS_FILE
    vmname=${1:-undef}

    if [ "${vmips[$vmname]}" = '' ]
    then
        vmname=$(vmchoose)
    fi
    cat $VMFUNCS_BCPCVMS_FILE | grep -v "vmips\[$vmname\]=${vmips[$vmname]}" > $VMFUNCS_BCPCVMS_FILE.$$
    mv $VMFUNCS_BCPCVMS_FILE.$$ $VMFUNCS_BCPCVMS_FILE
    vmshow
}
alias delvm='vmdel '
