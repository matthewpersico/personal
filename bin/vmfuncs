# -*- sh -*-

# vmfuncs

VMFUNCS_FILE=${BASH_SOURCE[0]}

vmfuncs-edit ()
{
    xo $VMFUNCS_FILE
}

vmfuncs-reload ()
{
    . $VMFUNCS_FILE
}
alias vmfuncs-load=vmfuncs-reload

vmfuncs-help () {
    help_strings $VMFUNCS_FILE "$@"
}

VMFUNCS_TOOLKIT_FILE=~/.ssh/id_rsa.toolkit
VMFUNCS_TOOLKIT_EXPIRE_FILE=~/.ssh/id_rsa.toolkit.expires
VMFUNCS_BCPCVMS_FILE=~/personal/bin/.bcpcvms

vmchoose ()
{
    ##@@ none||none||vmchoose||pick a VM to connect to
    local PS3='Pick a machine:'
    select vmname in ${!vmips[@]}
    do
        if [ -n "$vmname" ]
        then
            break
        fi
    done
    echo $vmname
}

vmgo ()
{
    ##@@ none||none||vmgo||connect to VM
    vm_toolkit_file_maint

    . $VMFUNCS_BCPCVMS_FILE
    vmname=${1:-undef}

    if [ "${vmips[$vmname]}" = '' ]
    then
        vmname=$(vmchoose)
    fi
    vmip=${vmips[$vmname]}
    ssh -i $VMFUNCS_TOOLKIT_FILE $vmip $@
}
alias govm='vmgo '

vmshow ()
{
    ##@@ none||none||vmshow||show the list of VMs
    cat $VMFUNCS_BCPCVMS_FILE | grep -v 'declare -A vmips'
}
alias showvm='vmshow '

vmadd ()
{
    ##@@ none||none||vmadd||add a VM to the list
    if [ $# != '2' ]
    then
        echo usage vmadd name ip
        return 1
    fi

    echo "vmips[$1]=$2" >> $VMFUNCS_BCPCVMS_FILE
    sort -u $VMFUNCS_BCPCVMS_FILE | grep -v 'declare -A vmips' > $VMFUNCS_BCPCVMS_FILE.$$

    echo 'declare -A vmips' >  $VMFUNCS_BCPCVMS_FILE
    cat $VMFUNCS_BCPCVMS_FILE.$$ >> $VMFUNCS_BCPCVMS_FILE
    rm -f $VMFUNCS_BCPCVMS_FILE.$$
    vmshow
}
alias addvm='vmadd '

vmdel ()
{
    ##@@ none||none||vmdel||remove a VM from the list
    . $VMFUNCS_BCPCVMS_FILE
    vmname=${1:-undef}

    if [ "${vmips[$vmname]}" = '' ]
    then
        vmname=$(vmchoose)
    fi
    cat $VMFUNCS_BCPCVMS_FILE | grep -v "vmips\[$vmname\]=${vmips[$vmname]}" > $VMFUNCS_BCPCVMS_FILE.$$
    mv $VMFUNCS_BCPCVMS_FILE.$$ $VMFUNCS_BCPCVMS_FILE
    vmshow
}
alias delvm='vmdel '

cptonfs ()
{
    ##@@ none||none||cptonfs||copy a file to the vmbounce directory of the NFS filesystem
    set-nfsmachine; status=$?; [ ! "$status" = 0 ] && return $status
    scp "$@" $NFSMACHINE:vmbounce
}
alias cp-to-nfs='cptonfs '
alias scp-to-nfs='cptonfs '

cpfromnfs ()
{
    ##@@ none||none||cpfromfs||copy a file from the vmbounce directory of the NFS filesystem to the local ~/vmbounce directory
    mkdir -p ~/vmbounce
    set-nfsmachine; status=$?; [ ! "$status" = 0 ] && return $status
    scp $NFSMACHINE:vmbounce/* ~/vmbounce
}
alias cp-from-nfs='cpfromnfs '
alias scp-from-nfs='cpfromnfs '

bldo-check ()
{
    ##@@ none||none||bldo-check||ssh all the BDLO machines to refresh the RSA keys
    local bldos=$(cat /bb/csdata/bldfarm/pools/*BLDO* 2>/dev/null)
    if [ -z "$bldos" ]
    then
        echo No BLDO files found
    else
        local hcount=$(echo $bldos | wc -w)
        local hindex=0
        for h in $bldos
        do
            ((hindex+=1))
            echo "*** $h ($hindex/$hcount) ***"
            ssh $h "echo 'Connected!'"
        done
    fi
}

bldo-go ()
{
    set -x
    local arch='.*'
    OPTSARGS=$(getoptp  --long arch: -n 'bldo-go' -- "$@")
    local status=$?
    ((status != 0)) && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            --arch)
                case $2 in
                    i|ibm|aix)
                        arch=ibldo;;
                    l|lnx|linux|amd64)
                        arch=lnxbldo;;
                    s|sun|sol|solaris)
                        arch=sbldo;;
                    *)
                        echo "$2 is not a valid arch"
                        return 1
                        ;;
                esac
                shift;shift;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; $usage_func; return 1 ;;
        esac
    done

    machine=$( cat /bb/csdata/bldfarm/pools/*BLDO* \
                      | grep -E "$arch" \
                      | head -$(($RANDOM%$(cat /bb/csdata/bldfarm/pools/*BLDO* \
                                                  | grep -E "$arch" \
                                                  | wc -l))) | tail -1)

    ssh $machine;
    set +x
}

vmrebuild ()
{
    local opt_berks=0
    local opt_build=0
    local opt_post=0
    OPTSARGS=$(getoptp -o s --long berks,build,post,ip:,keypair: -n 'vmbuild' -- "$@")
    local status=$?
    ((status != 0)) && $usage_func && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            --berks) opt_berks=1; shift ;;
            --build) opt_build=1; shift ;;
            --post) opt_post=1; shift ;;
            --ip) opt_ip=$2; shift; shift;;
            --keypair) opt_keypair=$2; shift; shift;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; $usage_func; return 1 ;;
        esac
    done

    local strikes

    ((!opt_berks)) && ((!opt_build)) && ((!opt_post)) && echo "ERROR: Need one of --berks, --build, --post options" && return 1

    if [ ! -r /home/${USER}/.ssh/id_rsa.toolkit ]
    then
        echo "ERROR: No id_rsa.toolkit file found"
        ((strikes+=1))
    fi

    if ((opt_berks))
    then
        set-nfsmachine; status=$?; [ ! "$status" = 0 ] && return $status

        if [ -z "$(which berks)" ]
        then
            echo "ERROR: No berks available here"
            ((strikes+=1))

            echo "Checking NFS:"
            ssh ${NFSMACHINE} ls -lad /home/${USER}/public_html
            (($?)) && echo "ERROR: NFS check" && ((strikes+=1))
        fi
    fi

    if ((opt_build))
    then
        [ -z "$opt_ip" ] && echo "ERROR: Missing --ip. Need floating IP from https://openstack.dob1.bcpc.bloomberg.com/horizon/project/access_and_security/ in the IP Address column of the Floating IPs tab. " \
            && ((strikes+=1))
        [ -z "$opt_keypair" ] && echo "ERROR: Missing --keypair. Need keypair from https://openstack.dob1.bcpc.bloomberg.com/horizon/project/access_and_security/" \
            && ((strikes+=1))

        if [ ! -r ~/.ssh/openstack_dob1_dpkgdev.yml ]
        then
            echo "ERROR: openstack_dob1_dpkgdev.yml missing"
            ((strikes+=1))
        else
            cat ~/.ssh/openstack_dob1_dpkgdev.yml
            echo "Is the password current?"
        fi
    fi

    ((strikes)) && echo "FATAL: $strikes strikes, yer out!" && return $strikes

    if ((opt_berks))
    then
        gitgo ${USER}-dev-cookbook
        (($?)) && return 1

        dirty=$(git status --porcelain)
        if (($?)) || [ -n "$dirty" ]
        then
            echo "ERROR: git repo not clean"
            return 1
        fi

        export BERKS_BBGITHUB_USE_SSH=1
        berks install && (($?)) && return 1
        berks update && (($?)) && return 1
        berks package ${USER}-dev.tar.gz && (($?)) && return 1
        scp ${USER}-dev.tar.gz ${NFSMACHINE}:public_html/ && (($?)) && return 1
    elif ((opt_build))
    then
        gitgo bcpc-sous-chef
        if [ $? = '0' ]
        then
            git pull
        else
            cd ~/gits/bbgithub && (($?)) && return 1
            bbgithub-clone druoso bcpc-sous-chef
        fi

        cookbook=${USER}-dev
        image=''

        echo "Fire up https://openstack.dob1.bcpc.bloomberg.com/horizon/project/instances/"
        echo "and refresh until an instance named ${USER}-dev appears."
        echo "Once it does, select it, go to the Log tab and select View Full Log."
        echo "Refresh the page until the last line looks like:"
        echo "cloud-init[3694]: Cloud-init v. 0.7.6 finished at Tue, 20 Oct 2015 16:07:58 +0000. Datasource DataSourceOpenStack [net,ver=2].  Up 201.62 seconds"

        ./bcpc-sous-chef \
            "$image" \
            --cluster dob1 \
            --credentials ~/.ssh/openstack_dob1_dpkgdev.yml \
            --flavor m1.medium \
            --instance $cookbook \
            --keypair $opt_keypair \
            --recipe-url http://devhtml.dev.bloomberg.com/~$USER/${cookbook}.tar.gz \
            --floating-ip $opt_ip \
            --runlist "${cookbook}::bcpc" --volume "${USER}-home"
    elif ((opt_post ))
    then
        for f in /tmp/mpersico5-dev-cookbook-init
        do
            echo "** $f **"
            $f
        done
    fi
}
