#!/usr/bin/env bash

# git-to-stdout

declare moreopts
moreopts=1
declare file
file=0

while [[ "$1" =~ ^- ]] && ((moreopts))
do
    declare original
    original="$1"
    declare option
    option=$(dashstripper "$original")
    shift
    case $option in
        ## standard options
        h | help )
            script-usage
            exit 0
            ;;
        f | file)
            file=1;;
        --)
            moreopts=0
            ;;
        * )
            cmd-echo -- "$original is an invalid option. See $0 --help";
            exit 1
            ;;
    esac
done

if (($# < 2 ))
then
    script-usage
    exit 1
fi

declare uuid
uuid=$1;shift
for i in "$@"
do
    if ((file))
    then
        echo "${i}.${uuid}"
        git show "${uuid}:${i}" > "$(git root)/${i}.${uuid}"
    else
        git show "${uuid}:${i}"
    fi
done

## The End, to make sure we never eval the usage statement
exit 0

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/. If you want just plain text, get rid of pod tags and the
## 'POD' in __PODUSAGE__.

:<<'__PODUSAGE__'
=head1 NAME

git-to-stdout - print a file to stdout.

=head1 SYNOPSIS

 git-to-stdout [--file] uuid objectname [objectname...]

=head1 DESCRIPTION

Used primarily to get an older version. Like 'cvs -p'. Probably shouuld fold into 'cvs-checkout'.

=head1 ARGUMENTS

=over 4

=item uuid

The sha of the version of the file we want to print.

=item objectname

The file we want to get. Must be fully quailifed from the repo root, not current directory.

=back

=head1 OPTIONS

=over 4

=item --file

Instead of printing to stdout, print to a file named 'objectname.uuid'.

=back

=cut

__PODUSAGE__
