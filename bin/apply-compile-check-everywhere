#!/usr/bin/env perl

use 5.16.3;

## The first two lines help us locate ApplyEverwhereUtils on the third line.
use FindBin qw($RealBin);
use lib "$RealBin/../lib";
#<<< perltidy
use ApplyEverywhereUtils qw(git_find_perl_code
                            code_has_taint_flag);
#>>> perltidy
use IO::File;
use Test::More;

use Getopt::Long;
my $help        = 0;
my $mod_only    = 0;
my $nonmod_only = 0;
my $all         = 0;
my $ignored     = 0;
my @libs;

my %excludes_defaults;
our %excludes;

## Option processing
GetOptions(
    help                 => \$help,
    'mod-only|mod'       => \$mod_only,
    'nonmod-only|nonmod' => \$nonmod_only,
    'all'                => \$all,
    ## Might get set if we are doing perltidy along with a compile check. We
    ## just ignore it here.
    'update'   => \$ignored,
    'libs|I=s' => sub {
        push @libs, '-I', $_[1];
    }
) or die "Bad argument, see --help for documentation.\n";

exec '/opt/bb/bin/perldoc', $0 if ($help);

die "Cannot set --all and --mod-only"
  if $all and $mod_only;

die "Cannot set --all and --mod-only"
  if $all and $mod_only;
die "Cannot set --all and --nonmod-only"
  if $all and $nonmod_only;

## Files to process
my @files = git_find_perl_code(
    files       => ( $all || $mod_only || $nonmod_only ? [] : \@ARGV ),
    mod_only    => $mod_only,
    nonmod_only => $nonmod_only,
);
die
"No files given as arguments and no files found to match mod($mod_only), nonmod($nonmod_only) or all($all) options"
  if !@files;

my $errors        = 0;
my $excludes_file = "$ENV{PWD}/.perlcompile.exclude";
if ( -e $excludes_file ) {
    my $ih = IO::File->new( $excludes_file, 'r' );
    my $ex = join( '', <$ih> );
    eval $ex
      or die $@;
}
for my $k ( keys %excludes_defaults ) {
    $excludes{$k} = [] if not defined $excludes{$k};
    push @{ $excludes{$k} }, @{ $excludes_defaults{$k} };
}

SOURCES: for my $file (@files) {
    ## Exclusion pre-preprocessing
    my @excludes;

    for my $exclude_type ( keys(%excludes) ) {
        if ( $exclude_type eq 'grep' ) {
            my @output;
            for my $excl_pat ( @{ $excludes{'grep'} } ) {
                my $ih = IO::File->new( $file, 'r' );
                push @output, grep { m/$excl_pat/ } <$ih>;
            }
            push @excludes, "By contents:\n", @output if (@output);
        } elsif ( $exclude_type eq 'name' ) {
            my @output;
            for my $excl_name ( @{ $excludes{'name'} } ) {
                push @output, $file if $file eq $excl_name;
            }
            push @excludes, "By name:\n", join( qq(\n), @output, '' )
              if (@output);
        } else {
            die "exclude type $exclude_type has no processing steps.";
        }
    }

    if (@excludes) {
        warn
"$file is excluded from compile checking for the following reasons:\n",
          @excludes;
        next SOURCES;
    }

    my $taint  = ( code_has_taint_flag($file) ? '-T' : '' );
    my $cmd    = qq($^X $taint @libs -c $file 2>&1);
    my @out    = qx($cmd);
    my $status = $?;
    my @fails;

    ## The scalar(@out) check catches warnings that would otherwise pass. The
    ## most common example of this is 'used only once' warnings, which can be
    ## suppressed with a "no warnings 'once'" statement.
    if ( $status != 0 or scalar(@out) != 1 ) {

        fail("compile check (perl -c) of $file");

        if (@out) {
            chomp( $out[-1] );    ## Fix the formatting to match the rest of Test::More
        } else {
            push @out, "No output. Exit status was $status.";
        }

        ## Some modules print text after the status OK. These can be
        ## ignored. If there is anything printed BEFORE 'status OK', or if
        ## 'status OK' is not printed at all, then we need to show the output.
        my $errors_before_ok = ( $out[0] !~ m/syntax OK/ );

        $errors += (
            $status ? 1
            : (
                $errors_before_ok ? 1
                : 0
            )
        );

        if ($errors_before_ok) {
            $out[-1] .= "\n";
            diag( "         got: ", @out );
        }
    }
}

exit( $errors ? 1 : 0 );

__END__

=head1 NAME

  apply-compile-check-everywhere - runs perl -c on files for validation

=head1 SYNOPSIS

  apply-compile-check-everywhere [ --[non]mod-only | @files ]

  apply-compile-check-everywhere --help

=head1 DESCRIPTION

Runs 'perl -c' on its arguments, assumed to be Perl files. If no files are
provided and the current directory is a git repo, 'git ls-files' is run to find
Perl files with extentions matching the regexp 'm/\.(p[ml]|t)$/i' or that
contain a perl shebang on the first line.

By default, all Perl files are test compiled. If you need to exclude one or
more files from being compile checked (because the test environment is not
sufficient to compile them), simply create a '.perlcompile.exclude' file in the
root of the repo with the following format:

  $excludes{grep} = [ a list of regular expressions found in the files to exclude ];
  $excludes{name} = [ a list of paths to the files to exclude unconditionally,
                     relative to the repo root ];

.perlcompile.exclude is simply Perl code that is processed by reading in the
text and eval'ing it. Syntax errors will be caught.

=head1 OPTIONS

=over

=item --mod-only

Only check those files that are tracked and modified, as determined by

 git status --porcelain | grep -v '?' | sed 's/.* //'

Any file arguments are ignored.

=item --nonmod-only

Only check those files that are NOT tracked and modified, as determined by the
inverse of

 git status --porcelain | grep -v '?' | sed 's/.* //'

Any file arguments are ignored.

=item --all

Check all tracked files, modified or not, as determined by

 git ls-files

Any file arguments are ignored. This is the same as invoking the command with
no file arguments.

=item --lib| -I

One or more module library locations to pass to the B<perl -c> invocation.

=item --help

Print this help text.

=cut
