#!/usr/bin/env bash

# git-push

# shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"

if ! git-version-verify 'git-push'
then
    exit 1
fi

# shellcheck disable=SC2034 # We'll use it eventually
cmd_echo_id='git-push'

usage ()
{
    (
        [ -n "$*" ] && cmd-echo -- "$@"
        echo "** Extended actions **"
        bash-usage "$0"
        echo
        echo "** Standard actions **"
        "$REALGIT" push --help
    ) 2>&1 | ${PAGER:-less}
}

declare dispatch_to_real_git=1
declare opt_popup=0
declare opt_pr=0

declare -a pass_on

## DO NOT attempt to convert this to a 'getopt' implementation; it would
## require specifying and handling every existing option in 'git push',
## and it is just not necessary.
while (( $# ))
do
    declare arg=$1
    shift
    case "$arg" in
        ##
        ## Our options
        ##
        --popup )
            opt_popup=1
            ;;
        --pr )
            opt_pr=1
            ;;
        --help | -h )
            usage ''
            exit 0
            ;;
        * )
            pass_on+=("$arg")
            ;;
    esac
done

if ((dispatch_to_real_git))
then
    ## Currently, we ALWAYS run the real git push first.
    "$REALGIT" push "${pass_on[@]}" || exit $?
fi

## Then we tack on our actions if requested.
if ((opt_popup || opt_pr))
then
    declare remote
    remote=$(git-get-default-remote)
    declare svc
    svc=${remote%:*}
    declare repo
    repo=${remote#*:}

    declare statusdata
    statusdata=$(mktemp -t tmp.git-web.statusdata.$$.XXXXXXXXXX)
    rm-on-exit "$statusdata"
    git status --porcelain -b -uno > "$statusdata"
    declare linecount
    linecount=$(wc -l < "$statusdata")
    declare outofdate
    outofdate=$(grep '##' "$statusdata" | grep '\[')
    if ((linecount > 1)) || [ -n "$outofdate" ]
    then
        cmd-echo -wc -- "Current status not clean:"
        git status
    fi

    declare url
    if ((opt_pr))
    then
        if ! url=$(git-find-local-pr)
        then
            cmd-echo -- "No existing PR found, popping up create URL..."
            ## no PR found, use new pr url
            declare cb
            cb="$(git branch --show-current)"

            url="$(kvstore get gitfuncs_git_browser_urls "$svc")/$repo/pull/new/$cb"
            if [ "$cb" = 'master' ]
            then
                cmd-echo -wc -- "Using the 'master' branch on a clone won't work; you've already pushed to master."
            fi
        else
            cmd-echo -- "Existing PR found, popping it up..."
        fi
    else
        url="$(kvstore get gitfuncs_git_browser_urls "$svc")/$repo"
    fi

    git web--browse "$url" &
fi

exit 0

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/. If you want just plain text, get rid of pod tags and the
## 'POD' in __PODUSAGE__.

:<<'__PODUSAGE__'
=head1 NAME

git-push - extension to git push

=head1 SYNOPSIS

 git-push [STANDARD OPTS] --popup|--pr ...

=head1 DESCRIPTION

Calls the real 'git push' and then processes our options, if specified.

=head1 OPTIONS

=over 4

=item popup

Start a browser (via git web--browser) pointing to the URL of the origin for the current repo.

=item pr

Start a browser (via git web--browser) pointing to the URL to create a new pull request using the current repo as the source if there is no existing PR. If there is an existing PR, its URL is used.

=back

__PODUSAGE__
