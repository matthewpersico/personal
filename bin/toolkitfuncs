# -*- sh -*-

# toolkitfuncs

TOOLKITFUNCS_FILE=${BASH_SOURCE[0]}

toolkitfuncs_edit ()
{
    xo $TOOLKITFUNCS_FILE
}
#nxport -f toolkitfuncs_edit
alias toolkitfuncs-edit=toolkitfuncs_edit

toolkitfuncs_reload ()
{
    . $TOOLKITFUNCS_FILE
}
#nxport -f toolkitfuncs_reload
alias toolkitfuncs-reload=toolkitfuncs_reload
alias toolkitfuncs-load=toolkitfuncs_reload

TOOLKITFUNCS_TOOLKIT_FILE=~/.ssh/id_rsa.toolkit
TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE=~/.ssh/id_rsa.toolkit.expires
TOOLKITFUNCS_BCPCVMS_FILE=~/personal/bin/.bcpcvms
typeset -a TOOLKIT_TARGETS=(nylxdev1.dev.bloomberg.com ip-1-70-18-131.dob1.bcpc.bloomberg.com)
_toolkit-file-maint-usage ()
{
    echo "Usage: toolkit-file-maint [-f|--force|-u|--update]"
}
#nxport -f _toolkit-file-maint-usage

toolkit_expires_in ()
{
    local grace=0
    [ -n "$1" ] && grace=$1
    now=$(date '+%s')
    exp=$(date --date="$(grep '##' $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE | sed 's/## //')" +%s)
    echo $((exp - now))
    if ((exp - now <= grace ))
    then
        return 1
    else
        return 0
    fi
}
alias toolkit-expires-in='toolkit_expires_in '

toolkit-is-expired ()
{
    toolkit-expires-in 0
    return $?
}

toolkit-file-check ()
{
    ls -alrt ${TOOLKITFUNCS_TOOLKIT_FILE}*
    echo "       Now : $(date '+%Y-%m-%d %H:%M:%S')"
    echo "Expiration :$(grep '##' $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE | sed 's/##//')"
}
alias toolkit-expire-check='toolkit-file-check '

toolkit-file-maint ()
{
    local msg=''
    local expiretime=0
    local update=0
    local OPTSARGS=$(getoptp -o fuh --long force,update,help -n 'toolkit-file-maint' -- "$@")
    status=$?
    ((status != 0)) && _toolkit-file-maint-usage && return 1
    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -h|--help) _toolkit-file-maint-usage; return 0 ;;
            -f|-u|--force|--update) update=1; shift ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; _toolkit-file-maint-usage; return 1 ;;
        esac
    done

    if [ "$update" = '1' ]
    then
        msg="Toolkit credential update requested."
    elif [ ! -r $TOOLKITFUNCS_TOOLKIT_FILE ]
    then
        msg="Toolkit credential file $TOOLKITFUNCS_TOOLKIT_FILE not found. Generating..."
        update=1
    elif [ ! -r $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE ]
    then
        msg="Toolkit credential file $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE not found. Generating..."
        update=1
    else
        expiretime=$(cat $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE | grep -v '#')
        expiremsg=$(cat $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE | grep '#' | sed 's/#//g' | sed 's/ //g' )
        msg="Toolkit credential has expired ($expiremsg). Regenerating..."
        now=$(date +%s)
        if ((expiretime < now))
        then
            update=1
        fi
    fi

    if [ "$update" = '1' ]
    then
        echo $msg

        ## Backups
        if [ -r $TOOLKITFUNCS_TOOLKIT_FILE ]
        then
            cp -pvf ${TOOLKITFUNCS_TOOLKIT_FILE} ${TOOLKITFUNCS_TOOLKIT_FILE}.${now}
        fi
        if [ -r $TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE ]
        then
            cp -pvf ${TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE} ${TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE}.${now}
        fi

        ## Purge backups
        echo 'Current files are'
        ls -la ${TOOLKITFUNCS_TOOLKIT_FILE} ${TOOLKITFUNCS_TOOLKIT_FILE}.${now} \
           ${TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE} ${TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE}.${now}

        echo 'Will purge'
        ls -la ${TOOLKITFUNCS_TOOLKIT_FILE}.[0-9]* ${TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE}.* | grep -v "${now}"
        local purgem=$(ls ${TOOLKITFUNCS_TOOLKIT_FILE}.[0-9]* ${TOOLKITFUNCS_TOOLKIT_EXPIRE_FILE}.* | grep -v "${now}")

        ## Create
        ~/personal/bin/toolkit-login $TOOLKITFUNCS_TOOLKIT_FILE $USER
        local status=$?
        echo "Status is $status"

        if [ ! "$status" = '0' ]
        then
            echo Aborting...
            return 1
        fi

        echo "Running sudo python /usr/local/bin/vendordata_users.py"
        sudo python /usr/local/bin/vendordata_users.py
        status=$?
        echo "Status is $status"

        if [ ! "$status" = '0' ]
        then
            echo Aborting...
            return 1
        fi

        echo "Purging $purgem..."
        rm -f $purgem

        ## Spread around
        local h
        local lh=$(hostname)
        for h in ${TOOLKIT_TARGETS[*]}
        do
            if [[ ! "$h" =~ $(hostname) ]]
            then
                echo "Copying to $h..."
                scp ${TOOLKITFUNCS_TOOLKIT_FILE}* ${h}:.ssh
            fi
        done
        for h in ${TOOLKIT_TARGETS[*]}
        do
            if [[ ! "$h" =~ $(hostname) ]]
            then
                echo "Purging from $h..."
                ssh ${h} rm $purgem
            fi
        done
    fi

    toolkit-file-check

    if [ ! "$update" = '1' ]
    then
        echo "'--force' to update now"
    fi
}
alias vm-toolkit-file-maint='toolkit-file-maint '
alias toolkit-maint='toolkit-file-maint '
