#!/usr/bin/env bash

# git-process-source-ctrl-log

# shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"

declare action='read'
declare opt_v='' ## passed to commit
declare status=0
declare parsed_cl
parsed_cl=$(mktemp -t tmp.git-process-source-ctrl-log.XXXXXXXXXX)
declare -a pscl_flags
declare git_editor
declare opt_confirm=0
declare moreopts
moreopts=1
while [[ "$1" =~ ^- ]] && ((moreopts))
do
    declare original="$1"
    shift
    declare option
    option=$(dashstripper "$original")
    ## This bit deals with --foo=bar instead of --foo bar
    declare okey=''
    declare ovalue=''
    if [[ "$option" =~ = ]]
    then
        okey=${option%%=*}
        ovalue=${option#*=}
        option="$okey"
    fi

    case $option in
        ## standard options
        h | help )
            script-usage
            ## (return if a func, exit if a script) 0
            ;;
        debug | x ) set -x; trap 'set +x' EXIT;;
        verbose | v )
            opt_v='-v'
            ;;
        commit)
            action=commit;
            pscl_flags+=(--write --newscl "$parsed_cl")
            ;;
        withstatus)
            action=withstatus;
            pscl_flags+=(--withstatus)
            ;;
        diff)
            pscl_flags+=(--diff)
            ;;
        cached)
            pscl_flags+=(--cached)
            ;;
        nosclonly)
            pscl_flags+=(--nosclonly)
            ;;
        filesonly)
            pscl_flags+=(--filesonly)
            ;;
        skip-no-source-ctrl-log)
            pscl_flags+=(--skipmissing)
            ;;
        confirm)
            opt_confirm=1
            ;;
        editor)
            git_editor=$2
            shift;;
        color)
            color=${ovalue:-$1}
            ## If $ovalue is blank, we took arg from the next command line arg;
            ## need to shift it off.
            [ -z "$ovalue" ] && shift
            pscl_flags+=(--color "$color")
            ;;
        --)
            moreopts=0
            ;;
        * )
            cmd-echo -- "$original is an invalid option. See $0 --help";
            ## (return if a func, exit if a script) 1
            ;;
    esac
done

## Everything else is a file
if [ -z "$1" ]
then
    cmd-echo "No files specified."
    exit 1
fi

declare -a filelist
declare file
for file in "$@"
do
    declare absolute_file
    absolute_file="$(realpath "${PWD}")/$file"
    if [ -r "$absolute_file" ]
    then
        filelist+=("$absolute_file")
    else
        ## $file is either a git rm'ed file, a git renamed file or a typo.
        if [ "$(git what is deleted | grep -E "^$file$")" = "$file" ] ||
               [ "$(git what is modified | grep -E "^$file$")" = "$file" ]
        then
            ## Then the file is indeed git rm'ed.
            filelist+=("$absolute_file")
        else
            cmd-echo "File $file not found. Aborting"
            exit 1
        fi
    fi
done

## Find the source-ctrl-log
declare source_ctrl_logdir
source_ctrl_logdir=$(git root)
if ((status != 0))
then
    script-usage
    exit $status
fi

declare source_ctrl_log="${source_ctrl_logdir}/$GITFUNCS_SOURCE_CTRL_LOG_NAME"
if [ ! -r "$source_ctrl_log" ]
then
    cmd-echo -- "$source_ctrl_log not readable"
    exit 1
fi
if [ "$action" = 'commit' ] && [ ! -w "$source_ctrl_log" ]
then
    cmd-echo -- "$source_ctrl_log not writable"
    exit 1
fi

declare source_ctrl_logbkp="${source_ctrl_log}.bkp"

declare others
others=$(find "$source_ctrl_logdir" -name "$GITFUNCS_SOURCE_CTRL_LOG_NAME" | grep -v "$source_ctrl_log")
if [ -n "$others" ]
then
    cmd-echo "Found $others. No other $GITFUNCS_SOURCE_CTRL_LOG_NAME allowed under $source_ctrl_logdir."
    exit 1
fi

## Backup
cp -f "$source_ctrl_log" "$source_ctrl_logbkp"

## Do it
$DEBUG_PARSE_SOURCE_CTRL_LOG parse-source-ctrl-log --scl "$source_ctrl_log" "${pscl_flags[@]}" "${filelist[@]}"
status=$?
if ((status!=0))
then
    ## Restore
    cmd-echo "Rolling back $source_ctrl_log"
    cp -f "$source_ctrl_logbkp" "$source_ctrl_log"
    exit $status
fi

echo "in git-process-source-ctrl-log......"
if [ "$action" = 'commit' ]
then
    #for specific_pcl_file in "$parsed_cl"*
    #do
    specific_pcl_file="$parsed_cl"
    ## We rebuild the filelist from the commit message files so that we can
    ## account for having skipped files because they do not have a
    ## source_ctrl_log entry.
    declare -a filelist_refreshed
    mapfile -t filelist_refreshed < <(perl -ne 'next if $_ =~ m/^(SUMMARY LINE HERE|o | |[a-zA-Z0-9_-]+\(\):|\n)/;print $_' "$specific_pcl_file")
    cmd-echo "About to commit" "${filelist_refreshed[@]}"
    declare resp='y'
    if ((opt_confirm))
    then
        resp=''
        resp=$(cmd-yesno 'Ok' n)
    fi
    if [ "$resp" = 'y' ]
    then
        declare git_status_before
        git_status_before=$(mktemp -t tmp.git-process-source-ctrl-log.XXXXXXXXXX)
        rm_on_exit "$git_status_before"
        $REALGIT status --porcelain > "$git_status_before" 2>&1
        if [ -z "$git_editor" ]
        then
            git commit -F "$specific_pcl_file" --edit $opt_v "${filelist_refreshed[@]}"
        else
            GIT_EDITOR=$git_editor git commit -F "$specific_pcl_file" --edit $opt_v "${filelist_refreshed[@]}"
        fi
        status=$?
        if ((status==0))
        then
            ## PROBLEM - it appears that if a git commit is aborted due to a
            ## hook failure, we don't get an error return, which means we don't
            ## rollback the $source_ctrl_log. Sooooo, we defensively try to
            ## ferret out that problem by looking at git status before and
            ## after the commit - if they are the same, it probably failed the
            ## hook.
            declare git_status_after
            git_status_after=$(mktemp -t tmp.git-process-source-ctrl-log.XXXXXXXXXX)
            rm_on_exit "$git_status_after"
            $REALGIT status --porcelain > "$git_status_after" 2>&1
            diff -q "$git_status_before" "$git_status_after" 1>/dev/null
            diffstatus=$?
            if ((diffstatus==0))
            then
                cmd-echo "git commit exited successfully, but since there appears to have been" \
                         "no change in git status, we are assuming the pre-commit hook failed." \
                         "This can also happen if you change one or more files being committed" \
                         "while you have the editor open, so DON'T DO THAT. As a precaution," \
                         "we will roll back '$source_ctrl_log'."
                status=1
            fi
        fi

        if((status!=0))
        then
            ## Restore
            cmd-echo "Rolling back $source_ctrl_log"
            cp -f "$source_ctrl_logbkp" "$source_ctrl_log"
            exit $status
        fi
    else
        cmd-echo "Commit aborted"
    fi
    ##done
fi
[ -f "$source_ctrl_logbkp" ] && \rm -f "$source_ctrl_logbkp"
## If we are here, we can safely get rid of parsed cl files.
\rm -f "$parsed_cl"*
exit 0

:<< __EOUSAGE__
__USAGE__
NAME
    git-process-source_ctrl_log

SYNOPSYS

DESCRIPTION
    TBD
__EOUSAGE__
