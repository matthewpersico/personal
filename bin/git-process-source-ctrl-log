# -*- sh -*-
# shellcheck shell=bash

# git-process-source-ctrl-log

use mktemp
use on_exit

cleanup ()
{
    rm -f "$parsed_cl_root"*
    if (($1 == 0)); then
        ## We're good, ok to delete the backup
        rm -f "$source_ctrl_logbkp"
    fi
}

rollback ()
{
    cmd-echo --id git-process-source-ctrl-log --wc -- "Rolling back $source_ctrl_log"
    if ! cp -f "$source_ctrl_logbkp" "$source_ctrl_log"; then
        local tmp="${parsed_cl_root}*"
        local -a intermed
        # shellcheck disable=SC2012 #https://github.com/koalaman/shellcheck/wiki/SC2012
        readarray intermed < <(ls -c1 "$tmp" | sort)
        cmd-echo --id git-process-source-ctrl-log --ec -- "Rollback of '$source_ctrl_log' failed." \
                 "Backup is in '$source_ctrl_logbkp'." \
                 "Intermediate files are:" \
                 "${intermed[@]}"
    else
        cleanup 1
    fi
}

rollforward ()
{
    if ! cp -f "$parsed_cl_retain" "$source_ctrl_log"; then
        cmd-echo --id git-process-source-ctrl-log --ec -- "Rollforward of $parsed_cl_retain to $source_ctrl_log failed." \
                 "Keeping both files as is, so that you can attend to the issue."
        false; return
    else
        cleanup 0
    fi
}

declare action='read'
declare opt_v='' ## passed to commit
declare parsed_cl_root
declare parsed_cl_commit
declare parsed_cl_retain
declare source_ctrl_logbkp
declare -a pscl_flags
declare git_editor
declare opt_confirm=0
declare debug

# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='hx'
declare longopts='debug,verbose,commit,diff::,cached,sclonly,sclpick:,sclmatch:'
longopts="$longopts,nosclonly,gcsonly,nogcsonly,filesonly,skip-no-source-ctrl-log,edit"
longopts="$longopts,confirm,editor:,color:,nountracked,inter,interactive"

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        h | help )
            git-usage "$0"
            true; exit
            ;;
        x )
            set -x; trap 'set +x' EXIT
            ;;
        debug )
            debug='-d:ptkdb' ## no-ptkdb-issue
            ;;
        verbose | v )
            opt_v='-v'
            ;;
        commit)
            action=commit;
            parsed_cl_root=$(mktempfile -u)
            parsed_cl_commit="${parsed_cl_root}.commit"
            parsed_cl_retain="${parsed_cl_root}.retain"
            pscl_flags+=(--for-commit "$parsed_cl_root")
            ;;
        diff)
            ## Arguments to --diff must come in to the script in "cuddled ="
            ## form because that's how 'getopt' works for options with optional
            ## args.  Otherwise, how could it tell if
            ##
            ## --diff --w
            ##
            ## is --diff=-w or -w is a separate arg?. Since we have cuddled
            ## form already, We pass "cuddled =" form on to help the
            ## process-source-ctrl-log arg parser. Note that $1 will be '', not
            ## unassigned, if no args are passed, so it must be shifted off
            ## always.
            [[ -z "$1" ]] && pscl_flags+=(--diff) || pscl_flags+=("--diff=$1")
            shift
            ;;
        cached)
            pscl_flags+=(--cached)
            ;;
        sclonly)
            pscl_flags+=(--sclonly)
            ;;
        sclpick | sclmatch)
            pscl_flags+=("$option" "$1")
            shift
            ;;
        nosclonly)
            pscl_flags+=(--nosclonly)
            ;;
        gcsonly)
            pscl_flags+=(--gcsonly)
            ;;
        nogcsonly)
            pscl_flags+=(--nogcsonly)
            ;;
        filesonly)
            pscl_flags+=(--filesonly)
            ;;
        skip-no-source-ctrl-log)
            pscl_flags+=(--skipmissing)
            ;;
        edit)
            pscl_flags+=(--edit)
            ;;
        confirm)
            opt_confirm=1
            ;;
        editor)
            git_editor=$1
            shift
            ;;
        color)
            pscl_flags+=(--color "$1")
            shift
            ;;
        nountracked )
            pscl_flags+=(--nountracked)
            ;;
        inter* )
            pscl_flags+=(--interactive)
            ;;
        --)  break ;; ## VITAL!!! Exits the while loop, no more options,
                      ## remaining $*, if any, are args
        *)
            cmd-echo --id git-process-source-ctrl-log -ec -- "$option is an invalid option. See $0 --help"
            false; exit
            ;;
    esac
done

## Get the full path for files that could be in play in a SourceCtrlLog and
## deal with possibly rm'ed files.
declare filelist
declare file
for file in "$@"; do
    declare absolute_file
    absolute_file="$(realpath "${PWD}")/$file"
    if [[ -r "$absolute_file" ]]; then
        filelist+=("$absolute_file")
    else
        ## $file is either a git rm'ed file, a git renamed file or a typo.
        if [[ "$(git what is deleted | grep -E "^$file$")" = "$file" ]] ||
               [[ "$(git what is modified | grep -E "^$file$")" = "$file" ]]; then
            ## Then the file is indeed git rm'ed.
            filelist+=("$absolute_file")
        else
            cmd-echo --id git-process-source-ctrl-log --ec -- "File $file not found. Aborting"
            false; exit
        fi
    fi
done

## Find and validate the source-ctrl-log
declare source_ctrl_logdir
if ! source_ctrl_logdir=$(git root); then
    git-usage "$0"
    flase; exit
fi

declare source_ctrl_log="${source_ctrl_logdir}/$GITFUNCS_SOURCE_CTRL_LOG_NAME"
[[ ! -f "$source_ctrl_log" ]] && cmd-echo --id git-process-source-ctrl-log --wc -- "No $source_ctrl_log found"

if [[ "$action" = 'commit' ]] && [[ ! -w "$source_ctrl_log" ]]; then
    cmd-echo --id git-process-source-ctrl-log --ec -- "$source_ctrl_log not writable"
    false; exit
fi

declare others
others=$(find "$source_ctrl_logdir" -name "$GITFUNCS_SOURCE_CTRL_LOG_NAME" | grep -v "$source_ctrl_log")
if [[ -n "$others" ]]; then
    cmd-echo --id git-process-source-ctrl-log --ec -- "Found $others. No other $GITFUNCS_SOURCE_CTRL_LOG_NAME allowed under $source_ctrl_logdir."
    false; exit
fi

# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
declare emacsfile="$(dirname "$(realpath "$source_ctrl_log")")/.#$(basename "$source_ctrl_log")"
if [[ -h "$emacsfile" ]]; then
    cmd-echo --id git-process-source-ctrl-log --ec -- "'$GITFUNCS_SOURCE_CTRL_LOG_NAME' is open in emacs. Please save it an re-run."
    false; exit
fi

export PSCL_LEAD_CHAR='*' ## NOTE: If you change the lead character for items
                          ## here, make sure you also change it in the commit
                          ## section below.

##
## Status display only
##
if [[ "$action" != 'commit' ]]; then
    perl $debug -S process-source-ctrl-log --scl "$source_ctrl_log" "${pscl_flags[@]}" "${filelist[@]}"
    exit
fi

##
## Commits
##

## Backup
source_ctrl_logbkp="${source_ctrl_log}.bkp"
if [[ -f "$source_ctrl_log" ]]; then
    if ! cp "$source_ctrl_log" "$source_ctrl_logbkp"; then
        cmd-echo --id git-process-source-ctrl-log --ec -- "Error backing up $source_ctrl_log"
        false; exit
    fi
fi

## Parse
if ! perl $debug -S process-source-ctrl-log --scl "$source_ctrl_log" "${pscl_flags[@]}" "${filelist[@]}"
then
    rollback
    false; exit
fi

## We rebuild the filelist from the commit message file so that we can account
## for having changed the file list in process-source-control-log or removed
## some file and its text in the editor.  NOTE: If you change the lead
## character for items in PSCL_LEAD_CHAR above, make sure you also change it
## here:
## -----------------------------------------------------------------------------vv
declare -a filelist_refreshed
mapfile -t filelist_refreshed < <(perl -ne 'next if $_ =~ m/^(SUMMARY TEXT HERE|\* | |[a-zA-Z0-9_*-]+\(\):|\n)/;print $_' "$parsed_cl_commit")
cmd-echo --id git-process-source-ctrl-log -- "About to commit" "${filelist_refreshed[@]}"
if ((opt_confirm)); then
    declare resp
    resp=$(cmd-yesno  --id git-process-source-ctrl-log 'Ok' n)
    if [[ "$resp" = 'n' ]]; then
        ## Restore
        cmd-echo --id git-process-source-ctrl-log --ec -- "Commit aborted"
        rollback
        true; exit
    fi
fi

## Do the commit

## Preparations
declare git_status_before
git_status_before=$(mktempfile -+ before-status)
rm-on-exit "$git_status_before"
declare git_status_after
git_status_after=$(mktempfile -+ after-status)
rm-on-exit "$git_status_after"

(
    ## The file names that come out of the control log are repo-root
    ## relative. Temporarily cd to the repo root so that git can find them, in
    ## case we are not in the repo root. We do so in subshell "()" so we don't
    ## have to cd back when done.
    cd "$(git root)" || exit
    $REALGIT status --porcelain > "$git_status_before" 2>&1
    if [[ -z "$git_editor" ]]; then
        git commit -F "$parsed_cl_commit" --edit $opt_v "${filelist_refreshed[@]}"
    else
        GIT_EDITOR=$git_editor git commit -F "$parsed_cl_commit" --edit $opt_v "${filelist_refreshed[@]}"
    fi
    declare status=$?; true
    if ((status==$?)); then
        ## POTENTIAL PROBLEM - even though status==true, it appears that if a git
        ## commit is aborted due to a coding error in the hook (as opposed to
        ## the hook finding a non-commitable condition and exiting non-zero),
        ## we don't get an error return, which means we don't rollback the
        ## $source_ctrl_log. Sooooo, we defensively try to ferret out that
        ## problem by looking at git status before the commit (see above) and
        ## after (see next lines). If the two statuses are the same then the
        ## commit did not take, so we rollback.
        $REALGIT status --porcelain > "$git_status_after" 2>&1
        diff -q "$git_status_before" "$git_status_after" 1>/dev/null
        diffstatus=$?
        # diff returns 0 if there are no diffs. :facepalm:
        if ((diffstatus==0)); then
            cmd-echo --id git-process-source-ctrl-log --wc -- \
                     "The return status from 'git commit' has indicated a successful" \
                     "execution, but since there appears to have been no change in" \
                     "git status, we are assuming the pre-commit hook failed." \
                     "This can also happen if you edit one or more files being" \
                     "committed while you have the editor open, so DON'T DO THAT." \
                     "As a precaution we will roll back '$source_ctrl_log'."
            false; status=$?
        fi
    fi

    true
    if((status!=$?)); then
        rollback
    else
        rollforward
    fi
    exit $status
)
