#!/usr/bin/env bash

## to-ext

# shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"

declare moreopts=1
declare opt_since=''
declare opt_reset=0
while [[ "$1" =~ ^- ]] && ((moreopts)); do
    ## Strip all leading dashes here so that -foo and --foo can both
    ## be processed as 'foo'.
    declare original="$1"
    declare option
    option="$(dashstripper "$original")"
    shift

    case $option in
        reset )
            opt_reset=1
            ;;
        since )
            opt_since=$1;  ## The last sha in the SOURCE repo that was
                           ## successfully shar'ed, shipped and integrated with
                           ## a particular target.
            shift
            ;;
        help )
            bash-usage "$0"
            exit 0
            ;;
        debug | x ) set -x ;;
        --)
            moreopts=0
            ;;
        * )
            echo "$original is an invalid option.";
            bash-usage "$0"
            exit 1
            ;;
    esac
done

## The shar file
sharoutroot=$(git config --get ext.name)
if [ -z "$sharoutroot" ]; then
    echo No shar root name specified.
    echo Shall I run
    declare cmd
    cmd="git config --add ext.name $(basename "${PWD}")"
    resp=$(yesno "$cmd" n)
    if [ "$resp" = 'n' ]; then
        echo "Bailing. Run your own git config --add ext.name command,"
        echo "then rerun this script."
        exit 1
    fi
    ## else
    $cmd
    sharoutroot=$(git config --get ext.name)
fi

## Check that we are clean. Otherwise the git-log-dump will not match with mods
## on disk. We don't count any existing git-log-dump, git-rms or git-links
## files as a problem since we are going to redo them anyway.
if (($(git status --porcelain 2>&1 | \
           grep -E -v 'git-(log-dump|rms|links)' 2>&1 | \
           grep -c -E -v "${sharoutroot}.*shar.*" 2>&1))); then
    echo "Repo not clean:"
    git status
    echo "If git-sha is modified, check it in immediately. Stopping."
    exit 1
fi

declare git_sha_file="git-sha"
if ((!opt_reset)) && [ -z "$opt_since" ]; then
    if [ -f $git_sha_file ]; then
        git checkout $git_sha_file
        opt_since=$(sed 's/commit //' $git_sha_file)
    fi
fi

## Write the commit log to text. That will keep track of the modifications,
## perhaps to create a decent commit message on the other side.
git log | head -1 > $git_sha_file
git log > git-log-dump
to_sha=$(sed 's/commit //' $git_sha_file)
## Non git members to add to the shar
declare additionals="--text-files git-log-dump"

## The shar file
sharoutroot=$(git config --get ext.name)
if [ -z "$sharoutroot" ]; then
    echo No shar root name specified.
    echo Shall I run
    declare cmd
    cmd="git config --add ext.name $(basename "${PWD}")"
    resp=$(yesno "$cmd" n)
    if [ "$resp" = 'n' ]; then
        echo "Bailing. Run your own git config --add ext.name command,"
        echo "then rerun this script."
        exit 1
    fi
    ## else
    $cmd
    sharoutroot=$(git config --get ext.name)
fi

if [ -z "$opt_since" ]; then
    ## Without a sha to compare to, grab all files
    files=$(git ls-files)
    # shellcheck disable=SC2001 # Can't use ${var//patt/repl}; need rexep . to match all
    opt_since=$(echo "$to_sha" | sed 's/./0/g')
    rm -f git-rms
else
    ## Check the files changed from sha time to now and segregate the removed
    ## ones for special processing.
    tmp=$(mktemp -t tmp.to-ext.XXXXXXXXXX)
    rm-on-exit "$tmp"
    declare i
    for i in $(git diff --name-only "$opt_since"); do
        if [ -r "$i" ]; then
            files="$files $i"
        else
            rms="$rms $i"
        fi
    done
    rm -f git-rms
    if [ -n "$rms" ]; then
        echo "$rms" > git-rms
        additionals="$additionals git-rms"
    fi
fi

## Handle links
tmp="$files"
files=''
rm -f git-links
gr=$(git root)
bngr=$(basename "$gr")
declare $i
for i in $tmp; do
    if [ -h "$i" ]; then
        tgt=$(readlink "$i" | sed "s|$gr|$bngr|")
        echo "$i:$tgt" > git-links
    else
        files="$files $i"
    fi
done
[ -s git-links ] && additionals="$additionals git-links"

## Make it.
sharout="${sharoutroot}-${opt_since}-${to_sha}-$(date +%Y-%m-%d).shar"
shar -q -m -o "$sharout" -p -M "$files" "$additionals"
echo
echo Done. sharfile is "'$(ls "${sharout}"*)'"
echo "Don't forget to check in $git_sha_file"

exit 0

:<<'__USAGE__'

to-ext - Create a shar to copy files

Uses a sha passed via --since or from the file 'git-sha' to figure out what
files have been added, changed or removed since the last time this command was
run. Dumps the log to file 'git-log-dump', puts removals in file 'git-rms',
creates a shar of all the files.

Take shar over to the target repo (use a branch named 'incoming'). Run
'from-ext' with the shar name. Commit changes. Sync to cloud.
__USAGE__
