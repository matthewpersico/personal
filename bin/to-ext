## -*- sh -*-

## to-ext

declare moreopts=1
declare opt_since=''
declare opt_dirty=0
while [[ "$1" =~ ^- ]] && ((moreopts))
do
    ## Strip all leading dashes here so that -foo and --foo can both
    ## be processed as 'foo'.
    declare original="$1"
    declare option
    option=$(dashstripper $original)
    shift

    case $option in
        since )
            opt_since=$1;  ## The last sha in the SOURCE repo that was
                           ## successfully shar'ed, shipped and integrated with
                           ## a particular target.
            shift
            ;;
        dirty )
            opt_dirty=1;
            ;;
        help )
            func-echo "No help yet - read the code:"
            cat $0
            exit 0
            ;;
        debug | -x )
            set -x
            ;;
        --)
            moreopts=0
            ;;
        * )
            func-echo "$original is an invalid option. See $0 --help";
            exit 1
            ;;
        esac
    done

## Check that we are clean. Otherwise the git-log-dump will not match with mods
## on disk. We don't count any existing git-log-dump or git-rms as a problem.
if (($(git st --porcelain 2>&1 | grep -E -v 'git-(log-dump|rms)' 2>&1 | wc -l)))
then
    func-echo "Repo not clean:"
    git status
    if ((opt_dirty))
    then
        func-echo "Continuing: --dirty specified. git-log-dump may not match code on disk."
    else
        func-echo "Stopping."
        exit 1
    fi
fi

## Write the commit log to text. That will keep track of the modifications,
## perhaps to create a decent commit message on the other side.
git log > git-log-dump

## Non git members to add to the shar
additionals="$additionals git-log-dump"

## The shar file
sharout=personal-bb-$(date +%Y-%m-%d).shar

if [ -z "$opt_since" ]
then
    ## Without a sha to compare to, grab all files
    files=$(git ls-files)
else
    ## Check the files changed from sha time to now and segregate the removed
    ## ones for special processing.
    tmp=$(mktemp)
    for i in $(git diff --name-only $opt_since)
    do
        if [ -r $i ]
        then
            files="$files $i"
        else
            rms="$rms $i"
        fi
    done
    if [ -n "$rms" ]
    then
        echo $rms > git-rms
        additionals="$additionals git-rms"
    fi
fi

## Make it.
shar -q -o $sharout $files $additionals
func-echo sharfile is $(ls ${sharout}*)
