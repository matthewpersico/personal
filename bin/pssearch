#!/usr/bin/env perl

use strict;
use warnings;
use Text::Wrap;
use File::Basename;

our %opt = (
    trunc    => 0,
    wrap     => 0,
    raw      => 0,
    original => 0,
    head     => 1,
    help     => 0,
    this     => 1,
    expid    => [],
    user     => '-e',
    me       => 0,
    short    => 0,
    verbose  => 0,
    pid      => [],
    cmd      => [],
    color    => 1,
    time     => 0,
    rtime    => 0,
    filter   => 0,
    quiet    => 0,
    older    => 0
);

my %elapsed_fmt = (
    '-1' => 's',
    '-2' => 'm',
    '-3' => 'h',
    '-4' => 'd'
);

my %print;
my %noprint;
my $wrap_min    = 0;
my $this        = basename($0);
my $this_marker = " <===== this proc";
use Getopt::Long;
GetOptions(
    \%opt,
    qw( pid=i@
      cmd=s@

      original
      raw
      wrap
      trunc
      color!
      filter
      quiet!

      head!
      this!
      expid=i@

      user|U=s
      short
      me

      time
      rtime

      older=f

      verbose
      help
    )
) or die("Error in command line options\n");

if ( $opt{help} ) {
    use Pod::Usage;
    pod2usage(
        -verbose => 99,
        -exitval => 0
    );
}
$opt{older} *= 60 * 60 * 24;
my $uic = $opt{trunc} + $opt{wrap} + $opt{raw} + $opt{original};
my $ui  = '';
if ( $uic == 0 ) {
    $ui = 'trunc';
} elsif ( $uic == 1 ) {
    $ui = ( grep { exists( $opt{$_} ) && $opt{$_} != 0 }
          qw (raw wrap trunc original) )[0];
} else {
    die "--trunc, --wrap, --raw, --original are mutex\n";
}

if ( $opt{time} + $opt{rtime} == 2 ) {
    die "--time and --rtime are mutex\n";
}

$opt{$ui} = 0;
if ( -t STDOUT ) {
    $opt{$ui} += `tput cols`;
}

if ( $opt{me} ) {
    $opt{user} = $ENV{USER};
}
if ( $opt{user} ne '-e' ) {
    $opt{user} = "-U $opt{user}";
}

if ( $opt{color} && $opt{filter} ) {
    $opt{color} = 0;
}

for my $search_arg (@ARGV) {
    my $which = (
        $search_arg =~ m/^\d+$/
        ? 'pid'
        : 'cmd'
    );
    push @{ $opt{$which} }, $search_arg;
}

## 'idx' are all even because the "separator" columns are between them.  The
## keys are the headers of the ps command. The 'std' entries are used to
## normalize columns over different OSes with different headers.
my %master_map = (
    'Linux' => {
        STARTED => {
            fmtcol       => 'start',
            idx          => 0,
            justify      => q(right),
            justify_plus => 0,
            std          => 'STARTED',
        },
        ELAPSED => {
            fmtcol       => 'etime',
            idx          => 2,
            justify      => q(right),
            justify_plus => 1,
            std          => 'ELAPSED',
        },
        UID => {
            fmtcol       => 'uid',
            idx          => 4,
            justify      => q(right),
            justify_plus => 0,
            std          => 'UID',
            wid          => 12,
        },
        PID => {
            fmtcol       => 'pid',
            idx          => 6,
            justify      => q(right),
            justify_plus => 0,
            std          => 'PID',
            wid          => 8,
        },
        PPID => {
            fmtcol       => 'ppid',
            idx          => 8,
            justify      => q(right),
            justify_plus => 0,
            std          => 'PPID',
            wid          => 8,
        },
        TT => {
            fmtcol       => 'tty',
            idx          => 10,
            justify      => q(left),
            justify_plus => 0,
            std          => 'TT',
        },
        COMMAND => {
            fmtcol       => 'command',
            idx          => 12,
            justify      => q(left),
            justify_plus => 0,
            std          => 'COMMAND',
        },
    },
    'SunOS' => {
        STIME => {
            fmtcol       => 'stime',
            idx          => 0,
            justify      => q(right),
            justify_plus => 0,
            std          => 'STARTED',
        },
        ELAPSED => {
            fmtcol       => 'etime',
            idx          => 2,
            justify      => q(right),
            justify_plus => 1,
            std          => 'ELAPSED',
        },
        UID => {
            fmtcol       => 'uid',
            idx          => 4,
            justify      => q(right),
            justify_plus => 0,
            std          => 'UID',
        },
        PID => {
            fmtcol       => 'pid',
            idx          => 6,
            justify      => q(right),
            justify_plus => 0,
            std          => 'PID',
        },
        PPID => {
            fmtcol       => 'ppid',
            idx          => 8,
            justify      => q(right),
            justify_plus => 0,
            std          => 'PPID',
        },
        TT => {
            fmtcol       => 'tty',
            idx          => 10,
            justify      => q(left),
            justify_plus => 0,
            std          => 'TT',
        },
        COMMAND => {
            fmtcol       => 'args',
            idx          => 12,
            justify      => q(left),
            justify_plus => 0,
            std          => 'COMMAND',
        },
    },
    'AIX' => {
        STARTED => {
            fmtcol       => 'start',
            idx          => 0,
            justify      => q(right),
            justify_plus => 0,
            std          => 'STARTED',
        },
        ELAPSED => {
            fmtcol       => 'etime',
            idx          => 2,
            justify      => q(right),
            justify_plus => 1,
            std          => 'ELAPSED',
        },
        UID => {
            fmtcol       => 'uid',
            idx          => 4,
            justify      => q(right),
            justify_plus => 0,
            std          => 'UID',
            wid          => 12,
        },
        PID => {
            fmtcol       => 'pid',
            idx          => 6,
            justify      => q(right),
            justify_plus => 0,
            std          => 'PID',
            wid          => 8,
        },
        PPID => {
            fmtcol       => 'ppid',
            idx          => 8,
            justify      => q(right),
            justify_plus => 0,
            std          => 'PPID',
            wid          => 8,
        },
        TT => {
            fmtcol       => 'tty',
            idx          => 10,
            justify      => q(left),
            justify_plus => 0,
            std          => 'TT',
        },
        COMMAND => {
            fmtcol       => 'args',
            idx          => 12,
            justify      => q(left),
            justify_plus => 0,
            std          => 'COMMAND',
        },
    },
);

$ENV{OS_O} ||= 'Linux';

my %map      = %{ $master_map{ $ENV{OS_O} } };
my @headcols = (
    map    { $_->[1] }
      sort { $a->[0] <=> $b->[0] }
      map  { [ $map{$_}{idx}, $_ ] }
      keys %map
);

my $fmtcols = join(
    ',',
    map    { "$_->[1]$_->[2]" }
      sort { $a->[0] <=> $b->[0] }
      map {
        [
            $map{$_}{idx}, $map{$_}{fmtcol},
            exists( $map{$_}{wid} )
            ? ":$map{$_}{wid}"
            : ''
        ]
      }
      keys %map
);
my %std_head_map =
  map { $map{$_}{std}, $_ }
  keys %map;

## $ENV{OS_O}=Linux is default
my $ps = "ps --forest -o $fmtcols $opt{user}";
for ( $ENV{OS_O} || '' ) {
    /SunOS/ && do {
        $ps = "ps -o $fmtcols $opt{user}";
        last;
    };
    /AIX/ && do {
        $ps = "ps -o $fmtcols $opt{user} -l";
        last;
    };
    /Cygwin/ && do {
        $ps = "ps $opt{user}";
        last;
    };
    /Darwin/ && do {
        $ps = "ps -o $fmtcols $opt{user}";
        last;
    };
}

$opt{verbose} and print STDERR "$ps\n";
open( IH, '-|', "$ps" );

my $striplead = -1;
my $printed;
my $startedcol = $map{ $std_head_map{STARTED} }{idx};
my $etimecol   = $map{ $std_head_map{ELAPSED} }{idx};
my $uidcol     = $map{ $std_head_map{UID} }{idx};
my $pidcol     = $map{ $std_head_map{PID} }{idx};
my $ppidcol    = $map{ $std_head_map{PPID} }{idx};
my $ttcol      = $map{ $std_head_map{TT} }{idx};
my $cmdcol     = $map{ $std_head_map{COMMAND} }{idx};
my $readpackfmt;
my $ascii_bold_red   = '[1;31m';
my $ascii_bold_green = '[1;32m';
my $ascii_normal     = '[m';

my @proc_groups;
my $current_proc_group = [];
my $row1read           = 0;

open( IH, '-|', "$ps" );

if ( $opt{original} ) {
    print <IH>;
    exit 0;
}

LINE:
while (<IH>) {
    my $l = $_;
    if ( not $row1read ) {
        my $start = 0;
        my $end   = 0;
        my $ll    = $l;
      COL:
        for my $colname (@headcols) {
            my $headfield;
            my $just = ' ' x $map{$colname}{justify_plus};
            if ( $map{$colname}{justify} eq 'right' ) {
                $ll =~ m/(\s*(?:$colname))\s/;
                $headfield = $1;
                if ($just) {
                    $l =~ s/$colname/$just$colname/;
                }
            } else {
                $ll =~ m/((?:$colname)\s*)/;
                $headfield = $1;
                if ($just) {
                    $l =~ s/$colname/$colname$just/;
                }
            }
            next if not defined $headfield;
            if ( !$row1read ) {
                $map{$colname}{readfmt} = 'A' . length($headfield) . 'A1';
                $readpackfmt .= $map{$colname}{readfmt};
                $row1read = length($headfield) + 1;
            } else {
                if ( $colname eq $headcols[-1] ) {
                    $map{$colname}{readfmt} = 'A*';
                } else {
                    $map{$colname}{readfmt} =
                      'A' . ( length($headfield) - 1 ) . 'A1';
                }
                $readpackfmt .= $map{$colname}{readfmt};
            }

            $ll =~ s/$headfield//;
        }
        $wrap_min  = index( $l, q(COMMAND) );
        $striplead = 0;
        if ( $opt{head} ) {
            push @{$current_proc_group},
              {
                sortval => 0,
                output  => $l
              };
        }
        next LINE;
    }

    my @f   = unpack( $readpackfmt, $l );
    my $pid = $f[$pidcol] + 0;
    if ( $$ == $f[$pidcol] ) {
        substr( $l, -1, 0 ) = $this_marker;
    }
    my $ppid = $f[$ppidcol];
    $ppid += 0 if $ppid =~ m/^[0-9]+$/;
    my $cmd           = $f[$cmdcol];
    my $etimesec      = calc_elapsed_seconds( $f[$etimecol] );
    my $etimereformat = format_elapsed( $f[$etimecol] );
    $l =~ s/$f[$etimecol]/$etimereformat/;
    my $uncoloredl = $l;

    if ( !@{ $opt{pid} } && !$opt{expid} && !@{ $opt{cmd} } && $opt{this} ) {
        ## No matching. Print every line.
        $print{$pid} = 1;
    } elsif ( ( !$opt{this} && $$ eq $pid )
        or ( match_any( $pid, '' ) eq 'expid' )
        or exists $noprint{$ppid} )
    {
        $noprint{$pid} = 1;
    } else {
        ## We are looking for a pid or a command
        my $match;
        if ( match_any( $pid, $cmd ) ) {
            ## We matched it. Figure out how far in we want to indent.
            my $cmd = substr( $l, $wrap_min );
            $cmd =~ m/^([|\s]+(?:\\_ )?)/;
            my $stripped = $1;
            $stripped ||= q();
            $striplead = length($stripped);

            ## Color the matches.
            if ( $opt{color} ) {
                for my $filt ( @{ $opt{pid} }, @{ $opt{cmd} } ) {
                    $l =~ s/$filt/${ascii_bold_red}${filt}${ascii_normal}/g;
                }
                $stripped = substr( $stripped, 0,
                    ( length($stripped) - 1 ) -
                      ( length($l) - length($uncoloredl) ) );
                $striplead = length($stripped);
            }

            $print{$pid} = 1;
        } else {
            ## We didn't match it. See if we printed its parent or we didn't
            ## not print its parent. If so then print this one.
            if (
                !$opt{filter}
                and ( defined $print{$ppid}
                    or not defined $noprint{$ppid} )
              )
            {
                $print{$pid} = 1;
            }
        }
    }

    $print{$pid} = 0 if ( $etimesec < $opt{older} );

    if ( $print{$pid} ) {
        my $isthis = $l =~ m /$this_marker/;
        $isthis and $l =~ s/$this_marker//;

        if ( $cmd !~ m/\s+\\_/ ) {
            if ( @{$current_proc_group} ) {
                push @proc_groups, $current_proc_group;
                $current_proc_group = [];
            }
        }

        if ( $opt{trunc} ) {
            chomp $l;
            my $output = join(
                '',
                substr( $l, 0, $wrap_min ),
                substr(
                    $l,
                    $wrap_min + $striplead,
                    $opt{trunc} -
                      ( $wrap_min - ( length($l) - length($uncoloredl) ) )
                ),
                "\n"
            );
            $isthis and $output = "${ascii_bold_green}${output}${ascii_normal}";
            push @{$current_proc_group},
              { sortval => $etimesec, output => $output };
        } elsif ( $opt{wrap} ) {
            my $ll =
              substr( $l, 0, $wrap_min ) . substr( $l, $wrap_min + $striplead );
            my $indent_idx = index( $ll, q(\\_) );
            if ( $indent_idx > -1 ) {
                $indent_idx += 3;
            } else {
                $indent_idx = $wrap_min;
            }
            my $output;
            if ($indent_idx) {
                $Text::Wrap::columns = $opt{wrap};
                $output = wrap( q(), ( q( ) x ( $indent_idx + 4 ) ), $ll );
                $isthis
                  and $output = "${ascii_bold_green}${output}${ascii_normal}";
                push @{$current_proc_group},
                  { sortval => $etimesec, output => $output };
            } else {
                $isthis and $l = "${ascii_bold_green}${l}${ascii_normal}";
                push @{$current_proc_group},
                  { sortval => $etimesec, output => $l };
            }
        } else {
            $isthis and $l = "${ascii_bold_green}${l}${ascii_normal}";
            push @{$current_proc_group}, { sortval => $etimesec, output => $l };
        }
    }
}

if ( @{$current_proc_group} ) {
    push @proc_groups, $current_proc_group;
}

## Add 'now'
push @proc_groups,
  [
    {
        sortval => 1,
        output  => sprintf(
            "%02d:%02d:%02d %s current time\n",
            (localtime)[ 2, 1, 0 ],
            q(<) . ( q(-) x ( $wrap_min - 12 ) ) . q(>)
        )
    }
  ]
  if ( not $opt{filter} );

if ( $opt{time} ) {
    ## Newest at the top. In any proc group, the oldest process will be the
    ## first one ([0]) by way of how 'ps' output works, so we sort by that
    ## process' elapsed time.
    @proc_groups =
      sort { $a->[0]->{sortval} <=> $b->[0]->{sortval} } @proc_groups;
} elsif ( $opt{rtime} ) {
    ## Newest at the bottom. Sort by [0] as per above.
    $proc_groups[0][0]{sortval} = 2**32;    ## make header come out at the top.
    @proc_groups =
      sort { $b->[0]->{sortval} <=> $a->[0]->{sortval} } @proc_groups;
}

if ( !@proc_groups ) {
    print "No process found for given filters\n"
      if ( not $opt{quiet} );
    exit 1;
} else {
    for my $proc_group (@proc_groups) {
        for my $proc ( @{$proc_group} ) {
            print $proc->{output};
        }
    }
}
exit 0;

sub match_any {
    my ( $pid, $cmd ) = @_;
    for ( @{ $opt{pid} } ) {
        return 'pid' if $pid eq $_;
    }
    for ( @{ $opt{expid} } ) {
        return 'expid' if $pid eq $_;
    }
    for ( @{ $opt{cmd} } ) {
        return 'cmd' if $cmd =~ m/$_/;
    }
    return '';
}

sub calc_elapsed_seconds {
    my @tmp = ( 0, 0, 0, 0, split( /:|-/, $_[0] ) );
    ## From right to left
    return $tmp[-1]         ## seconds
      + $tmp[-2] * 60       ## minutes
      + $tmp[-3] * 3600     ## hours
      + $tmp[-4] * 86400    ## days
      ;
}

sub format_elapsed {
    my @tmp = split( /:|-/, $_[0] );
    my @out;
    for ( sort { $b <=> $a } keys %elapsed_fmt ) {
        if ( defined( $tmp[$_] ) ) {
            push @out, $elapsed_fmt{$_}, $tmp[$_];
        } else {
            last;
        }
    }
    return join( '', reverse(@out) );
}

=head1 NAME

pssearch - ps with filtering

=head1 SYNOPSIS

 pssearch [--pid=i...]
          [--expid=i]
          [--cmd="s"...]
          --[original|raw|wrap|trunc]
          [--[no]head]
          [--[no]this]
          [--[no]color]
          [ [--[user|U]=s] | --me ]
          [ --[r]time]
          [--verbose]
          [--older d]
          [[pid|cmd]... ]

=head1 DESCRIPTION

Run a 'ps' command and filter the output.

=head1 ARGUMENTS

=over 4

=item pid or "cmd"

Numeric arguments are treated as if '--pid' was used. All other arguments are
treated as if '--cmd' was used. The output will be filtered to include
processes whose pids and commands that match the arguments, plus their child
processes. Multiple arguments are 'or'ed.

=back

=head1 OPTIONS

=over 4

=item --pid

Include the process that has this pid in the output. Also include its child
processes. More than one instance can be specified.

=item --expid

Do not include the process that has this pid in the output. Not sure if child
processes would be included. More than one instance can be specified.

=item --cmd

Include the process whose command matches this regular expression in the
output. Also include its child processes. More than one instance can be
specified.

=item --original|--raw|--wrap|--trunc

--original - Does not process any options except --verbose; just runs the ps
  command.

The following options process all other specified options before formatting
their output.

--raw - Do not do any formatting to the output, but respect filters.
--trunc - Truncate the output at terminal edge. This is the default.
--wrap - Wrap the output at the command column.

These three options are mutex.

=item --[no]head

Do or do not print the header. Default is to print it.

=item --[no]this

Do or do not include the 'pssearch' process itself or it's children in the
output. Default is to include it.

=item --[no]color

Do or do not highlight any text that matches any pid or cmd argument used as a
filter. Default is to color the matches.

=item --user

Only print processes for this user name.

=item --me

Same as "--user $USER".

=item --time/rtime

'time' sorts processes by start time of the topmost process in a tree group
from newest to oldest (like ls -t). 'rtime' sorts newest to oldest. Default is
not to sort but just print in whatever order comes out of the underlying 'ps'
command.

=item --verbose

Print the 'ps' command used before the ps output.

=item --older

*After* applying all of the filters above, print only those items that started
 more than 'f' days ago where 'f' is a decimal; .5 is 12 hours.

=back

=cut
