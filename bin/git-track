# -*- sh -*-
# shellcheck shell=bash

# git-track

get_remote ()
{
    local -a remotes
    mapfile -t remotes < <(git remote)
    if ((${#remotes[@]} == 1 )); then
        echo "${remotes[0]}"
    else
        local remote
        select remote in "${remotes[@]}" quit; do
            [[ $remote == 'quit' ]] && { false; return; }
            [[ -n $remote ]] && break;
        done
        echo "$remote"
    fi
}

main ()
{
    ## Get the branch or remote branch or remote/branch to process
    local -A trackit
    if (( $# == 0 )) || [[ $1 =~ -h ]]; then
        git-usage "$0"; true; return
    elif (( $# >= 2 )); then
        git-usage "$0" "too many arguments"; false; return
    elif [[ $1 =~ / ]]; then
        trackit[remote]=${1%%/*}
        trackit[branch]=${1##*/}
    else
        trackit[remote]=$(get_remote)
        trackit[branch]="$1"
    fi
    declare remote_branch="${trackit[remote]}/${trackit[branch]}"
    declare local_branch=$remote_branch
    [[ ${trackit[remote]} == 'origin' ]] && local_branch="${trackit[branch]}"
    $REALGIT checkout -b "$local_branch" --track "$remote_branch"
}

main "$@"
exit

:<<'__PODUSAGE__'
=head1 NAME

git-track - checkout a remote branch locally

=head1 SYNOPSIS

 git track [remotename/]branchname

=head1 DESCRIPTION

If branch B<branchname> exists in remote B<remotename>, create a tracking branch named "remotename/branchname" and check it out.

If B<remotename> is not specified, use the default if there is only one. Otherwise, choose from multiple remotes. Once the remote is chosen, the branch name will be "remotename/branchname" if "remotename" is not "origin". for "origin", the branch name will be just "branchname".

The branch must exist on the remote.

B<git branch --track-remote> is an earlier attempt to do this and it checks to see if the branch is already tracked. This code does not. Maybe rectify that at some point.

=cut

__PODUSAGE__
