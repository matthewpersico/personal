#!/usr/bin/env bash

# <Function Class: git>
# <Function Justification: none>

git-set-triangle ()
{
    [ -z "$4" ] && func_usage && return 1

    local githosturl=$1
    local githostkeycheck
    githostkeycheck=$(kvstore keys gitfuncs_gitsvcs | grep -E "^$githosturl$")
    if [ -n "$githostkeycheck" ] ; then
        echo "Supposed to provide a URL, not a service name. Converting..."
        githosturl=$(kvstore get gitfuncs_gitsvcs "$githostkeycheck")
        if [ -z "$githosturl" ]
        then
            echo "No url found for githost '$1'";
            return 1
        fi
    fi

    local upstream_namespace=$2
    local origin_namespace=$3
    local repo=$4

    declare -A triangle_workflow
    triangle_workflow[branch.master.merge]="refs/heads/master"
    triangle_workflow[branch.master.mergeoptions]="--ff-only"
    triangle_workflow[branch.master.remote]="upstream"

    triangle_workflow[remote.origin.fetch]="+refs/heads/*:refs/remotes/origin/*"
    triangle_workflow[remote.origin.url]="${githosturl}${origin_namespace}/${repo}"
    triangle_workflow[remote.pushdefault]="origin"
    triangle_workflow[remote.upstream.url]="${githosturl}${upstream_namespace}/${repo}"

    local key
    for key in "${!triangle_workflow[@]}"
    do
        git config --replace-all "$key" "${triangle_workflow[$key]}" || return $?
    done

    ## These two are special because they repeat
    key='remote.upstream.fetch'
    ## Replace all blows away all $key entries before adding this one
    git config --replace-all $key "+refs/heads/*:refs/remotes/upstream/*" || return $?
    ## Now safe to add this one - it won't be duped.
    git config --add         $key "+refs/notes/*:refs/notes/*" || return $?

    git config --replace-all gitfuncs.git-set-triangle.remote "${origin_namespace}"
    git config --replace-all gitfuncs.git-set-triangle.created "$(date +%Y%m%d.%H%M%S%z)"
}
