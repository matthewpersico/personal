#!/usr/bin/env bash

# python.env - Even though we have this file in PERSONALBIN, you should invoke
# it from WORKBIN if there is a WORKBIN because you'll need any WORK paths on
# PATH to find where your WORK installs Python.

# We'll check for virtualenv in PS1 ourselves.
export VIRTUAL_ENV_DISABLE_PROMPT=1

##
## We want the latest version of python and all its tools. This is crude, but
## effective.
##

declare verbose=0
declare init=''
while (($#)); do
    [[ $1 =~ '-v' ]] && verbose=1 && shift && continue
    if [[ $1 =~ '-init' ]]; then
        init=$2
        shift;shift;
        continue
    fi
    ## No other arguments are valid
    echo "$1 is an invalid argument"
    return ## This gets dotted in
done

declare pypath="${TILDAE:-$HOME}/bloomberg/bin/python"

## Find the latest python
declare our_python_version_max=999.999
declare our_python_version=0.0
declare our_python_version_file="${pypath}/.python_version"
if [[ -n $init ]]; then
    our_python_version_max=$init
elif [[ -r $our_python_version_file ]]; then
    our_python_version_max=$(cat "$our_python_version_file")
fi
our_python_version=$our_python_version_max
# Using a current python version as the max ensures that we won't automatically
# update until we want to, but we will be notified. When we want to upgrade,
# put the desired version into $out_python_version_file.
latest=$(python-version-verify --max "$our_python_version_max"  --version-only)

declare upgrade=0
if [[ ! -d "$pypath" ]] || [[ -n $init ]]; then
    upgrade=1
else
    upgrade=$(bc <<EOF
if ( $our_python_version < $latest ) { "1" } else { "0" }
EOF
           )
fi

if ((upgrade == 0)); then
    ((verbose)) && echo "Our python is up to date."
else
    ## Bury all the python links in a python subdir
    mkdir -p "$pypath"

    ## Find all the python exes and link them to
    declare link
    for exe in /opt/bb/bin/*"$latest"
    do
        ## Execption - there are three forms of this one. Why? WTFK.
        if [[ $exe =~ coverage ]] && [[ ! $exe =~ coverage${latest} ]]
        then
            continue
        fi
        ## If we don't do this twice, we will end up with some local commands like
        ## '2to3-' instead of '2to3'.
        link="$pypath"/$(basename "$exe" -"$latest")
        link="$pypath"/$(basename "$link" "$latest")
        if [[ $(readlink "$link") != "$exe" ]]
        then
            ## There's a higher version of python out there. Grab it.
            rm -fv "$link"
            ln -sv "$exe" "$link"
        fi
    done
    echo -n "$latest" > "$our_python_version_file"
fi

[[ -r $pypath ]] && addpath -fx PATH "$pypath"
addpath -fx PATH "$pypath"

PYTHONENV_LOADED=1
export PYTHONENV_LOADED
