#!/usr/bin/env bash

echo "$(date): git-status-with-source-ctrl-log" >> "$HOME/.gitaudit"

# git-status-with-source-ctrl-log

declare diff
declare cached
declare sclonly
declare gcsonly
declare color
declare -a color_opt
declare -a untracked_opt

# Define the options. ':' suffix for a mandatory value to an option, '::' for
# an optional one. Note that the long and short don't have to match up.
declare OPTSARGS
declare shortopts='xh'
declare longopts='filesonly,sclonly,nosclonly,gcsonly,nogcsonly,diff,cached,help,debug,color:,nocolor,edit,noun,nountracked'

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
((status != 0)) && exit $status ## return $status ## in functions

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true
do
    declare option=$1
    shift
    case "$option" in
        --edit) edit='--edit';;
        --filesonly) filesonly='--filesonly';;
        --sclonly) sclonly='--sclonly';;
        --nosclonly) sclonly='--nosclonly';;
        --gcsonly) gcsonly='--gcsonly' ;;
        --nogcsonly) gcsonly='--nogcsonly' ;;
        --diff) diff='--diff';;
        --cached) cached='--cached';;
        -h|--help) bash-usage git-status-ext; exit 0 ;;
        --debug | -x ) set -x; trap 'set +x' EXIT;;
        --color) color=$1
                 shift
                 color_opt=(--color "$color")
                 ;;
        --nocolor)
            color_opt=(--color "never")
            ;;
        --noun|nountracked)
            untracked_opt=('--nountracked')
            ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -ec -- "$option is an invalid option. See $0 --help"
            exit 1 ## return 1 in functions
            ;;
    esac
done

## Locate all the files to process
declare -a filenames
if (($#))
then
    ## Process what's specified
    filenames=("$@")
else
    mapfile -t filenames < <(git what is edited)
fi

git-process-source-ctrl-log $diff $cached "${color_opt[@]}" "${untracked_opt[@]}" $sclonly $gcsonly $filesonly $edit "${filenames[@]}"
