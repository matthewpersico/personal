#! /usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use POSIX qw(strftime);

my %opts;

GetOptions(
    \%opts, qw(i
               l
               include-dir
               include-file
               match-dir
          )
);
my $pattern = shift;
$pattern = "(?i)$pattern" if $opts{i};
$pattern = qr/$pattern/;
my $time;
my $dir;
my @entries;
my $entry;
for my $file (@ARGV) {
    my $ih = IO::File->new("< $file")
      or die "Cannot open $file:$!";
    while (<$ih>) {
        if( $_ =~ m/^##/ ) {
            $entry = {};
            next;
        }
        chomp;
        $_ =~ m/^#(\d+)/ && do {
            $entry = {
                time => $1
            };
            if( $_ =~ m/## pwd => (.*)/ ) {
                if ( $opts{'include-dir'} ) {
                    $entry->{dir} = $1;
                } elsif ( $opts{'match-dir'} ) {
                    if( $1 =~ m/$opts{'match-dir'}/) {
                        $entry->{dir} = $1;
                    } else {
                        $entry = undef;
                    }
                }
            }
            next;
        };
        if ( $_ =~ m/$pattern/ and defined $entry) {
            $entry->{cmd} = $_;
            if (    $opts{'include-file'}
                 or $opts{l}) {
                $entry->{file} = $file;
            }
            push @entries, $entry;
        }
    }
}

@entries = sort { $a->{time}<=> $b->{time} } @entries;
$ENV{HISTTIMEFORMAT} ||= '%m/%d - %H:%M:%S';
my $datelen = 0;
my @output;
my %unique;
for (@entries) {
    if($opts{l}) {
        $unique{$_->{file}}++
    } else {
        $datelen = length( strftime( $ENV{HISTTIMEFORMAT}, localtime(1) ) )
          if not $datelen;
        push @output, sprintf( "%s %s%s%s\n",
                               strftime( $ENV{HISTTIMEFORMAT}, localtime( $_->{time} ) ),
                               $_->{cmd},
                               ( $_->{dir} ? "\n" . ' ' x $datelen . "($_->{dir})" : '' ),
                               ( $_->{file} ? "\n" . ' ' x $datelen . "($_->{file})" : '' )
                           );
    }
}
@output = map { "$_\n" } sort keys %unique if $opts{l};
print @output if(@output);
