#!/usr/bin/env bash

# git-post-new

# shellcheck disable=SC1090
. "$(which script-echo)" -i "$(basename "$0")"

script-echo "Making a $GITFUNCS_CHANGELOG_NAME file"
touch "$(git root)/$GITFUNCS_CHANGELOG_NAME"

if [ "$1" = '-t' ]
then
    script-echo "Setting timestamps..."
    git-retimestamp
fi

## POD guard
exit 0

:<<'__PODUSAGE__'
=head1 NAME

git-post-new - setups after creating a new worktree or cloning

=head1 SYNOPSIS

 git-post-new [-t]

=head1 DESCRIPTION

Assuming that the command is invoked in a clone or a worktree, it creates a
$GITFUNCS_CHANGELOG_NAME file for use by emacs to describe file changes.

=head1 OPTIONS

=over 4

=item -t

Instead of leaving the files with the timestamp of when they were cloned, go
figure out from git log when each was last committed and timestamp them with
that time.

=back

=cut

__PODUSAGE__
