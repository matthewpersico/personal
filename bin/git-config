#!/usr/bin/env bash

# git-config

echo "$(date): git-config" >> "$HOME/.gitaudit"

# git-grep

# shellcheck disable=SC1090
use on_exit

if ! git-version-verify 'git-config'; then
    exit 1
fi

main ()
{
    local -a pass_on_args
    local expand=0
    local value_only=0
    local preproc=0
    ## Must be REALGIT or we recurse like mad and forkbomb ourselvesq...
    for i in $($REALGIT config --get git-config.opts); do
        pass_on_args+=("$i")
    done

    while [[ -n "$1" ]]; do        local original="$1"
        shift
        if [[ "$original" =~ ^- ]]; then
            local option
            option=$(dashstripper "$original")

            ## All of the --foo=bar processing is stripped away because we
            ## don't need it for the limited set of options we are processing.

            case $option in
                h | help )
                    git-usage "$0"
                    exit 0
                    ;;
                personal )
                    pass_on_args+=('-f' "$HOME/.gitconfig.personal")
                    continue
                    ;;
                bloom* )
                    pass_on_args+=('-f' "$HOME/.gitconfig.bloomberg")
                    continue
                    ;;
                expand )
                    expand=1
                    preproc=1
                    continue
                    ;;
                value-only )
                    value_only=1
                    preproc=1
                    continue
                    ;;
                get-regexp)
                    ## Note: This is a workaround for the fact that (from the
                    ## man page): Regular expression matching is currently
                    ## case-sensitive and done against a canonicalized version
                    ## of the key in which section and variable names are
                    ## lowercased, but subsection names are not.
                    local regexp=$1; shift
                    pass_on_args+=('--get-regexp' ".*${regexp}.*"); shift
                    continue
                    ;;
                ## No '*)' case needed; anything else just gets passed on
            esac
        fi

        ## If we are here, pass it on
        pass_on_args+=("$original")
    done

    if ((preproc)); then
        local -a raws
        if ((value_only)); then
            mapfile -t raws < <($REALGIT config "${pass_on_args[@]}"| cut -d' ' -f 2 )
        else
            mapfile -t raws < <($REALGIT config "${pass_on_args[@]}")
        fi

        local raw
        for raw in "${raws[@]}"; do
            if ((expand)); then
                local -a exps
                # shellcheck disable=SC2162 # https://github.com/koalaman/shellcheck/wiki/SC2162
                read -a exps < <(eval echo "$raw")
                local exp
                for exp in "${exps[@]}"; do
                    echo "$exp"
                done
            else
                echo "$raw"
            fi
        done
    else
        $REALGIT config "${pass_on_args[@]}"
    fi
    return $?
}

main "$@"

exit $?

:<<'__PODUSAGE__'
=head1 NAME

git-config - git extention of git config

=head1 SYNOPSIS

 git config [--personal|--bloomberg] [--expand] [--value-only] <all other git config options>

=head1 DESCRIPTION

Extensions to the 'git config' command. Any action not described here will be passed onto the actual 'git grep' command.

=head1 EXTENSIONS

=over 4

=item --personal

Shortcut for -f "$HOME/.gitconfig.personal". Only needed for writing. "$HOME/.gitconfig.personal" is [include]ed in .gitconfig, so that it will be searched for read operations.

=item --bloomberg

Shortcut for -f "$HOME/.gitconfig.bloomberg". Only needed for writing. "$HOME/.gitconfig.bloomberg" is [include]ed in .gitconfig, so that it will be searched for read operations.

=item --expand

With this option, each value returned from a '--get' or '--list' command will be passed through a shell 'eval' command. This means that if you have put an environment variable in a git config entry, it will be expanded to its current value.

=item --value-only

When getting multiple values, both the key and the value are printed for each pair. With this option, only the values are printed.

=back

=cut

__PODUSAGE__
