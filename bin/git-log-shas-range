#!/usr/bin/env bash

# git-log-shas-range


declare opt_hf
opt_hf=''
declare opt_inclusive
opt_inclusive=1
declare opt_add_names
opt_add_names=''
declare OPTSARGS
OPTSARGS=$(getoptp -o f:ienh --long highlightfirst:,inclusive,exclusive,name-only,help -n "${FUNCNAME[0]}" -- "$@")
declare status
status=$?
((status != 0)) && script-usage && exit $status

eval set -- "$OPTSARGS"
while true
do
    case "$1" in
        -f|--higlightfirst)  opt_inclusive=1; opt_hf="$2"; shift; shift ;;
        -i|--inclusive) opt_inclusive=1; shift ;;
        -e|--exclusive) opt_inclusive=0; shift ;;
        -n|--name-only) opt_add_names='--name-only'; shift ;;
        -h|--help) script-usage; exit 0 ;;
        --) shift; break ;; ## end of opts, remaining $*, if any, are args
        *) echo "Internal error!"; script-usage; exit 1 ;;
    esac
done

[ -z "$2" ] && echo "Usage: git-log-sha-range oldersha newersha" && exit 1;
git --no-pager log $opt_add_names "${1}..${2}" ## Does not print the first one
if((opt_inclusive))
then
    [ ! "$1" = "$2" ] && echo "$opt_hf"
    git --no-pager log $opt_add_names -1 "${1}"    ## Always prints the first one
fi
## POD guard
exit 0

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/.

:<<'__PODUSAGE__'
=head1 NAME

git-log-shas-range - script that does something

=head1 SYNOPSIS

 git-log-shas-range [--option1] [ --option2 optionarg ] arg1 [arg2 ...] 
     [fee] [dfsdfs] [sfsdfsf]

=head1 DESCRIPTION

Describe in general terms what git-log-shas-range does.

=head1 ARGUMENTS

=over 4

=item arg

Describe what arg does, should be, etc. Add a new =item for each distinct arg.

=back

=head1 OPTIONS

=over 4

=item --option1

Describe what --option1 does.

=item --option2

Describe what --option2 does. Describe what optionarg does.

=over 2

=item *

A choice for optionarg

=item *

Another choice for optionarg

=back

=back

=cut

__PODUSAGE__

