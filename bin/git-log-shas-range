#!/usr/bin/env bash

echo "$(date): git-log-shas-range" >> "$HOME/.gitaudit"

# git-log-shas-range

declare opt_hf
opt_hf=''
declare opt_inclusive
opt_inclusive=1
declare opt_add_names
opt_add_names=''
declare OPTSARGS
declare shortopts='f:ienh'
declare longopts='highlightfirst:,inclusive,exclusive,name-only,names-only,names,with-names,help'

OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@")
declare status=$?
((status != 0)) && bash-usage "$0" && exit $status

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    case "$option" in
        -f|--higlightfirst)  opt_inclusive=1; opt_hf="$1"; shift ;;
        -i|--inclusive) opt_inclusive=1 ;;
        -e|--exclusive) opt_inclusive=0 ;;
        -n|--name-only | \
            --names-only | \
            --names | \
            --with-names) opt_add_names='--name-only' ;;
        -h|--help) bash-usage "$0"; exit 0 ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -ec -- "$option is an invalid option. See $0 --help"
            exit 1 ## return 1 in functions
            ;;
    esac
done

[[ -z "$2" ]] && echo "Usage: git-log-sha-range oldersha newersha" && exit 1;
git --no-pager log $opt_add_names "${1}..${2}" ## Does not print the first one
if((opt_inclusive)); then
    [[ ! "$1" = "$2" ]] && echo "$opt_hf"
    git --no-pager log $opt_add_names -1 "${1}"    ## Always prints the first one
fi
## POD guard
exit 0

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/.

:<<'__PODUSAGE__'
=head1 NAME

git-log-shas-range - script that does something

=head1 SYNOPSIS

 git-log-shas-range [--option1] [ --option2 optionarg ] arg1 [arg2 ...]
     [fee] [dfsdfs] [sfsdfsf]

=head1 DESCRIPTION

Describe in general terms what git-log-shas-range does.

=head1 ARGUMENTS

=over 4

=item arg

Describe what arg does, should be, etc. Add a new =item for each distinct arg.

=back

=head1 OPTIONS

=over 4

=item --option1

Describe what --option1 does.

=item --option2

Describe what --option2 does. Describe what optionarg does.

=over 2

=item *

A choice for optionarg

=item *

Another choice for optionarg

=back

=back

=cut

__PODUSAGE__
