# -*- sh -*-
# shellcheck shell=bash

# git-repo

use mktemp
use on_exit

## Global used to control 'cd'ing around
doandcdfile=''

_git-repo-date-to-epoch ()
{
    date -d "${1/./ }" +%s
}

_git-repo-get-wt-or-br-create-date ()
{
    local -a lines
    local cb; cb="$(git-repo-current-branch)"
    local wt; wt="$(git worktree ina -v)"

    local key
    local value
    local crdate
    # current branch create date
    local cbcd; cbcd=$(git config --get-regexp "branch.${cb}\.${GIT_EXT_META_PREFIX}-created")
    read -r key crdate <<< "$cbcd"

    local wtcd; wtcd=$(git config --get-regexp "worktree.${wt}\.${GIT_EXT_META_PREFIX}-created")
    read -r key value <<< "$wtcd"
    if [[ "$value" < "$crdate" ]]; then
        crdate=$value
    fi
    echo "${crdate/./T}"
}

git-repo-check ()
{
    git-repo-check-with "$@"
}

git-repo-check-with ()
{
    local arg1=$1
    if [[ $arg1 =~ ^--def ]]; then
        shift
        local branch_name
        # shellcheck disable=SC2119 #https://github.com/koalaman/shellcheck/wiki/SC2119
        branch_name=$(git-repo-default-branch)
        ## clone-and-fork repos need to check with the default branch in the
        ## canonical upstream branch.  If there is no 'upstream', then it's
        ## probably a clone only, so check against the default branch in
        ## origin.
        local status
        local upstream
        upstream=$(git remote get-url upstream 2>/dev/null)
        if [[ -n "${upstream}" ]]; then
            cmd-echo --id git-repo -- "checking with branch '${branch_name}' in upstream '${upstream}'"
            git-check-with-remote --remote upstream --branch "$branch_name" "$@"
            status=$?
        else
            local origin
            origin=$(git remote get-url origin 2>/dev/null)
            if [[ -n "${origin}" ]]; then
                cmd-echo --id git-repo -- "checking with branch '${branch_name}' in origin '${origin}'"
                git-check-with-remote --remote origin --branch "$branch_name" "$@"
                status=$?
            else
                cmd-echo --id git-repo --ec -- "Current repo is not a clone of a remote"
                false; status=$?
            fi
        fi
    else
        git-check-with-remote "$@"
        status=$?
    fi
    return $status
}

git-repo-current-branch ()
{
    local warn=1
    if [[ $1 == '--no-warn' ]]; then
        warn=0
        shift
    fi

    if [[ -n $1 ]]; then
        cmd-echo --id git-repo --ec -- "Cannot set current branch yet"
        false; return
    else
        local cb
        cb=$($REALGIT branch --show-current)
        if [[ -z $cb ]]; then
            ((warn)) && cmd-echo --id git-repo --wc -- "--show-current can't find current branch. Are you in a rebase? Falling back to alt method"
            cb=$($REALGIT branch --color=never --contains HEAD | grep '(no branch, rebasing' | sed 's/.* \(.*\))/\1/')
            if [[ -z $cb ]]; then
                ((warn)) && cmd-echo --id git-repo --ec -- "Cannot get current branch"
                false; return
            fi
        fi
        echo "$cb"
    fi
    true
}

git-repo-show-current-branch ()
{
    git-repo-current-branch "$@"
}

# shellcheck disable=SC2120 #https://github.com/koalaman/shellcheck/wiki/SC2120
git-repo-default-branch ()
{
    if [[ -n $1 ]]; then
        cmd-echo --id git-repo --ec -- "Cannot set default branch yet"
        false; return
    fi
    local base_repo
    for base_repo in "$(git-repo-is_worktree of)" "$(git root)"; do
        [[ -n $base_repo ]] && break
    done;
    [[ -z $base_repo ]] && { false; return; }
    local default_branch
    local src
    ## The first file is for repos that are clones. The second is for repos
    ## that were never cloned, but instantiated locally.
    for src in "$base_repo"/.git/refs/remotes/origin/HEAD "$base_repo"/HEAD; do
        [[ -r $src ]] && default_branch=$(sed 's/.*\///' < "$src")
    done
    if [[ -n $default_branch ]]; then
        echo "$default_branch"
        true
    else
        cmd-echo --id git-repo --ec -- "Cannot find default branch for ${PWD}"
        false
    fi
}

git-repo-show-default-branch ()
{
    git-repo-default-branch
}

git-repo-delete ()
{
    local current=0
    local dirmode=''
    [[ -z $1 ]] && git-usage "$0" && { false; return; }
    if [[ $1 = '--pwdmode' ]] \
           || [[ $1 =~ ^--curr ]] \
           || [[ $1 == '-c' ]] \
           || [[ $1 == '.' ]]; then
        current=1
        shift
    elif [[ $1 = '--dirmode' ]]; then
        dirmode=$2
        shift
        shift
    elif [[ -n $1 ]]; then
        dirmode=$1
        shift
    fi

    # If we were given '.', then we are really doing --current.
    if [[ -n $dirmode ]] && [[ ${PWD} = $(realpath "$dirmode") ]]; then
        current=1
        dirmode=''
    fi

    local repo
    local returnpath
    returnpath=$(realpath "${PWD}")

    if [[ -n "$dirmode" ]]; then
        ## We were given the directory containing the repo
        builtin cd "$dirmode" || { cmd-echo --id git-repo "Cannot cd $dirmode"; false; return; }
        local root_or_err
        root_or_err="$(git root 2>&1)"
        local status=$?
        if ((status!=$(true; echo $?))); then
            cmd-echo --id git-repo -- "$root_or_err"
            builtin cd "$returnpath" || { cmd-echo --id git-repo "Cannot cd $returnpath"; false; return; }
            return $status
        else
            builtin cd "$root_or_err" || { cmd-echo --id git-repo "Cannot cd $root_or_err"; false; return; }
        fi
    elif ((!current)); then
        ## Then we were given a local repo URL; find it and go there
        local githost=$1;shift
        local namespace=$1;shift
        repo=$1;shift

        local githost_url
        local noop
        read -r githost noop noop noop < <(git utils decode-url "$githost")
        githost_url=$(git kv --get "svcs.$githost")
        if [[ -z "$githost_url" ]]; then
            cmd-echo --id git-repo -- "$githost is unknown. Valid githosts are:$(git kv --key-only --section serverid)"
            false; return
        fi

        ## Go to what we want to whack, to make sure it's there.
        git go "$githost/$namespace/$repo" || return ## If the git go fails, we
        ## should see error
        ## messages, no need to do
        ## anything else.
    else # we were told to delete the directory/repo we are currently in
        if [[ -z $GIT_DISPATCHER ]]; then
            git-dispatch-warning "git-repo delete --current"
        fi
    fi

    ## At this point, we are in the directory we are going to delete. We can
    ## determine the repo.
    repo=$(basename "$(realpath "${PWD}")")

    (
        ## Subshell to allow cding around to be handled gracefully at the end

        ## Make sure it's clean
        if [[ -d wt ]] && (($(find wt | wc -l) > 1)); then
            cmd-echo --id git-repo "worktrees directory not empty:"
            ls -la wt
            cmd-echo --id git-repo
            cmd-echo --id git-repo "Will not delete repo"
            false; return
        fi

        dirty=$(git status --porcelain)
        if [[ -n "$dirty" ]]; then
            git status
            cmd-echo --id git-repo
            cmd-echo --id git-repo "Will not delete current repo"
            false; return
        fi

        builtin cd .. || { cmd-echo --id git-repo "Cannot cd .."; false; return; }
        command rm -rf "$repo" || return ## If the rm fails, we should see error
        ## messages, no need to add more.

        cmd-echo --id git-repo "Done. Not touching remote repo. Resetting git list..."
        ## Remove the just-deleted repo from the list of local git repos.
        git go-set

        true
    )

    status=$?

    ## We were in some dir or the deleted repo. If the latter, then go up the
    ## tree until we find someplace to return to.
    while [[ ! -d "$returnpath" ]] && [[ ! "$returnpath" = '/' ]]; do
        returnpath="$(dirname "$returnpath")"
    done

    ## Go there.
    if [[ ! "$returnpath" = '/' ]]; then
        builtin cd "$returnpath" || { cmd-echo --id git-repo "Cannot cd $returnpath"; false; return; }
    else
        builtin cd ~ || { cmd-echo --id git-repo "Cannot cd ~"; false; return; }
    fi

    ## Feed "there" back to the git function to make it stick.
    if [[ -n "$doandcdfile" ]]; then
        echo "dirlist ${PWD}" > "$doandcdfile"
        cmd-echo --id git-repo -n -- "Done. "
    fi

    return $status
}

git-repo-del ()
{
    git-repo-delete "$@"
}

git-repo-diff ()
{
    local moreopts=1
    local nocolor=0
    local name_only=0
    local exclude=''
    local side_by_side='-u'
    local edit=0
    while [[ "$1" =~ ^- ]] && ((moreopts)); do
        local original="$1"
        shift
        local option
        option=$(dashstripper "$original")
        ## This bit deals with --foo=bar instead of --foo bar
        local okey=''
        local ovalue=''
        ## but only deal with it if we really have an option. Otherwise you
        ## misinterpret items like this git clone option: --config
        ## "remote.origin.fetch=+refs/pull/*/head:refs/remotes/origin/pr/*'
        if [[ $option =~ ^- ]]; then
            if [[ "$option" =~ = ]]; then
                okey=${option%%=*}
                ovalue=${option#*=}
                option="$okey"
            fi
        fi

        case $option in
            nocolor)
                nocolor=1 ;;
            exclude)
                exclude=${ovalue:-$1}; [[ -z "$ovalue" ]] && shift ;;
            side-by-side)
                side_by_side='-y --suppress-common-lines';;
            edit)
                edit=1 ;;
            name-only | \
                names-only | \
                l)
                name_only=1;;
            --)
                moreopts=0
                ;;
            * )
                cmd-echo --id git-repo -- "$original is an invalid option. See $0 --help"
                false; return
                ;;
        esac
    done

    local -A repo
    if [[ -n "$2" ]]; then
        repo[left]=$(realpath "$1")
        repo[right]=$(realpath "$2")
    elif [[ -n "$1" ]]; then
        repo[left]=${PWD}
        repo[right]=$(realpath "$1")
    else
        cmd-echo --id git-repo -- "Need at least one directory"
        git-usage "$0"; false; return
    fi

    if [[ "${repo[left]}" = "${repo[right]}" ]]; then
        cmd-echo --id git-repo -- "Other dir is this dir. Whoops! Bye."
        false; return
    fi

    local -A list
    list[left]=$(mktempfile -+left)
    list[right]=$(mktempfile -+right)
    rm-on-exit "${list[left]}" "${list[right]}"

    # Get lists of files from each repo
    local which
    local -A leftfiles
    local -A rightfiles
    for which in left right; do
        perl -e 'chdir $ARGV[0];
                          print qx(git ls-files)' "${repo[$which]}" > "${list[$which]}"
        if [[ -n "$exclude" ]]; then
            grep -v "$exclude" "${list[$which]}" > "${list[$which]}.filt"
            mv "${list[$which]}.filt" "${list[$which]}"
        fi
        local line
        local key
        while IFS='' read -r line || [[ -n "$line" ]]; do
            ## Because for some unknown reason a directory spec with a '/' in it
            ## was giving me some weird error.
            key=${line//\//%2F}

            ## Yes, there's some indirect referencing here. Not my fault there are
            ## no multi-level arrays/hashes in bash.
            eval "${which}files[$key]=${repo[$which]}/$line"
        done < "${list[$which]}"
    done

    local -A missingright
    for key in "${!leftfiles[@]}"; do
        if [[ -z "${rightfiles[$key]}" ]]; then
            missingright[$key]=${key//%2F/\/}
            unset "leftfiles[$key]"
        fi
    done
    if [[ "${#missingright[@]}" != '0' ]]; then
        if ((name_only)); then
            cmd-echo --id git-repo -- "These files do not exist in ${repo[right]}" "${missingright[@]}"
        else
            cmd-echo --id git-repo -- "These files do not exist in ${repo[right]}" "${missingright[@]}"
        fi
    fi

    local -A missingleft
    for key in "${!rightfiles[@]}"; do
        if [[ -z "${leftfiles[$key]}" ]]; then
            missingleft[$key]=${key//%2F/\/}
            unset "rightfiles[$key]"
        fi
    done
    if [[ "${#missingleft[@]}" != '0' ]]; then
        if ((name_only)); then
            cmd-echo --id git-repo -- "These files do not exist in ${repo[left]}" "${missingleft[@]}"
        else
            cmd-echo --id git-repo -- "These files do not exist in ${repo[left]}" "${missingleft[@]}"
        fi
    fi

    local -a editable
    for key in "${!leftfiles[@]}"; do
        local output
        local leftf
        leftf=${leftfiles["$key"]}
        local rightf=${rightfiles["$key"]}
        output=$(diff -q "$leftf" "$rightf" 2>&1 | grep -v 'Common subdirectories')
        if [[ -n "$output" ]]; then
            if ((name_only)); then
                echo "$leftf" "$rightf"
            elif ((edit)); then
                editable+=("$leftf" "$rightf")
            else
                cmd-echo --id git-repo -- '-----'
                local diffcmd
                diffcmd=$(which colordiff 2>/dev/null)
                # shellcheck disable=SC2209 #https://github.com/koalaman/shellcheck/wiki/SC2209
                # We don't want to run diff, just prepare the command
                ( [[ -z "$diffcmd" ]] || ((nocolor)) ) && diffcmd=diff
                $diffcmd "$side_by_side" "${leftf}" "${rightf}"
                echo
            fi
        fi
    done

    if (( ${#editable[@]} )); then
        if [[ -z "$EDITOR" ]]; then
            cmd-echo --id git-repo -- "No EDITOR env variable found"
            false; return
        else
            $EDITOR "${editable[@]}"
            return
        fi
    fi

    true
}


git-repo-is ()
{
    local verbose=0
    if [[ "$1" =~ -v ]]; then
        verbose=1
        shift
    fi
    [[ "$1" ]] && [[ $1 != . ]] && { builtin cd "$1" || return; }
    git rev-parse --show-toplevel 2>/dev/null 1>&2
    declare status=$?
    [[ "$1" ]] && [[ $1 != . ]] && { builtin cd -    || return; }
    (( verbose )) && ( (( status )) && echo false || echo true )
    return $status
}

git-repo-isa () { git-repo-is "$@"; }
git-repo-ina () { git-repo-is; }

git-repo-is_clean ()
{
    (( $(git st --porcelain | grep -cv '??') == 0 ))
}

git-repo-is_spotless ()
{
    git-repo-is_pristine "$@"
}

git-repo-is_pristine ()
{
    (( $(git st --porcelain | wc -l) == 0 )) \
        && ( git worktree ina || (( $(git worktree list | wc -l) == 1 )) ) \
        && { true; return; }
    if [[ $1 == '-v' ]]; then
        (( $(git st --porcelain | wc -l) != 0 )) && git status
        if ! git worktree ina && (( $(git worktree list | wc -l) != 1 )); then
            echo Found worktrees:
            git worktree list | tail -n +2 # Do not print the root repo for the
            # worktrees, which is always the
            # first entry of the wt list
            # command.
        fi
    fi
    false
}

git-repo-is_up_to_date ()
{
    local branch_status
    branch_status=$(git status | grep 'Your branch is')
    local verbose=0
    if [[ "$1" =~ -v ]]; then
        echo "$branch_status"
    fi
    if [[ -z $branch_status ]] || [[ $branch_status =~ 'Your branch is up to date' ]]; then
        true
    else
        false
    fi
    return
}

git-repo-is_fork ()
{
    local print=0
    if [[ $1 == '--print' ]] || [[ $1 == 'of' ]]; then
        shift
        print=1
    fi
    (
        # shellcheck disable=SC2164 #https://github.com/koalaman/shellcheck/wiki/SC2164
        builtin cd "${1:-.}" # so that the git remote works on the current dir as well
        # as a specified repo dir
        local origin
        local fork_of=''
        origin=$(git remote get-url origin)
        if [[ -n $origin ]]; then
            local server=${origin%%:*}
            local repo_path=${origin##*:}
            fork_of=$(perl -e'
use JSON::PP::Boolean;
our $VAR1;
eval "@ARGV";
$VAR1->{parent} && print $VAR1->{parent}{full_name};
' "$( github-api --silent --server "$server" --perl-data url repos/"$repo_path")")
        fi
        ((print)) && [[ -n "$fork_of" ]] && echo "$fork_of"
        [[ -n "$fork_of" ]] ## return value
    )
}

git-repo-is_worktree ()
{
    if [[ -f $(git root)/.git ]]; then
        if [[ $1 == 'of' ]]; then
            realpath "$(git root)/$(sed 's/gitdir: \(.*\)\/\.git\/.*/\1/' < "$(git root)/.git")"
        fi
        true
    else
        false
    fi
}

git-repo-is_openpr ()
{
    git fetch
    local server upstream_namespace origin_namespace repo current_branch
    local -A namespaces

    server=$(git-get-default-remote --server)

    upstream_namespace=$(git-repo-is_fork of | sed 's/\/.*//')
    [[ -n $upstream_namespace ]] && namespaces["$upstream_namespace"]=1

    origin_namespace=$(git-get-default-remote --namespace)
    namespaces["$origin_namespace"]=1

    repo=$(git-repo-name)
    current_branch=$(git-repo-current-branch)

    local -a output
    for tgt_namespace in "${!namespaces[@]}"; do
        local tmpfile;
        tmpfile=$(mktempfile)
        rm-on-exit "$tmpfile"
        github-api --server "$server" --perl-data pulls "$tgt_namespace/$repo" > "$tmpfile"
        local tmpout
        tmpout=$(perl -e '
do $ARGV[0];
for $entry (@$VAR1) {
    if ( $entry->{user}->{login} eq $ENV{USER}
         &&
         $entry->{head}->{ref} eq $ARGV[1] ) {
        print($entry->{_links}->{html}->{href});
    }
}
' "$tmpfile" "$current_branch")
        [[ -n $tmpout ]] && output+=("$tmpout")
    done
    if [[ "${#output[@]}" == '0' ]]; then
        echo "No open pull requests"
        false; return
    else
        for o in "${output[@]}"; do
            echo "$o"
        done
        true; return
    fi
}

git-repo-info ()
{
    cmd-echo --id git-repo --title "Configs:"

    local -a lines
    local cb; cb="$(git-repo-current-branch)"
    local wt; wt="$(git worktree ina -v)"

    mapfile                 -t                 lines < <(git config --get-regexp "${GIT_EXT_META_PREFIX}\." | sort)
    [[ -n $cb ]] && mapfile -t -O ${#lines[@]} lines < <(git config --get-regexp "branch.${cb}\." | sort)
    [[ -n $wt ]] && mapfile -t -O ${#lines[@]} lines < <(git config --get-regexp "worktree.${wt}\." | sort)
    mapfile                 -t -O ${#lines[@]} lines < <(git config --get-regexp "remote\.*\.url" | sort)

    # Figure out the max length for column spacing.
    local -a display
    local key
    local value
    local max
    for line in "${lines[@]}"; do
        read -r key value <<< "$line"
        [[ $key =~ ${GIT_EXT_META_PREFIX}-pr ]] && continue
        (( ${#key} > max )) && max=${#key}
        display+=("$key" "$value")
    done
    ((max+=1))
    if [[ $1 != '--no-pulls' ]]; then
        key="Latest pull request"
        (( ${#key} > max )) && max=${#key}
    fi

    # Print everything but the pull info. BASH printf automatically loops over
    # the data, applying to the format repeatedly until exhausted.
    printf "%-${max}s: %s\n" "${display[@]}"

    # Now get any pull info and print it.
    if [[ $1 != '--no-pulls' ]]; then
        local pr_data
        if pr_data=$(git-repo-pr-get "$1"); then
            value="$pr_data"
        else
            value="None found for this repo/branch."
        fi
    fi
    printf "%-${max}s: %s\n" "$key" "$value"
}

git-repo-name ()
{
    name=$(git remote -v 2>/dev/null | grep origin | sed -e 's|.*/||' -e 's/ .*//' | sort -u)
    if [[ -n "$name" ]]; then
        echo "$name"
        true
    else
        false
    fi
}

# shellcheck disable=SC2120 #https://github.com/koalaman/shellcheck/wiki/SC2120
git-repo-org ()
{
    [[ "$1" ]] && [[ $1 != . ]] && { builtin cd "$1" || return; }
    name=$(git remote -v 2>/dev/null | grep origin |  sed -e 's/.*://' -e 's/\/.*//' | sort -u)
    [[ "$1" ]] && [[ $1 != . ]] && { builtin cd - || return; }
    [[ -z "$name" ]] && { false; return; }
    echo "$name"
    true
}

_git-repo-pr-get-lookup-pr-state ()
{
    local pullId=${1##*/}
    local remote_svc=$2
    local remote_repo=$3
    local -n pr_state=$4
    local -n pr_timestamp=$5
    local -n pr_title=$6
    local jsondata; jsondata=$(mktempfile git-repo-pr-get.jsondata)
    rm-on-exit "$jsondata"
    github-api --stream-data --server "$remote_svc" --pull "$pullId" pulls "$remote_repo" > "$jsondata"
    pr_state=$(jq -r .state "$jsondata")
    pr_title=$(jq -r .title "$jsondata")
    if [[ $pr_state == 'closed' ]]; then
        local merged; merged=$(jq -r .merged "$jsondata")
        if [[ $merged == 'true' ]]; then
            pr_state='merged'
            pr_timestamp=$(jq -r .merged_at "$jsondata")
        else
            pr_timestamp=$(jq -r .closed_at "$jsondata")
        fi
    else
        # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
        # https://github.com/koalaman/shellcheck/issues/817
        pr_timestamp=$(jq -r .updated_at "$jsondata")
    fi
}

declare PR_CACHE_VERSION='2' # also in git-repo-pr-store

git-repo-pr-get ()
{
    local OPTSARGS
    local shortopts=''
    local longopts='open,closed,merged,silent,refresh,update,remote:'

    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@") || return

    eval set -- "$OPTSARGS"

    local opt_match_state;
    local opt_print=1
    local opt_refresh=0
    local -a remotes
    while true; do
        local option=$1
        shift
        [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
        case "$option" in
            silent ) opt_print=0;;
            refresh | update ) opt_refresh=1;;
            open | merged | closed ) opt_match_state=$option;;
            remote )
                remotes=("$1"); shift;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
            ## remaining $*, if any, are args
            *)
                cmd-echo --id git-repo -ec -- "$option is an invalid option. See $0 --help"
                false; return
                ;;
        esac
    done

    remotes+=(upstream origin)
    local remote
    local remote_url
    for remote in "${remotes[@]}"; do
        remote_url=$(git config --get "remote.${remote}.url")
        if [[ -n "$remote_url" ]]; then
            if [[ "$remote_url" =~ ^http(s)? ]];
            then
                # shellcheck disable=SC2183 #https://github.com/koalaman/shellcheck/wiki/SC2183
                # The call returns enough strings to satisfy the printf
                # shellcheck disable=SC2046 #https://github.com/koalaman/shellcheck/wiki/SC2046
                # We need word slpitting from the call to get the three strings
                remote_url=$(printf "%s:%s/%s" $(git utils decode-http "$remote_url"))
            fi
            break
        fi
    done
    if [[ -z "$remote_url" ]]; then
        cmd-echo --id git-repo -ec -- "Cannot find any remotes in '${remotes[*]}' to check for pull requests"
        false; return
    fi
    local remote_svc=${remote_url%:*}
    local remote_repo=${remote_url#*:}

    #
    # See if we have cached it.
    #
    local pr_url
    local pr_state
    local pr_date
    local pr_title

    local pr_cache_url
    local pr_cache_state
    local pr_cache_date
    local pr_cache_title
    local pr_cache_as_of
    local pr_cache_version

    local wt; wt=$(git worktree ina -v)
    local cb; cb=$(git-repo-current-branch)

    if ((opt_refresh==0)); then
        _git-repo-pr-retrieve pr_cache_url pr_cache_state pr_cache_date pr_cache_title pr_cache_as_of pr_cache_version
        # else we don't get any data, which causes cached to be set to no later.
        # _git-repo-pr-retrieve passes data back using args-by-ref
    fi

    local cached
    if [[ -z $pr_cache_as_of ]] || \
           [[ -z $pr_cache_state ]] || \
           [[ -z $pr_cache_date ]] || \
           [[ -z $pr_cache_title ]] || \
           [[ -z $pr_cache_version ]] || \
           [[ ! $pr_cache_version == "$PR_CACHE_VERSION" ]] || \
           [[ $pr_cache_state == 'CREATING' ]]
    then
        cached='no'
    else
        local cache_date; cache_date=$(_git-repo-date-to-epoch "${pr_cache_as_of}")
        local now; now=$(_git-repo-date-to-epoch "$(date "$GIT_EXT_META_DATE_FMT")")

        ## Six hour cache
        if ((now - cache_date < 86400/4)); then
            cached='yes'
        else
            cached='expired'
        fi
    fi

    if [[ $cached == 'yes' ]]; then
        pr_date=$pr_cache_date
        pr_title=$pr_cache_title
        [[ $pr_cache_url == 'NOOPENPR' ]] && pr_date=$pr_cache_as_of
        pr_url=$pr_cache_url
        pr_state=$pr_cache_state
    elif [[ $cached == 'expired' ]]; then
        if [[ $pr_cache_url == 'NOOPENPR' ]]; then
            ## Need to see if one has been created.
            cached='no'
        else
            ## Let's try the inexpensive option of seeing if the state has
            ## changed.
            _git-repo-pr-get-lookup-pr-state "$pr_cache_url" "$remote_svc" "$remote_repo" pr_now_state pr_now_date pr_now_title
            # shellcheck disable=SC2154 #https://github.com/koalaman/shellcheck/wiki/SC2154
            # pr_now_* set via args-by-ref call above
            if [[ $pr_now_state == "$pr_cache_state" ]]; then
                # updates the cache date, keeps url, state and title the same.
                git-repo-pr-store "$pr_cache_url" "$pr_now_state" "$pr_now_date" "$pr_now_title"
                pr_url="$pr_cache_url"
                pr_state="$pr_now_state"
                pr_date="$pr_now_date"
                pr_title="$pr_now_title"
            elif [[ $pr_cache_state == 'open' ]]; then
                # The pr is now is closed or merged. Still might be the latest
                # one but we don't know, so we have to check.
                cached='no'
            fi
        fi
    fi

    if [[ $cached == 'no' ]]; then
        local perldata; perldata=$(mktempfile -+perldata)
        rm-on-exit "$perldata"
        ## TODO: Update github-api to take --date-limit instead of --page-limit
        ## local max_back_date; max_back_date=$(_git-repo-get-wt-or-br-create-date)
        ## --date-limit body->created_at YYYY-MM-DDTHH:MM:SS
        github-api --page-limit 5 --stream-data --perl-data --server "$remote_svc" pulls "$remote_repo" >> "$perldata"
        local corg; corg=$(git-repo-org)
        local -a pr_now
        local -a debug=()
        ## debug=(-d:ptkdb -MData::Dumper) ## no-ptkdb-issue
        read -r -a pr_now < <(perl "${debug[@]}" -e '
## Gets the latest (because the data is sorted newest to oldest) pull request
## for this branch on this org.
## $ARGV[0] - file with perl data, sorted newest to oldest. No "merged" state flags
##            in this dataset, figure it out from the closed/merged times.
## $ARGV[1] - org
## $ARGV[2] - current branch name
use lib $ENV{PERSONALLIB};
use Misc qw(UNIX_TRUE UNIX_FALSE);
do $ARGV[0];
for $pull (@{$VAR1}) {
    my %pullinfo;
    @pullinfo{qw(org label id)} = (
        split(/:/,$pull->{head}{label}),
         "pull-$pull->{number}");
    if ($pullinfo{org} eq $ARGV[1]
        and ( $ARGV[2] eq $pullinfo{label}
              or
              $ARGV[2] =~ m/$pullinfo{id}/) ) {
        @pullinfo{qw(state date)} =
            (defined($pull->{merged_at})
             ? ( "merged", $pull->{merged_at})
             : (defined($pull->{closed_at})
                ? ( "closed", $pull->{closed_at})
                : ( "open", $pull->{updated_at})
               )
             );
        print join(q( ),
                      $pull->{html_url},
                      $pullinfo{state},
                      $pullinfo{date},
                      $pull->{title},
                  ), qq(\n);
        exit UNIX_TRUE;
    }
}
exit UNIX_TRUE;' "$perldata" "$corg" "$cb")
        if [[ -z ${pr_now[0]} ]]; then
            if [[ $pr_cache_state == 'CREATING' ]]; then
                # Bail. Don't write anything. Keep looking every time we are
                # called until a PR is created.
                false; return
            fi
            # Cache the no
            git-repo-pr-store --noopenpr
            false; return
        else
            ## Cache the PR and its state
            git-repo-pr-store "${pr_now[@]}"
            pr_url=${pr_now[0]}
            pr_state=${pr_now[1]}
            pr_date=${pr_now[2]}
            pr_title="${pr_now[*]:3}"
        fi
    fi

    if [[ $pr_url == "NOOPENPR" ]]; then
        ((opt_print)) && echo "None, as of $pr_date"
        false; return
    fi
    if [[ -z $opt_match_state ]]; then
        # You effectively asked for the latest PR available, so we give
        # you the state of it with the URL.
        [[ $pr_state == 'open' ]] && pr_state="open, last updated"
        if [[ $cached == 'yes' ]]; then
            cached=", cached"
        else
            cached=''
        fi
        ((opt_print)) && echo "${pr_state^} $pr_date${cached} - [${pr_title}](${pr_url})"
    else
        if [[ $opt_match_state == "$pr_state" ]]; then
            # You asked for a particular state, and we matched it, but you
            # specified the state, you probably don't want it (and all the
            # other info) coming back at you so that you have to get rid of it
            # to use the url, so we just print the url.
            ((opt_print)) && echo "$pr_url"
        else
            # We didn't find a match
            false; return
        fi
    fi
    true
}

_git-repo-pr-retrieve ()
{
    local -n _pr_url=$1
    local -n _pr_state=$2
    local -n _pr_date=$3
    local -n _pr_title=$4
    local -n _pr_cache_as_of=$5
    local -n _pr_cache_version=$6
    local wt; wt=$(git worktree ina -v)
    local cb; cb=$(git-repo-current-branch)
    _pr_url=$(git config --get "worktree.${wt}.${GIT_EXT_META_PREFIX}-pr")
    if [[ -n $_pr_url ]]; then
        _pr_state=$(git config --get "worktree.${wt}.${GIT_EXT_META_PREFIX}-pr-state")
        _pr_date=$(git config --get "worktree.${wt}.${GIT_EXT_META_PREFIX}-pr-date")
        _pr_title=$(git config --get "worktree.${wt}.${GIT_EXT_META_PREFIX}-pr-title")
        _pr_cache_as_of=$(git config --get "worktree.${wt}.${GIT_EXT_META_PREFIX}-pr-cache-as-of")
        _pr_cache_version=$(git config --get "worktree.${wt}.${GIT_EXT_META_PREFIX}-pr-cache-version")
    else
        _pr_url=$(git config --get "branch.${cb}.${GIT_EXT_META_PREFIX}-pr")
        if [[ -n $_pr_url ]]; then
            _pr_state=$(git config --get "branch.${cb}.${GIT_EXT_META_PREFIX}-pr-state")
            _pr_date=$(git config --get "branch.${cb}.${GIT_EXT_META_PREFIX}-pr-date")
            _pr_title=$(git config --get "branch.${cb}.${GIT_EXT_META_PREFIX}-pr-title")
            _pr_cache_as_of=$(git config --get "branch.${cb}.${GIT_EXT_META_PREFIX}-pr-cache-as-of")
            _pr_cache_version=$(git config --get "branch.${cb}.${GIT_EXT_META_PREFIX}-pr-cache-version")
        fi
    fi
}

git-repo-sync ()
{
    git-repo-sync-with "$@"
}

git-repo-sync-with ()
{
    local arg1=$1
    if [[ -z $arg1 ]]; then
        local deftext='source'
        local branch_name
        branch_name=$(git-repo-source-branch)
        if [[ -z $branch_name ]]; then
            deftext="default"
            branch_name=$(git-repo-default-branch)
        fi
        ## clone-and-fork repos need to sync with the default branch in the
        ## canonical upstream branch.  If there is no 'upstream', then it's
        ## probably a clone only, so sync against the default branch in origin.
        local status
        local upstream
        upstream=$(git remote get-url upstream 2>/dev/null)
        if [[ -n "${upstream}" ]]; then
            cmd-echo --id git-repo -- "syncing with ${deftext}branch '${branch_name}' in upstream '${upstream}'"
            git-sync-with-remote --remote upstream --branch "$branch_name" "$@"
            status=$?
        else
            local origin
            origin=$(git remote get-url origin 2>/dev/null)
            if [[ -n "${origin}" ]]; then
                cmd-echo --id git-repo -- "syncing with ${deftext}branch '${branch_name}' in origin '${origin}'"
                git-sync-with-remote --remote origin --branch "$branch_name" "$@"
                status=$?
            else
                cmd-echo --id git-repo --ec -- "Current repo is not a clone of a remote"
                status=1
            fi
        fi
    else
        git-sync-with-remote "$@"
        status=$?
    fi
    return $status
}

git-repo-prune()
{
    git-repo-purge "$@"
}

git-repo-purge()
{
    local -a repos
    repos=("$@")
    [[ -z ${repos[0]} ]] && readarray -t repos < <(git go --listfull --nowt)
    local repo
    for repo in "${repos[@]}"; do
        (
            builtin cd "$repo" || { true; exit; }
            cmd-echo --id git-repo -- "$repo"
            local ok_to_purge=1
            # shellcheck disable=SC2012 #https://github.com/koalaman/shellcheck/wiki/SC2012
            if [[ -d wt ]] && (($(ls wt | wc -l))); then
                local wt
                for wt in wt/*; do
                    local wtrp
                    wtrp=$(realpath "$wt")
                    git wt purge "$wtrp"
                    [[ -d $wtrp ]] && ok_to_purge=0
                done
            fi
            git-repo-pr-get --open \
                && ok_to_purge=0 ## func returns success if it finds a open PR,
            ## in which case we can't purge it.
            ! git-repo-is_pristine -v && ok_to_purge=0
            if ((ok_to_purge)); then
                resp=$(cmd-yesno --id git-repo -dc "Repo is pristine. Delete it" n)
                [[ $resp == 'y' ]] && git-repo-delete --current --yes
                echo
            fi
        )
    done
}

git-repo-reset ()
{
    git-repo-restore "$@"
}

git-repo-revert ()
{
    git-repo-restore "$@"
}

git-repo-restore ()
{
    cmd-echo --id git-repo "Cleaning..."
    git dorealclean

    cmd-echo --id git-repo "Unstaging..."
    local -a files
    readarray -t files < <(git is committable)
    git reset HEAD -- "${files[@]}"

    cmd-echo --id git-repo "Uncheckouting..."
    readarray -t files < <(git is modified)
    git checkout -- "${files[@]}"

    cmd-echo --id git-repo "Status..."
    git status

}

git-repo-tags ()
{
    git tag --list --sort=v:refname
}

git-repo-source-branch ()
{
    local current_branch
    current_branch=$(git-repo-current-branch)

    local source_branch
    source_branch=$(git config --get "branch.$current_branch.${GIT_EXT_META_PREFIX}-from-branch")
    [[ -n $source_branch ]] && echo "$source_branch" && { true; return; }
    false
}

git-repo-show-source-branch ()
{
    git-repo-source-branch
}

git-repo-named-branches ()
{
    local verbose=''
    if [[ $1 == -v ]]; then
        verbose=$1;
        shift
    fi

    if [[ -z $1 ]]; then
        git-repo-using-named-branches "$verbose"
        return
    fi

    if [[ ! $1 =~ ^(true|false)$ ]]; then
        cmd-echo --id git-repo --ec -- "${FUNCNAME[0]}: $1 is not 'true' or false"
        false; return
    fi
    git config --type bool --replace-all "${GIT_EXT_META_PREFIX}.named-branches" "$1"
}

git-repo-using-named-branches ()
{
    local value; value=$(git config --type bool --get "${GIT_EXT_META_PREFIX}.named-branches")
    local varset='unset'
    [[ -n $value ]] && varset='set'
    value=${value:-false}
    [[ $1 == -v ]] && echo "$value ($varset)"
    "${value}"
}

main()
{
    local action=$1

    if [[ "$action" =~ --doandcd ]]; then
        doandcdfile=$2
        shift; shift;
        action=$1
    fi

    if [[ "$action" =~ ^-+h ]]; then
        git-usage "$0"
        true; return
    fi
    if [[ $action = 'is' ]]; then
        [[ "$2" = 'a' ]] && shift
        if [[ -n $2 ]]; then
            shift
            action="${action}_${1//-/_}"
        fi
    fi

    case $action in
        status | st ) action=info;;
        del ) action=delete;;
    esac

    action_func_name="git-repo-${action}"
    if declare -F "$action_func_name" >/dev/null; then
        shift ## the $action
        "$action_func_name" "$@"
    else
        case $action in
            * )
                cmd-echo --id git-repo --ec --id git-repo -- "unknown git repo action '$action'"
                false; return
                ;;
        esac
    fi
}

main "$@"
exit
echo "$noop" > /dev/null # in lieu of shellcheck 2034

:<<'__PODUSAGE__'
=head1 NAME

git-repo - act on or interrogate the current repo

=head1 SYNOPSIS

 x - not doc'ed and not code in order
 o - doc'ed but not code in order
 n - not doc'ed but code in order
   - doc'ed and code in order

 n git-repo check
 n git-repo current-branch
 n git-repo default-branch
   git-repo del[ete]
 o git-repo diff
   git-repo is
   git-repo ina
   git-repo info|st[atus]
   git-repo name
 o git-repo named-branches
 n git-repo org
   git-repo pr-get
 o git-repo reset/revert/restore
 x git-repo source-branch
   git-repo sync
   git-repo tags

o git-repo purge/prune [repo-dir [repo-dir]... ]

 DESCRIPTION

A collection of actions and data about the current repository.

=head1 ACTIONS

=over 4

=item delete

 git repo delete [--current | repo-dir]

Mostly used with --current, deletes the repo, checking for worktrees and uncommitted changes first, maintains the 'git go' list...

=item diff

  git repo diff [--nocolor] \
                [ [--name[s]-only | -l ] | --edit ] \
                [--exclude path/to/exclude] \
                [src] tgt

Compare two repos on disk. If only one repo is specified, 'src' is taken as the
current directory, which should be a repo root.

If your intent is to try and copy the differences from one repo to another,
then, in the source repo that has the files you want to copy:

  while read from to; do
    cp -v $from $to
  done < <(git repo diff --name-only path/to/the/target/repo)

If you want to more carefully do such a copy, then use --edit to bring all the
files into your editor and use its diff and write facilities to Do The Right
Thing.

=item is

  git repo is [  a
               | a fork [of]
               | a worktree [of]
               | clean
               | [pristine|spotless]
               | up-to-date
              ] [repo-dir]

With no arguments, is the current directory a repo.

With a 'repo-dir' argument, work on that directory. Otherwise work on the current directory.

With 'a', is the current or specified directory a git repo.

With 'a fork', is the current or specified directory repo whose remote origin is, in turn, a fork of a remote repo.

With 'a fork of', print the repo it was forked from, if a fork.

With 'a worktree', is the current or specified directory repo a worktree.

With 'a worktree of', print the main worktree (from git init or git clone) for this linked worktree.

With 'clean', does the current or specified git repo have no edited tracked files.

With 'pristine|spotless', is the current or specified git repo 'clean' with no untracked files. If it is NOT a worktree, it is checked to make sure that it has no outsanding worktrees. '-v' will print why it is not pristine.

With 'up-to-date', is the current or specified git repo up to date with its remote branch. If there is no remote branch, the return is always true.

Note that 'pristine|spotless' and 'up-to-date' are unrelated. The branch can be 'up-to-date', yet have editable files.

=item info

Prints items that have been stashed in the config for the repo including branch
and worktree information, any PRs created with git push --pr and any reference
to the spec for this work, when prompted by git worktree create.

=item name

Print the name of the remote repo.

=item pr

  git repo pr --get [--silent] [--state] [--open|--closed|--merged]

Deal with pull requests related to the current repo. --get is limited to looking in the first ten pages of github api results.

=over 4

=item --get

Looks for an open or merged pull request for this branch against remotes 'upstream' and then 'origin'.

=item --silent

Will supress printing the PR reference so that you can just used the return value; 0 if there is a matching pull request, 1 if not.

=item --state

Print the state of the PR before the PR URL.

=item --open|--closed|--merged

Match this state of any PRs found.

=back

=item revert/reset/restore

Performs a realclean, resets all uncommitted changes.

=item sync

 --branch branch [--remote remote]

Run a 'git pull' against the --remote and --branch specified.

 --def[ault]

If --def or --default is specifed instead of --branch and --remote, then we use
that default branch of the repo as the branch name to sync against and we look
for that branch in the remotes 'upstream' and 'origin' in that order, using the
first one in which we find.

=item named-branches

With no arguments, tells you if this repo uses named branches or not. With an
argument of 'true' or 'false', set the repo's 'named-branches' attribute to
that value.

The attribute controls how 'git worktree' behaves. If the attibute has never
been set or is 'false', then 'git-worktree' will create branches and worktrees
named exactly as requested. If, however, the attribute is true, 'git worktree'
will ask to prepend your requested branch/worktree name with '$USER/'.

The attribute was developed for repos where the workflow was NOT to fork and
clone a repo to develop on it, but where the workflow was to develop in a
direct clone. Adding the user's name helps identify the branches.

=item purge/prune

This command is different. It does not work on the current repo. It loops over
a list of repos or, if no list is provided, all the repos. If a repo has
worktrees, it runs 'git worktree delete' on each one. If a repo has no open
pulls, no worktrees and is completely clean (as determined by 'git repo is
pristine'. no) then it prompts to accept deleting the repo.

**NOTE:** This probably belongs in git mono or a git repos command that would
  replace git mono. The git mono default of 'exec all of this for each repo'
  could be the --exec option of git repos.

=item tags

Show all the tags in ascending version order. Alias for

  git tag --list --sort=v:refname

=back

=cut

__PODUSAGE__

#  LocalWords:  fi
