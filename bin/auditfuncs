#!/usr/bin/env bash

# auditfuncs

# shellcheck disable=SC2120 #https://github.com/koalaman/shellcheck/wiki/SC2120
auditfuncs-init ()
{
    local funcfile=${BASH_SOURCE[1]}
    [[ -n "$1" ]] && funcfile=$1 ## to accomodate nests
    local bn
    local dn
    local audit_system
    local audit_system_file
    bn=$(basename "$funcfile")
    dn=$(dirname "$(realpath "$funcfile")")
    audit_system="$bn"
    audit_system_file="${dn}/../data/${bn}.audit.$(hostname)"

    ## cygwin does not grok "source /dev/stdin <<EOF"
    eval "
${audit_system}_audit ()
{
    [[ -n \"\$(set -o | grep xtrace | grep off)\" ]] && [[ ! \"\$1\" = '-na' ]] && echo \$(date +%Y_%m_%d_%H_%M_%S) \$(repl = \${#FUNCNAME[@]}) \${FUNCNAME[1]} \$@ >> $audit_system_file}
"
    safe_func_export "${audit_system}_audit"

    eval "
${audit_system}_script_audit ()
{
    [[ -n \"\$(set -o | grep xtrace | grep off)\" ]] && [[ ! \"\$1\" = '-na' ]] && echo \$(date +%Y_%m_%d_%H_%M_%S) \$(repl = \$((SHLVL-MASTER_SHLVL))) \${BASH_SOURCE[*]} \$@ >> $audit_system_file}
"
    safe_func_export "${audit_system}_script_audit"

    local funcfilebase
    funcfilebase=$(basename "$funcfile")
    funcfilebase=${funcfilebase//./_}
    eval "${funcfilebase^^}"_FILE="${funcfile}"
    export "${funcfilebase}"_FILE
    ! $CRON && [[ -n "$ALLFUNCS_PROFILE" ]] && \
        echo "$(date): $funcfile is running..."

}
auditfuncs-init
## We use this construction to find controlfuncs_build because we load this
## before we set up personal path stuff.
. "$(dirname "$AUDITFUNCS_FILE")"/controlfuncs_build "$AUDITFUNCS_FILE"

auditfuncs-end ()
{
    local funcfile=${BASH_SOURCE[1]}
    [[ -n "$1" ]] && funcfile=$1 ## to accommodate nests
    [[ -n "$ALLFUNCS_PROFILE" ]] && \
        echo "$(date): $funcfile has run." && echo
}

safe_func_export --file "$AUDITFUNCS_FILE"

auditfuncs-end "$AUDITFUNCS_FILE"
