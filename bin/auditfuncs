# -*- sh -*-

# auditfuncs

## Because we call this before all other *funcs, we predefine this utility here
## as well as in utilfuncs. Keep the two in sync.
if [ ! "$(type safe_func_export 2>/dev/null | head -1 | grep 'is a function')" = 'is a function' ]
then
    safe_func_export ()
    {
        [ -n "$SHELL" ] && [ $(basename $SHELL) = "bash" ] && export -f $1
    }
    safe_func_export safe_func_export
fi

AUDITFUNCS_FILE=${BASH_SOURCE[0]}

replm1() {
    local c=$1
    local n=$2
    ((n-=1))
    printf "$c"'%.s' $(eval "echo {1.."$(($n))"}");
}

auditfuncs_init ()
{
    local audit_system=$(basename $1 | tr '[A-Z]' '[a-z]')
    local audit_system_upper=$(basename $1 | tr '[a-z]' '[A-Z]')
    local audit_system_file="$1.audit.$(hostname)"

    ## cygwin does not grok "source /dev/stdin <<EOF"
    eval "
${audit_system}_audit ()
{
    echo \$(date +%Y_%m_%d_%H_%M_%S) \$(replm1 = \${#FUNCNAME[@]}) \${FUNCNAME[1]} \$@ >> $audit_system_file
}
"
}
auditfuncs_init $AUDITFUNCS_FILE

auditfuncs_edit ()
{
    auditfuncs_audit
    xo $AUDITFUNCS_FILE
}
safe_func_export auditfuncs_edit
## I used to define functions with '_' and aliases with '-' because the emacs
## modes that parse for functions to generate jump lists didn't see functions
## with '-' in their name. But since I've fixed that issue, I should go back
## and rename all these.
alias auditfuncs-edit=auditfuncs_edit

auditfuncs_reload ()
{
    auditfuncs_audit
    . $AUDITFUNCS_FILE
}
safe_func_export auditfuncs_reload
alias auditfuncs-reload=auditfuncs_reload
