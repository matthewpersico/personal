# -*- sh -*-
# shellcheck shell=bash

# git-branch

use mktemp
use on_exit

## Functions that encapsulate the enhanced functionality. main() is defined
## last and called last.
_git_branch_info_remove ()
{
    git config --remove-section "branch.$1"
}

_git_branch_info_add_created_date ()
{
    git config --replace-all "branch.$1.${GIT_EXT_META_PREFIX}-created" "$(date "$GIT_EXT_META_DATE_FMT")"
}

_git_branch_info_add_fetched_date ()
{
    git config --replace-all "branch.$1.${GIT_EXT_META_PREFIX}-fetched" "$(date "$GIT_EXT_META_DATE_FMT")"
}

_git_branch_was_fetched ()
{
    [[ -n $(git config --get "^branch.$1.${GIT_EXT_META_PREFIX}-fetched" 2>/dev/null) ]]
}

_git_branch_is_a_pull ()
{
    [[ $1 =~ ^pull ]]
}

git-branch-checkout ()
{
    echo "$(date): ${FUNCNAME[0]} $*" >> "$PERSONALDATA/$(basename "$0").audit"
    local tgt_branch=$1
    if [[ -z "$tgt_branch" ]]; then
        local PS3="Choose by number, q to quit: "
        select tgt_branch in $(git-branch --list --strip); do
            [[ "${REPLY,,}" = 'q' ]] && { false; return; }
            [[ -n "$tgt_branch" ]] && break
        done
    else
        shift
        if [[ "$(git-branch --list --strip "$tgt_branch")" != "$tgt_branch" ]]; then
            cmd-echo --id git-branch --ec -- "$tgt_branch does not exist to be checked out."
            false; return
        fi
    fi

    if (($#)); then
        cmd-echo --id git-branch --wc -- "arguments '$*' ignored"
    fi

    git checkout "$tgt_branch"
    _git_branch_info_add_created_date "$tgt_branch"

}

git-branch-delete ()
{
    local no_remote
    no_remote=0
    local opt_yes
    opt_yes=0
    local opt_force
    opt_force=0
    local do_go_set
    do_go_set=1
    local OPTSARGS
    local shortopts='yf'
    local longopts='yes,no-remote,declare-only,no-go-set,force'

    if ! OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@"); then
        git-usage "$0"
        false; return
    fi

    eval set -- "$OPTSARGS"
    while true; do
        local option=$1
        shift
        case "$option" in
            -y|--yes) opt_yes=1 ;;
            --no-remote|--declare-only) no_remote=1 ;;
            --no-go-set) do_go_set=0 ;;
            -f|--force) opt_force=1 ;;
            -h|--help) git-usage "$0"; true; return ;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
                         ## remaining $*, if any, are args
            *)
                cmd-echo --id git-branch -ec -- "$option is an invalid option. See 'git-branch --help'."
                false; return ;;
        esac
    done

    local branch
    branch=$1;
    local current_branch
    current_branch=$(git repo current-branch)
    if [[ -z "$branch" ]]; then
        local branchesa
        readarray -t branchesa < <(git-branch-list --strip)
        if [[ ${#branchesa[@]} == '0' ]]; then
            cmd-echo --id git-branch --ec -- "No branches found. Are you in a git repo?"
            false; return;
        fi
        local PS3
        PS3="Choose by number, q to quit: "
        local selected
        COLUMNS=1 ## One character wide terminal, forces list to be one column
        select selected in "${branchesa[@]}"; do
            if [[ -n "$selected" ]]; then
                if [[ "$selected" == "$current_branch" ]]; then
                    cmd-echo --id git-branch -- "$selected is current. Cannot delete current."
                else
                    branch=$selected
                    break
                fi
            elif [[ "${REPLY,,}" = 'q' ]]; then
                true; return
            else
                cmd-echo --id git-branch --ec -- "'$REPLY' is an invalid choice."
            fi
        done
    fi

    if [[ -n "$branch" ]]; then
        ## $branch was either $1 or we did not ctrl-c out of the select.
        if [[ "$branch" = "$current_branch" ]]; then
            cmd-echo --id git-branch --ec -- "Nope, you can't delete the current branch."
            false; return
        fi

        local was_fetched
        was_fetched=$(_git_branch_was_fetched "$current_branch"; echo $?)

        local -a delarg
        if ((opt_force)); then
            delarg=('-D')
        else
            delarg=('-d')
        fi
        local brdelstat
        ${REALGIT} branch "${delarg[@]}" "$branch"
        brdelstat=$?
        if ((brdelstat)); then
            cmd-echo --id git-branch --ec -- "'git branch ${delarg[*]} $branch' failed. Returning '$brdelstat'."
            return $brdelstat
        fi
        cmd-echo --id git-branch -- "Branch deleted locally."

        if [[ "$no_remote" = '1' ]]; then
            true; return
        fi

        remotes=$(git remote)
        for remote in $remotes; do
            local inremote
            inremote=$(git-branch-list --strip -r | grep -E "^$remote/$branch$")
            if [[ -n "$inremote" ]]; then
                local resp
                if ((opt_yes)); then
                    resp='y'
                else
                    true; if [[ $was_fetched == "$?" ]]; then
                        cmd-echo --id git-branch -wc -- "This worktree's branch was fetched, not created. Be careful deleting the remote."
                    fi
                    resp=$(cmd-yesno --id git-branch "Try deleting in remote '$remote'($(git config --get "remote.$remote.url"))" n)
                fi
                if [[ "$resp" == 'y' ]]; then
                    ## This is "best effort". If the branch was part of a PR, then the merge may have auto-deleted it.
                    git push --delete "$remote" "$branch"
                    brdelstat=$?
                    if ((brdelstat)); then
                        cmd-echo --id git-branch --wc "git push --delete $remote $branch failed. Maybe it was already deleted by being merged."
                    else
                        cmd-echo --id git-branch -- "Branch deleted remotely."
                    fi
                fi
            fi
        done
    fi

    ## Update with changed branches
    ((do_go_set)) && git-go-set
}

git-branch-rename ()
{
    if (($#!=2)); then
        git-usage "$0" "Need current and new branch names"
        false; return
    fi

    local old_branch=$1; shift
    local new_branch=$1; shift
    if (($#)); then
        git-usage "$0" "       argument(s) '$*' are illegal"
        false; return
    fi

    # Rename branch locally.
    echo "git branch -m $old_branch $new_branch ..."
    ${REALGIT} branch -m "$old_branch" "$new_branch"        || return

    # Delete the old branch. DON'T DO THIS IF YOU HAVE AN OPEN PULL REQUEST!!!
    echo "git push origin --delete $old_branch ..."
    git push origin --delete "$old_branch"         || return

    # Push the new branch, set local branch to track the new remote.
    echo "git push --set-upstream origin $new_branch"
    git push --set-upstream origin "$new_branch"
}

git-branch-orphan()
{
    ##Create an empty branch, for tools you want to keep, but not publish
    local remote=origin
    local branch=$1; shift
    git checkout --orphan "$branch" || return
    local -a files
    readarray -t files < <(git what is new)
    if [[ -n "${files[0]}" ]]; then
        git rm -f "${files[@]}"
    fi

    local -a comment
    if [[ "$1" ]]; then
        comment=('-m' "$*")
    fi

    git commit --allow-empty "${comment[@]}"
    git push --set-upstream "$remote" "$branch"
}

git-branch-track-remote ()
{
    local remote
    local branch
    local local_branch
    if (($# == 1)); then
        remote=$(git-get-default-remote --tag)
        branch=$1
        local_branch=$2
    else
        remote=$1
        branch=$2
        local_branch=$3
    fi

    if [[ -z "$remote" ]] || [[ -z "$branch" ]]; then
        git-usage "$0" "Missing one or both arguments (remote, branch)"
        false; return
    fi
    [[ -z "$local_branch" ]] && local_branch=$branch
    local local_branch_exists
    local_branch_exists="$($REALGIT -branch --list "$local_branch")"
    if [[ -z "$local_branch_exists" ]]; then
        ## Does not exist, create...
        git checkout -b "$local_branch" || return
        ## ...then push
        git push -u "$remote" "$branch" || return
        _git_branch_info_add_created_date "$local_branch"
    else
        local already_tracking_remote
        already_tracking_remote="$(git config branch."$local_branch".remote)"
        if [[ -z "$already_tracking_remote" ]]; then
            ## Exists, not tracking, track
            ${REALGIT} branch --set-upstream-to "$remote/$branch" "$local_branch"
            _git_branch_info_add_fetched_date "$local_branch"
        else
            local already_tracking_branch
            already_tracking_branch=$(git config branch."$local_branch".merge | sed 's|refs/heads/||')
            echo "Branch $local_branch is already tracking $already_tracking_branch in $already_tracking_remote"
            false; return
        fi
    fi
}

git-branch-remote-track()
{
    git-branch-track-remote "$@"
}


git-branch-fetch-remote ()
{
    git-branch-track-remote "$@"
}

git-branch-remote-fetch ()
{
    git-branch-fetch-remote "$@"
}

git-branch-prune-remote ()
{
    git remote update -p
}

git-branch-remote-prune ()
{
    git-branch-prune-remote
}

git-branch-list ()
{
    local strip=0
    local remote=''
    local show_current=''
    local do_current=0
    local OPTSARGS
    local shortopts='rac'
    local longopts='strip,nostrip,remote,all,current,no-warn'

    if ! OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@"); then
        cmd-echo --id git-branch --ec -- "Exiting."
        false; return
    fi

    # Reset the command line ($@).
    eval set -- "$OPTSARGS"
    local -a cbargs
    # Reprocess the command line, extracting options and their arguments into
    # variables.
    while true; do
        local option=$1
        shift
        case "$option" in
            -a | --all) remote='-a';;
            -r | --remote) remote='-r';;
            --no-warn) cbargs+=("$option");;
            -c | --current) do_current=1;;
            --strip) strip=1;;
            --nostrip) strip=0;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
                         ## remaining $*, if any, are args
            *)
                cmd-echo --id git-branch -ec -- "'$option' is an invalid option. See '$0 --help'."
                false; return
                ;;
        esac
    done
    if ((do_current)); then
        git repo current-branch "${cbargs[@]}"
        return
    fi

    if [[ -n "$remote" ]]; then
        ## Update the local branches with remote. Shunt away the output - not
        ## needed, interferes with functions that call git-branch-list and read
        ## the output.
        git remote update > /dev/null
    fi

    local -a opts
    opts=('--list')
    [[ -n "$remote" ]] && opts+=("$remote")
    [[ -n $show_current ]] && opts=("$show_current")

    if ((strip)); then
        "${REALGIT}" branch --no-color "${opts[@]}" "$@" | sed 's/^[ *] //' | sed 's/ .*//'
    else
        "${REALGIT}" branch "${opts[@]}" "$@"
    fi
}

git-branch-comment ()
{
    if [[ $1 =~ -(show|get) ]]; then
        git comment --get --branch
    else
        git comment --branch "$@"
    fi
}

#git-branch-show-parent-commit ()
#{
#    diff -u \
#         <(git rev-list --first-parent $($REALGIT branch --show-current)\
#               <(git rev-list --first-parent master) |      sed -ne 's/^ //p' | head -1

_git-branch-vv-sort ()
{
    # Sort so that the commits are in commit time descending, branch name
    # ascending order.
    perl -e '#line 395
    use strict;use warnings;

    # Here, we get the time for each commit and do the column justification without colors.
    my %data;
    my $maxbracket=0;
    for my $line (qx($ENV{REALGIT} branch -vv --color=never)) {
        my %line_meta;
        my @fields = split(/\s+/, $line);
        $line_meta{branch} = substr($fields[3],1,-1); # strip []
        $line_meta{commit} = $fields[2];
        $line_meta{time} = (map { chomp; $_ }
                            qx(git show -s --format=%ci $line_meta{commit}))[0];

        # Column justification
        my $bracketloc = index( $line, q(]) );
        $line_meta{bracketloc} = $bracketloc;
        ($bracketloc > $maxbracket) and $maxbracket = $bracketloc;
        $data{"$line_meta{commit},$line_meta{branch}"} = \%line_meta;
    }
    for my $d (values %data) {
        $d->{comment_offset} = q( ) x ($maxbracket - $d->{bracketloc} + 1);
    }

    # Here, we get the colored (or not) output.
    my @out;
    my $cmd = q(git branch -vv);
    if (@ARGV) {
        if ($ARGV[0] eq q(--color)) {
            $cmd =~ s/branch/branch --color=always/;
        }
        if ($ARGV[0] eq q(--nocolor)) {
            $cmd =~ s/branch/branch --color=never/;
        }
    }
    for my $line (qx($cmd)) {
        # Folding in the commit time and the column justification.
        TIME_INSERT: for my $d ( values %data ) {
            if ( index($line, $d->{commit}) != -1
                 and
                 index($line, $d->{branch}) != -1) {
               $line =~ s/$d->{commit}/$d->{commit} ($d->{time})/;
               $line =~ s/\]/\]$d->{comment_offset}/;
               $d->{line} = $line;
               last TIME_INSERT;
            }
        }
    }

    # Sort by time descending, branch name ascending
    my @p =
      map { "$_->{line}" }
      sort {
      ( $b->{time} cmp $a->{time}
        or
        substr($a->{line},1) cmp substr($b->{line},1) )
      } values %data;
    print @p;
' -- "$@"
}

git-branch-sync ()
{
    # Make sure all branches are caught up with their remotes.
    git-branch-sync-catch-up

    # Get the source and any specific targets
    declare -A targs
    declare filter_targs=0

    declare starting_branch
    starting_branch=$(git-branch-list --current)

    declare source=$1
    if [[ -n $source ]]; then
        shift
        while (($#)); do
            filter_targs=1
            targs[$1]=1
            shift
        done
    else
        # Find the unique uuid, if any. If so, set that to the source branch.
        source=$(git branch -vv | perl -nae '
if ($F[0] eq q(*)) {
  shift @F;
};
$br2id{$F[0]}=$F[1];
$idc{$F[1]}++;
delete $br2id{$F[0]} if $idc{$F[1]}>1;

END {
    for my $i (keys %idc) {
        if ( $idc{$i} eq 1 ) {
            for my $b (keys %br2id) {
                if ( $br2id{$b} eq $i ) {
                    push @u, $b;
                }
            }
        }
    }
    if(@u==1) {
        print qq($u[0]);
    }
}')
        if [[ -z $source ]]; then
            ## There was no unique branch. Find the newest.
            source=$(_git-branch-vv-sort --nocolor | head -1 | perl -nae '
if ($F[0] eq q(*)) {
  shift @F;
};
print $F[0]')
        fi
    fi

    (
        builtin cd "$(git root)" || return

        # Get info for all the branches that can be updated. Exclude the
        # source, include only specified branches if there were any specified.
        declare -a lines
        mapfile -t lines < <(git branch --no-color -vv | sed -E -e 's/\*|\[|\]//g')
        declare line
        declare -A brm # branch-remote-map
        declare source_descr
        declare -A commit_map
        for line in "${lines[@]}"; do
            declare source_name
            declare commit_id
            declare remote_branch
            declare commit_msg
            read -r source_name commit_id remote_branch commit_msg <<<"$line"
            if [[ ${source_name} == "$source" ]]; then
                source_descr="${source_name} (${commit_id}:${commit_msg})"
            else
                if ((filter_targs)); then
                    declare key
                    for key in "${!targs[@]}"; do
                        if [[ ${source_name} =~ $key ]]; then
                            brm[${source_name}]=${remote_branch}
                            break
                        fi
                    done
                else
                    brm[${source_name}]=${remote_branch}
                fi
            fi
            ((commit_map[$commit_id] += 1))
        done

        # Confirmation
        cmd-echo --id git-branch --title --color REVBLUE -- "Full branch list before sync..."
        _git-branch-vv-sort
        if (( ${#commit_map[@]} == 1 )); then
            cmd-echo --id git-branch --title --color REVBLUE -- "All branches in sync. No action to take."
            true; return
        fi

        declare resp
        declare prompt="Propagate '$source_descr' to"
        if (( filter_targs )); then
            # if brm is not blank
            # shellcheck disable=SC2086 #https://github.com/koalaman/shellcheck/wiki/SC2086
            prompt="$prompt branches: [ $(printf "'%s' " ${!brm[*]})]"
            # else bail
        else
            prompt="$prompt all the other branches"
        fi
        echo
        resp=$(cmd-yesno --id git-branch "$prompt" "n")
        if [[ $resp == 'n' ]]; then
            true; return
        fi

        git switch "${source}"
        declare source_commit
        source_commit=$(git rev-parse HEAD)
        pulloutput=$(mktempfile)
        rm-on-exit "$pulloutput"
        declare target
        for target in "${!brm[@]}"; do
            cmd-echo --id git-branch --title --color REVBLUE -- "Syncing $target..."

            # Copy the new commits from 'source' onto 'target':
            $REALGIT switch "${target}" || return
            $REALGIT pull || return
            declare target_commit
            target_commit=$(git rev-parse HEAD)
            if [[ $source_commit != "$target_commit" ]]; then
                git merge --ff-only "${source}" || return

                # Send 'em off to the remote
                declare remote_ref="${brm[${target}]%%/*}"
                declare remote_branch="${brm[${target}]##*/}"
                git push "$remote_ref" "HEAD:${remote_branch}" || return
            fi
        done

        # Return to the source branch since it very likely you will do the next
        # sync from the same branch.
        cmd-echo --id git-branch --title --color REVBLUE -- "Return to starting branch..."
        git switch "${starting_branch}" || return

        # Show results
        cmd-echo --id git-branch --title --color REVBLUE -- "Full branch list after sync..."
        _git-branch-vv-sort

    )
}

git-branch-sync-check ()
{
    builtin cd "$(git root)" || return
    git-branch-sync-catch-up || return
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    declare grn=$(git repo name)

    # Get info for all the branches.
    declare -a lines
    mapfile -t lines < <(git branch --no-color -vv | sed 's/^\*//')
    declare commitid
    declare line
    for line in "${lines[@]}"; do
        declare -a tmp
        read -r -a tmp <<<"$line"
        [[ -z $commitid ]] && commitid=${tmp[1]}
        if [[ $commitid != "${tmp[1]}" ]]; then
            cmd-echo --id git-branch --wc -- "Inconsistent branches for $grn"
            git branch -vv
            false; return
        fi
    done
    cmd-echo --id git-branch --color REVBLUE "Branches for $grn are consistent"

    true; return
}

git-branch-sync-catch-up ()
{
    builtin cd "$(git root)" || return
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    declare grn=$(git repo name)
    cmd-echo --id git-branch --title --color REVBLUE -- "*** Catching up branch sync of repo ${grn}..."

    # Refresh the repo
    cmd-echo --id git-branch --color REVBLUE -- "Refresh repo..."
    git fetch --all --prune --tags || return

    declare br
    for br in $(git branch list --strip); do
        cmd-echo --id git-branch --color REVBLUE -- "Refreshing branch ${br}..."
        git switch "$br" || return
        git pull || return
    done
}

main ()
{
    local action=$1
    case $action in
        -h | --help)
            git-usage "$0"
            true; return
            ;;
        --current)
            shift
            git-branch --list --current "$@"
            return
            ;;
        --vv)
            _git-branch-vv-sort --color
            true; return
            ;;
        --vvnc)
            _git-branch-vv-sort --nocolor
            true; return
            ;;
    esac

    declare opt_re='delete|rename|orphan|track-remote|remote-track|fetch-remote|remote-fetch|prune-remote|remote-prune|list|comment|sync'
    if [[ "$action" =~ ^-+($opt_re) ]]; then
        action=$(dashstripper "$action")
    elif [[ "$action" =~ ^${opt_re}$ ]]; then
        cmd-echo --id git-branch --ec "Actions must be specified as an option (--$action). And don't tell me you want to create a branch with the name '$action'; go pick something else."
        false; return
    fi

    action_func_name="git-branch-${action}"
    set +x
    if declare -F "$action_func_name" >/dev/null; then
        shift ## the $action
        "$action_func_name" "$@"
    else
        ## Dispatch to real git branch
        "${REALGIT}" branch "$@"
    fi
    set +x
}

main "$@"
exit

:<<'__PODUSAGE__'
=head1 NAME

git-branch - git extention of git branch

=head1 SYNOPSIS

 git branch --delete oldBranch
 git branch --rename currentBranch newbranch
 git branch --orphan
 git branch --track-remote|--remote-track
 git branch --fetch-remote|--remote-fetch
 git branch --prune-remote|--remote-prune
 git branch --list [[-c|--current]| [-r|--remote]| [-a|--all]] [--[no]strip]
 git branch --current
 git branch --comment
 git branch --sync source-branch [target-branch-ish...]
 git branch --vv

=head1 DESCRIPTION

Extensions to the 'git branch' command. Obvious ones are not documented. Any action not described here will be passed onto the actual 'git branch' command.

=head1 EXTENSIONS

=over 4

=item --orphan

TBD

=item --list

Lists all branches. By default, lists just the local ones. -c lists only the current one. -r lists remotes. -a lists locals and remotes. --strip removes the spacing and the colors and the current branch indicator. --current is a short cut for 'list --current'.

=item --comment

Add a comment that can be retrieved later. The current time is added to the end
of the comment when written.

 git branch --comment "some text explaining where you left off, maybe?"
 git branch --comment -[get|show]

=item --sync

Take the commits on the "source-branch" argument and merge them into a list of
target branches. First find all branches that are behind their remotes after
the initial 'git fetch' and update them by switching to them and pulling.

If target-branches are not specified, merge into all of them.

If the source-branch is not specified, find a branch that has a commit id
different than all other branches. If found, use that branch as the source. If
more than one found, use the current branch as source.

The merge strategy is --ff-only. If that fails for any branch, the command is
aborted. That could leave some branches updated and some not. Using this
strategy keeps all the branches in sync without any extraneous merge commits.

The "target-branch-ish" arguments are pattern matches against the
B<remote/branch> spec. Matching branches on different remotes is accomplished
by specifying B<remote/branch> instead of just B<branch>.

=item --vv

Synonym for -vv, but with columated formatting.

=back

=item --track-remote

At some point, compare to B<git track> and consolidate the code.

=back

=cut

__PODUSAGE__
