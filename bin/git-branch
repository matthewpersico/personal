#!/usr/bin/env bash

# git-branch - no .gitaudit, called on every prompt

## Functions that encapsulate the enhanced functionality. main() is defined
## last and called last.
usage ()
{
    (
        [ -n "$*" ] && cmd-echo -- "$@"
        echo "** Extended actions **"
        bash-usage "$0"
        echo
        echo "** Standard actions **"
        "${REALGIT}" branch --help
    ) 2>&1 | ${PAGER:-less}
}

_git_branch_info_remove ()
{
    git config --remove-section "branch.$1" || return $?
}

_git_branch_info_add_created_date ()
{
    git config --replace-all "branch.$1.${GIT_EXT_META_PREFIX}-created" "$(date "$GIT_EXT_META_DATE_FMT")" || return $?
}

_git_branch_info_add_fetched_date ()
{
    git config --replace-all "branch.$1.${GIT_EXT_META_PREFIX}-fetched" "$(date "$GIT_EXT_META_DATE_FMT")" || return $?
}

_git_branch_was_fetched ()
{
    [[ -n $(git config --get "^branch.$1.${GIT_EXT_META_PREFIX}-fetched" 2>/dev/null) ]]
}

_git_branch_is_a_pull ()
{
    [[ $1 =~ ^pull ]]
}

git-branch-checkout ()
{
    declare tgt_branch=$1
    if [ -z "$tgt_branch" ]; then
        local PS3="Choose by number, q to quit: "
        select tgt_branch in $(git branch list --strip)
        do
            [ "${REPLY,,}" = 'q' ] && return 1
            [ -n "$tgt_branch" ] && break
        done
    else
        shift
        if [ "$(git branch list --strip "$tgt_branch")" != "$tgt_branch" ]; then
            cmd-echo -- "$tgt_branch does not exist to be checked out."
            return 1
        fi
    fi

    if (($#)); then
        cmd-echo -- "arguments '$*' ignored"
    fi

    git checkout "$tgt_branch"
    _git_branch_info_add_created_date "$tgt_branch"

}
git-branch-delete ()
{
    declare no_remote
    no_remote=0
    declare opt_yes
    opt_yes=0
    declare do_go_set
    do_go_set=1
    declare OPTSARGS
    declare shortopts='y'
    declare longopts='yes,no-remote,declare-only,no-go-set'

    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@")
    declare status=$?
    ((status != 0)) && usage && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        declare option=$1
        shift
        case "$option" in
            -y|--yes) opt_yes=1 ;;
            --no-remote|--declare-only) no_remote=1 ;;
            --no-go-set) do_go_set=0 ;;
            -h|--help) usage; return 0 ;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
                         ## remaining $*, if any, are args
            *)
                cmd-echo -ec -- "$option is an invalid option. See git-branch --help"
                return 1 ;;
        esac
    done

    declare branch
    branch=$1;
    declare current_branch
    current_branch=$(git repo current-branch)
    if [ -z "$branch" ]; then
        declare branchesa
        readarray -t branchesa < <(git-branch-list --strip)
        if [ ${#branchesa[@]} == '0' ]; then
            cmd-echo -- "No branches found. Are you in a git repo?"
            return 1
        fi
        declare PS3
        PS3="Choose by number, q to quit: "
        declare selected
        COLUMNS=1 ## One character wide terminal, forces list to be one column
        select selected in "${branchesa[@]}"
        do
            if [ -n "$selected" ]; then
                if [ "$selected" == "$current_branch" ]; then
                    cmd-echo -- "$selected is current. Cannot delete current."
                else
                    branch=$selected
                    break
                fi
            elif [ "${$REPLY,,}" = 'q' ]; then
                return 0
            else
                cmd-echo -- "'$REPLY' is an invalid choice"
            fi
        done
    fi

    if [ -n "$branch" ]; then
        ## $branch was either $1 or we did not ctrl-c out of the select.
        if [ "$branch" = "$current_branch" ]; then
            cmd-echo -- "Nope, you can't delete the current branch."
            return 1
        fi

        declare was_fetched
        was_fetched=$(_git_branch_was_fetched "$current_branch"; echo $?)

        declare -a delarg
        if _git_branch_is_a_pull "$branch"; then
            delarg=('-D')
        else
            delarg=('-d')
        fi
        declare brdelstat
        cmd-echo -dc -- "Normal deletes use -d, we seem to need to use -D for pulls." \
                 "That may be because the pull is not merged?" \
                 "We are about to 'git branch ${delarg[*]} $branch'." \
                 "Once you figure out what's going on with pulls, you can remove this diagnostic."
        git branch "${delarg[@]}" "$branch"
        brdelstat=$?
        if ((brdelstat)); then
            cmd-echo -- "ERROR: git branch ${delarg[*]} $branch failed. Returning $brdelstat."
            return $brdelstat
        fi
        cmd-echo -- "Branch deleted locally."

        if [ "$no_remote" = '1' ]; then
            return 0
        fi

        remotes=$(git remote)
        for remote in $remotes
        do
            declare inremote
            inremote=$(git-branch-list --strip -r | grep -E "^$remote/$branch$")
            if [ -n "$inremote" ]; then
                declare resp
                if ((opt_yes)); then
                    resp='y'
                else
                    if [[ $was_fetched == $(true && echo $?) ]]; then
                        cmd-echo -wc -- "This worktree's branch was fetched, not created. Be careful deleting the remote."
                    fi
                    resp=$(cmd-yesno "Try deleting in remote '$remote'($(git config --get "remote.$remote.url"))" n)
                fi
                if [ "$resp" == 'y' ]; then
                    ## This is "best effort". If the branch was part of a PR, then the merge may have auto-deleted it.
                    git push --delete "$remote" "$branch"
                    brdelstat=$?
                    if ((brdelstat)); then
                        cmd-echo --wc "git push --delete $remote $branch failed. Maybe it was already deleted by being merged."
                    else
                        cmd-echo -- "Branch deleted remotely."
                    fi
                fi
            fi
        done
    fi

    ## Update with changed branches
    ((do_go_set)) && git-go-set
    return $?
}

git-branch-rename ()
{
    if (($#!=2)); then
        usage "Need current and new branch names"
        return 1
    fi

    local old_branch=$1; shift
    local new_branch=$1; shift
    if (($#)); then
        usage "       argument(s) '$*' are illegal"
        return 1
    fi

    # Rename branch locally.
    echo "git branch -m $old_branch $new_branch ..."
    git branch -m "$old_branch" "$new_branch"        || return $?

    # Delete the old branch. DON'T DO THIS IF YOU HAVE AN OPEN PULL REQUEST!!!
    echo "git push origin --delete $old_branch ..."
    git push origin --delete "$old_branch"         || return $?

    # Push the new branch, set local branch to track the new remote.
    echo "git push --set-upstream origin $new_branch"
    git push --set-upstream origin "$new_branch"
    return $?
}

git-branch-orphan()
{
    ##Create an empty branch, for tools you want to keep, but not publish
    declare remote=origin
    declare branch=$1; shift
    git checkout --orphan "$branch" || return $?
    declare -a files
    readarray -t files < <(git what is new)
    if [ -n "${files[0]}" ]; then
        git rm -f "${files[@]}"
    fi

    declare -a comment
    if [ "$1" ]; then
        comment=('-m' "$*")
    fi

    git commit --allow-empty "${comment[@]}"
    git push --set-upstream "$remote" "$branch"
    return 0
}

git-branch-track-remote ()
{
    declare remote
    declare branch
    declare local_branch
    if (($# == 1)); then
        remote=$(git-get-default-remote --tag)
        branch=$1
        local_branch=$2
    else
        remote=$1
        branch=$2
        local_branch=$3
    fi

    if [ -z "$remote" ] || [ -z "$branch" ]; then
        usage "Missing one or both arguments (remote, branch)"
        return 1
    fi
    [ -z "$local_branch" ] && local_branch=$branch

    declare local_branch_exists
    local_branch_exists="$(git branch --list "$local_branch")"
    if [ -z "$local_branch_exists" ]; then
        ## Does not exist, create and track
        git checkout -b "$local_branch" --track "$remote/$branch"
        _git_branch_info_add_created_date "$local_branch"
    else
        declare already_tracking_remote
        already_tracking_remote="$(git config branch."$local_branch".remote)"
        if [ -z "$already_tracking_remote" ]; then
            ## Exists, not tracking, track
            git branch --set-upstream-to "$remote/$branch" "$local_branch"
            _git_branch_info_add_fetched_date "$local_branch"
        else
            declare already_tracking_branch
            already_tracking_branch=$(git config branch."$local_branch".merge | sed 's|refs/heads/||')
            echo "Branch $local_branch is already tracking $already_tracking_branch in $already_tracking_remote"
            return 1
        fi
    fi
    return $?
}

git-branch-remote-track()
{
    git-branch-track-remote "$@"
}


git-branch-fetch-remote ()
{
    git-branch-track-remote "$@"
}

git-branch-remote-fetch ()
{
    git-branch-fetch-remote "$@"
}

git-branch-prune-remote ()
{
    git remote update -p
}

git-branch-remote-prune ()
{
    git-branch-prune-remote
}

git-branch-list ()
{
    local strip=0
    local remote=''
    local show_current=''
    declare OPTSARGS
    declare shortopts='rac'
    declare longopts='strip,nostrip,remote,all,current'

    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "${FUNCNAME[0]}" -- "$@")
    declare status=$?
    ((status != 0)) && cmd-echo -- "Exiting." && return $status

    # Reset the command line ($@).
    eval set -- "$OPTSARGS"

    # Reprocess the command line, extracting options and their arguments into
    # variables.
    while true
    do
        declare option=$1
        shift
        case "$option" in
            -a | --all) remote='-a';;
            -r | --remote) remote='-r';;
            -c | --current) git repo current-branch; exit $? ;;
            --strip) strip=1;;
            --nostrip) strip=0;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
                         ## remaining $*, if any, are args
            *)
                cmd-echo -ec -- "$option is an invalid option. See $0 --help"
                exit 1 ## return 1 in functions
                ;;
        esac
    done

    if [ -n "$remote" ]; then
        ## Update the local branches with remote. Shunt away the output - not
        ## needed, interferes with functions that call git-branch-list and read
        ## the output.
        git remote update > /dev/null
    fi

    local -a opts
    opts=('--list')
    [ -n "$remote" ] && opts+=("$remote")
    [[ -n $show_current ]] && opts=("$show_current")

    if ((strip)); then
        "${REALGIT}" branch --no-color "${opts[@]}" "$@" | sed 's/^[ *] //' | sed 's/ .*//'
    else
        "${REALGIT}" branch "${opts[@]}" "$@"
    fi
    return $?
}

git-branch-comment ()
{
    if [[ $1 =~ -(show|get) ]]; then
        git comment --get --branch
    else
        git comment --branch "$@"
    fi
}

#git-branch-show-parent-commit ()
#{
#    diff -u \
#         <(git rev-list --first-parent $($REALGIT branch --show-current)\
#               <(git rev-list --first-parent master) |      sed -ne 's/^ //p' | head -1

main ()
{
    declare action=$1

    if [[ "$action" =~ ^-+h ]]; then
        usage
        return  0
    fi

    if [[ "$action" =~ ^-+current ]]; then
        git-branch-list --current
        return $?
    fi

    action_func_name="git-branch-${action}"
    if declare -F "$action_func_name" >/dev/null; then
        shift ## the $action
        "$action_func_name" "$@"
    else
        ## Dispatch to real git branch
        "${REALGIT}" branch "$@"
    fi
    return $?
}

main "$@"
exit $?

:<<'__PODUSAGE__'
=head1 NAME

git-branch - git extention of git branch

=head1 SYNOPSIS

 git branch delete oldBranch
 git branch rename currentBranch newbranch
 git branch orphan
 git branch track-remote|remote-track
 git branch fetch-remote|remote-fetch
 git branch prune-remote|remote-prune
 git branch list [[-c|--current]| [-r|--remote]| [-a|--all]] [--[no]strip]
 git branch --current
 git branch comment


=head1 DESCRIPTION

Extensions to the 'git branch' command. Obvious ones are not documented. Any action not described here will be passed onto the actual 'git branch' command.

=head1 EXTENSIONS

=over 4

=item orphan

TBD

=item list

Lists all branches. By default, lists just the local ones. -c lists only the current one. -r lists remotes. -a lists locals and remotes. --strip removes the spacing and the colors and the current branch indicator. --current is a short cut for 'list --current'.

=item comment

Add a comment that can be retrieved later. The current time is added to the end
of the comment when written.

 git branch comment "some text explaining where you left off, maybe?"
 git branch comment -[get|show]

=back

=cut

__PODUSAGE__
