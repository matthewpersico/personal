# -*- sh -*-
# shellcheck shell=bash

# git-commit-with-source-ctrl-log-guts

declare opt_a
declare opt_v
declare -a opt_edit
declare -A opt_exclude
declare opt_skip
declare opt_debug
declare opt_confirm=''
declare -a opt_scl_pick
declare moreopts=1
while [[ "$1" =~ ^- ]] && ((moreopts)); do
    declare original="$1"
    declare option
    option=$(dashstripper "$original")
    shift

    case $option in
        a ) opt_a='-a';;
        v ) opt_v='-v';;
        e ) opt_edit=(--edit --editor "$EDITOR");;
        editor ) opt_edit=(--edit --editor "$1"); shift;;
        s ) opt_skip='--skip-no-source-ctrl-log';;
        sclpick ) opt_scl_pick=("$original" "$1"); shift;;
        sclonly ) opt_skip='--sclonly' ;;
        nosclonly ) opt_skip='--nosclonly' ;;
        c | confirm ) opt_confirm='--confirm';;
        exclude | ex) opt_exclude["$(realpath "$1")"]=1; shift;;
        h | help )
            git-usage "$0"
            true; exit ;;
        debug | x ) set -x; opt_debug='-x'; trap 'set +x' EXIT ;;
        --)
            moreopts=0
            ;;
        * )
            cmd-echo --id git-commit-with-source-ctrl-log-guts -- "$original is an invalid option. See $0 --help"
            false; exit;;
    esac
done

## Locate all the files to process
declare -a filenames
if (($#)); then
    ## Process what's specified
    filenames=("$@")
else
    if [[ -z "$opt_a" ]]; then
        ## We want to mimic the same behavior as git commit with no filenames
        ## (default to only staged files), but we need to pass files into
        ## git-process-source-ctrl-log, so we grab the staged files.
        mapfile -t filenames < <(git what is staged)
    else
        ## This mimics git commit -a; commit staged and unstaged files that are
        ## modified.
        mapfile -t filenames < <(git what is modified)
    fi
fi

## Process any exclusions
if (( ${#opt_exclude[@]} > 0 )); then
    declare -a included
    declare i
    for i in $(seq 0 $((${#filenames[@]}-1))); do
        declare filepath
        filepath="$(realpath "${filenames[$i]}")"
        if [[ "${opt_exclude[$filepath]}" = '' ]]; then
            included+=("$filepath")
        fi
    done
    filenames=("${included[@]}")
fi
git-process-source-ctrl-log --commit \
                            $opt_confirm $opt_v $opt_debug "${opt_edit[@]}" \
                            $opt_skip "${opt_scl_pick[@]}" "${filenames[@]}"
status=$?
exit $status

:<<__USAGE__
git-commit-with-source-ctrl-log [-a] [ -v] [-e | --editor editor] [-s] [-ex file [-ex file...]] [file [file...]]

Use the contents of the local \$GITFUNCS_SOURCE_CTRL_LOG_NAME file ($GITFUNCS_SOURCE_CTRL_LOG_NAME)
as the commit message.

 -a Try to commit all modified files, staged and unstaged, just like the
    'git commit' command.

 -v verbose

 -e Used in conjunction with --diff or --nosclonly, edit each file that has a
    diff or that has no SourceCtrlLog entry so that you can use Cx4a in emacs
    to generate and entry in SourceCtrlLog where on is missing entry or needs
    to be updated to match the diff.

 -editor editor
    Set the editor to something other than the default of \$EDITOR ($EDITOR).

 -s Skip files that do not have a source-ctrl-log entry, but continue with
    those that do. Without this flag, if a file to commit does not have a
    source-ctrl-log entry, processing stops and nothing is committed.

 -ex
    Do not process this file. Useful if you're not explicitly specifying any
    files and you want to skip a few.

If files are not specified, and -a is not used, the list of all modified files
is used.

__USAGE__
