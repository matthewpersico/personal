#!/usr/bin/env bash

echo "$(date): git-commit-with-source-ctrl-log-guts" >> "$HOME/.gitaudit"

# git-commit-with-source-ctrl-log-guts

declare opt_a
declare opt_v
declare -a opt_edit
declare -A opt_exclude
declare opt_skip
declare opt_debug
declare opt_confirm=''
declare moreopts=1
while [[ "$1" =~ ^- ]] && ((moreopts))
do
    declare original="$1"
    declare option
    option=$(dashstripper "$original")
    shift

    case $option in
        a ) opt_a='-a';;
        v ) opt_v='-v';;
        e ) opt_edit=(--editor "$1"); shift;;
        s ) opt_skip='--skip-no-source-ctrl-log';;
        sclonly ) opt_skip='--sclonly' ;;
        nosclonly ) opt_skip='--nosclonly' ;;
        c | confirm ) opt_confirm='--confirm';;
        exclude | ex) opt_exclude["$(realpath "$1")"]=1; shift;;
        h | help )
            bash-usage "$0"
            exit 0 ;;
        debug | x ) set -x; opt_debug='-x'; trap 'set +x' EXIT ;;
        --)
            moreopts=0
            ;;
        * )
            cmd-echo -- "$original is an invalid option. See $0 --help"; exit 1;;
    esac
done

## Locate all the files to process
declare -a filenames
if (($#))
then
    ## Process what's specified
    filenames=("$@")
else
    if [ -z "$opt_a" ]
    then
        ## We want to mimic the same behavior as git commit with no filenames
        ## (default to only staged files), but we need to pass files into
        ## git-process-source-ctrl-log, so we grab the staged files.
        mapfile -t filenames < <(git what is staged)
    else
        ## This mimics git commit -a; commit staged and unstaged files that are
        ## modified.
        mapfile -t filenames < <(git what is modified)
    fi
fi

## Process any exclusions
if (( ${#opt_exclude[@]} > 0 ))
then
    declare -a included
    declare i
    for i in $(seq 0 $((${#filenames[@]}-1)))
    do
        declare filepath
        filepath="$(realpath "${filenames[$i]}")"
        if [ "${opt_exclude[$filepath]}" = '' ]
        then
            included+=("$filepath")
        fi
    done
    filenames=("${included[@]}")
fi

git-process-source-ctrl-log --commit $opt_confirm $opt_v $opt_debug "${opt_edit[@]}" $opt_skip "${filenames[@]}"
status=$?
exit $status

:<<'__USAGE__'
git-commit-with-source-ctrl-log [-a] [ -v] [-e editor] [-s] [-ex file [-ex file...]] [file [file...]]

Use the local source-ctrl-log as the commit message.

-a Try to commit all modified files, staged and unstaged, just like the
     'git commit' command.

-v verbose

-e Edit the commit message after it has been extracted from the source-ctrl-log
     file but before the commit, using the specified editor.

-s Skip files that do not have a source-ctrl-log entry, but continue with those that
   do. Without this flag, if a file to commit does not have a source-ctrl-log entry,
   processing stops and nothing is committed.

-ex Do not process this file. Useful if you're not explicitly specifying any
    files and you want to skip a few.

If files are not specified, the list of all modified files is used.
__USAGE__
