# -*- sh -*-
# shellcheck shell=bash

# git-diff

use on_exit
use mktemp

declare ceid='git-diff'
declare -a pass_on
declare opt_edit=0
declare -a log_entries

if [[ "$(basename "$0")" == 'git-wdiff' ]] ; then
    pass_on+=('--word-diff')
fi

## DO NOT attempt to convert this to a 'getopt' implementation; it would
## require specifying and handling every existing option in 'git diff',
## and it is just not necessary.
while (( $# )); do
    declare arg=$1
    shift
    case "$arg" in
        ##
        ## Our options
        ##
        --edit )
            opt_edit=1
            ;& ## Unconditional fallthrough sets names only,which makes sense for --edit.
        --name* )
            pass_on+=('--name-only')
            ;;
        --no-git )
            opt_no_git=1;
            ;;
        --log* )
            log_entries+=("$1"); shift
            if [[ ${#log_entries[@]} == '3' ]]; then
                cmd-echo --id $ceid --ec -- "Can only compare two log entries, no more."
                false; exit
            fi
            ;;
        --top-two )
            log_entries+=(1 0)
            ;;
        --help | -h )
            git-usage "$0"
            true; exit
            ;;
        * )
            pass_on+=("$arg")
            ;;
    esac
done

if [[ ${#log_entries[@]} == '1' ]]; then
    cmd-echo --id $ceid -- "Only 1 log entry speficied. Will compare to top (0) entry."
    log_entries+=(0)
fi

if [[ -n ${log_entries[1]} ]]; then
    # Convert indexes to uuids
    declare -a commit_ids
    readarray -t commit_ids < <($REALGIT log --format=%h | head)
    declare _gdi
    for _gdi in 0 1; do
        declare idx=${log_entries[$_gdi]}
        (( idx < 0 )) && idx=$((idx * -1))
        log_entries[_gdi]=$idx
        pass_on+=("${commit_ids[$idx]}")
    done
    # The log command won't work if the commits are backwards, even if that's
    # the diff you want
    declare numlines
    numlines=$($REALGIT log "${commit_ids[${log_entries[0]}]}^..${commit_ids[${log_entries[1]}]}"|wc -l)
    if ((numlines == 0)); then
        cmd-echo --id $ceid --wc -- "You've specfied the log entries in reverse order of occurrance in the list. The log reflect the proper order and the diff will be a backout one."
        $REALGIT log "${commit_ids[${log_entries[1]}]}^..${commit_ids[${log_entries[0]}]}"
    else
        $REALGIT log "${commit_ids[${log_entries[0]}]}^..${commit_ids[${log_entries[1]}]}"
    fi
    sleep 1
fi

if ((opt_edit)) ; then
    # shellcheck disable=SC2046 #https://github.com/koalaman/shellcheck/wiki/SC2046
    $EDITOR $("$REALGIT" diff "${pass_on[@]}")
    true # set exit val
elif ((opt_no_git)); then
    "$REALGIT" diff --color=always "${pass_on[@]}" | perl -e'
    #line 49
    my $print = 0;
    my $exit_val = 0; # no diffs
    while ( <> ) {
        $exit_val=1; #foudn a diff
        if ($_ =~ m/^(\e\[\d+m)?diff --git/) {
            if ($_ =~ m|/\.git| ) {
                $print = 0;
            } else {
                $print = 1;
            }
        }
        print $_ if $print;
    }
   exit $exit_val # Use exit val of the diff not this perl
'
else
    "$REALGIT" diff "${pass_on[@]}"
    # Use exit val of the diff, $?
fi

exit

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
=head1 NAME

git-diff - extension to git diff

=head1 SYNOPSIS

 git-diff [--edit | --name | --no-git | --log n [--log n] | --help ]

=head1 DESCRIPTION

git diff with enhancements.

=head1 OPTIONS

=over 4

=item edit

Run in --names-only mode and start $EDITOR for all files found.

=item --name

Shortcut for --names-only.

=item --no-git

If you are using git diff to compare two repos by directory name, the diff is
going to work in "file" mode. That is, it will not diff just the git objects
but all files in the directories. This will include the .git directory. This is
probably not what you want. This flag will prevent that from happening.

=item --log n

Providing two --log options will diff between the commits at thost two entries
in the log. The first entry is index 0. If you only provide one --log, we
assume the other to be 0. Negative indexes are converted to positive, so -1 and
1 both indicate the entry after the top one, -2 and 2 the next one, etc.

Provide the -log options in the high index, low index order. In the opposide
order, you get a diff that "undoes" the changes.

=item --top-two

Syntactic sugar for --log 1 --log 0, even though just --log 1 or --log -1 will
default the other comparison to --log 0.

=item --help

This text.

=back

__PODUSAGE__
