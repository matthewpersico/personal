# -*- sh -*-
# shellcheck shell=bash

# makesymlinks

# Creates symlinks from any target file to the git-controlled source
# dotfiles. Use this when initing a new home directory or adding a dotfile to
# git control.

declare opwd
opwd=${PWD}
PATH=$(realpath "$(dirname "$0")"):$PATH

declare interactive=''
if [[ "$1" =~ -i ]]; then
    interactive='--interactive'
    shift
fi

if [[ -z "$1" ]]; then
    echo "Missing dotfiles directory arg"
    false; exit
fi

dotfiles_dir=$1
builtin cd "$dotfiles_dir" || exit
dotfiles_dir="${PWD}"

dotfiles_olddir=${dotfiles_dir}_old
dotfiles_manifest=${dotfiles_dir}/dotfiles.manifest

if [[ ! -d "$dotfiles_olddir" ]]; then
    echo -n "Creating $dotfiles_olddir for backup of any existing dotfiles in ~..."
    mkdir -p "$dotfiles_olddir"
    echo "done"
fi

# shellcheck disable=SC1090
. "$dotfiles_manifest"
# shellcheck disable=SC2154 #https://github.com/koalaman/shellcheck/wiki/SC2154
echo "${dotfilescopies[gitfuncs_kv]}"

echo "Changing to the $dotfiles_dir directory ..."
builtin cd "$dotfiles_dir" || exit

# Move any existing dotfiles in to dotfiles_olddir directory, then create
# symlinks from the original location to the corresponding files in the
# ~/dotfiles directory.

# shellcheck disable=SC2154 #dotfiles assigned in dotfiles_manifest source above
for src in "${!dotfiles[@]}" "${!dotfilescopies[@]}"; do
    echo
    declare fullsrc=$dotfiles_dir/$src
    declare resp='y'
    declare -a transform
    declare action
    declare -a args

    if [[ -n ${dotfilestransforms[$src]} ]]; then
        transform=('--transform' "${dotfilestransforms[$src]}")
    fi

    if [[ -n ${dotfiles[$src]} ]]; then
        action='--link'
        declare fulllink
        fulllink=${dotfiles[$src]}
	args=( "$fullsrc" "$fulllink" )
        # Don't ask here if we are in interactive mode; we'll ask in makesymlink.
        [[ -z "$interactive" ]] && \
            [[ -n "${dotfilesopt[$src]}" ]] && \
                resp=$(yesno "OPTIONAL FILE: Link $fulllink -> $fullsrc")
    else
        action='--copy'
        declare fullcopy
        fullcopy=${dotfilescopies[$src]}
	args=( "$fullsrc" "$fullcopy" )
        # Don't ask here if we are in interactive mode; we'll ask in makesymlink.
        [[ -z "$interactive" ]] && \
            [[ -n "${dotfilesopt[$src]}" ]] && \
                resp=$(yesno "OPTIONAL FILE: Copy $fullsrc to $fullcopy")
    fi

    if [[ "$resp" = 'y' ]]; then
        makesymlink $interactive --verbose --relative \
                    --backup "$dotfiles_olddir" \
                    $action "${transform[@]}" \
                    "${args[@]}"
        [[ -n "${dotfilesperms[$src]}" ]] && \
            [[ -e "$fullsrc" ]] && \
            chmod "${dotfilesperms[$src]}" "$fullsrc"
    fi
done

builtin cd "$opwd" || exit

true; exit

:<<'__PODUSAGE__'
=head1 NAME

makesymlinks - create symlinks to, or copies of, dotfiles in a git repo.

=head1 SYNOPSIS

 makesymlinks [-i] directory-with-dotfiles

=head1 DESCRIPTION

Use the file $directory-with-dotfiles/dotfiles.manifest file to maintain links
to git-controled versions of dotfiles.

=head1 ARGUMENTS

=over 4

=item directory-with-dotfiles

Where the dot files live.

=back

=head1 OPTIONS

=over 4

=item -i|--interactive

Ask before linking each file.

=back

=head1 MANIFEST FILE

Sample:

 # -*- sh -*-
 # shellcheck disable=SC2034

 # dotfiles.manifest

 ## Key is name of file in dotfiles dir.
 ## Value is name of target.
 declare -A dotfiles
 dotfiles[profile]=$HOME/.profile.$USER.WORKPLACE
 dotfiles[bashrc]=$HOME/.bashrc.WORKPLACE
 dotfiles[gitconfig_WORKPLACE]=$HOME/.gitconfig.WORKPLACE
 dotfiles[config]=$HOME/.config
 dotfiles[pg_service_conf]=$HOME/.pg_service.conf
 dotfiles[pgpass]=$HOME/.pgpass
 dotfiles[git-daily-repo-check_hosts]=$HOME/.git-daily-repo-check.hosts
 dotfiles[builddeb_conf]=$HOME/.builddeb.conf
 dotfiles[SecureCRTstart]=$HOME/.SecureCRTstart

 ## Not all machines get these.
 ## Key is name of file in dotfiles dir.
 ## Value is logical true indicating the file is optional.
 ## Src/tgt mapping must be defined in dotfiles array above.
 declare -A dotfilesopt
 dotfilesopt[builddeb_conf]=1
 dotfilesopt[SecureCRTstart]=1

 ## Key is name of file in dotfiles dir.
 ## Value is permissions of target, not the link.
 ## Use this to override default permissions.
 ## Src/tgt mapping must be defined in dotfiles array above.
 declare -A dotfilesperms
 dotfilesperms[pgpass]='a-rwx,u+rw'

 ## Copies. Don't link these, copy them. Do NOT add them to dotfiles array
 ## above.
 declare -A dotfilescopies
 dotfilescopies[gitfuncs_kv]=${TILDAE:-$HOME}/.gitfuncs.kv

 ## Transformations. These should have an entry in dotfilescopies to that we
 ## don't edit the template.
 declare -A dotfilestransforms
 # shellcheck disable=SC2016 #https://github.com/koalaman/shellcheck/wiki/SC2016
 dotfilestransforms[gitfuncs_kv]='s/<USER>/$USER/g'

=back

=cut

__PODUSAGE__
