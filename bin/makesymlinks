# -*- sh -*-

# makesymlinks

# creates symlinks from any target file to the git-controlled source in
# ~/personal/dotfiles. Use this when initing a new vm.

declare opwd=$(pwd)

# create DOTFILES_OLDDIR
if [ ! -d $DOTFILES_OLDDIR ]
then
    echo -n "Creating $DOTFILES_OLDDIR for backup of any existing dotfiles in ~..."
    mkdir -p $DOTFILES_OLDDIR
    echo "done"
fi

. $DOTFILES_MANIFEST

# change to the dotfiles directory
echo -n "Changing to the $DOTFILES_DIR directory ..."
builtin cd $DOTFILES_DIR
echo "done"

# Move any existing dotfiles in to dotfiles_old directory, then create
# symlinks from the original location to the corresponding files in the
# ~/dotfiles directory.
for src in ${!dotfiles[@]}; do
    declare fullsrc=$DOTFILES_DIR/$src
    declare fulllink=${dotfiles[$src]}
    ## TODO: Replace to end marker
    if [ ! -e $fullsrc ]
    then
        echo "'$fullsrc' not found. Skipping processing of '$fulllink'."
    elif [ -h $fulllink ]
    then
        echo "'$fulllink' is already a link. Skipping processing of '$fulllink'."
    else
        if [ -f $fulllink ] || [ -d $fulllink ]
        then
            srctype='directory'; if [ -f $fulllink ]; then srctype='file'; fi
            echo "Moving existing $srctype '$fulllink' to $backup_dir so we can link it to '$fullsrc'."
            mv $fulllink $backup_dir/$(basename $fulllink).$(date '+%Y%m%d%H%M%S')
        fi
        echo "Relativizing src and link"
        declare paths
        asplit paths ':' $(relativize_two_paths $fullsrc $fulllink)
        echo "Creating symlink '${paths[2]}' to '${paths[1]}' in '${paths[0]}'."
        (builtin cd ${paths[0]}
         ln -s ${paths[1]} ${paths[2]})
    fi
    ## TODO: End marker, replace with makesymlink --backup=$DOTFILES_OLDDIR $fullsrc $fulllink
done
buildin cd $opwd
