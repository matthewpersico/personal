#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;
use List::Util qw(any);

my %opt = ( delim => '\s+' );

GetOptions( \%opt, "delim=s", "keep|k=s@", "chuck|c=s@", "silent|s", "help" )
  or die "\n";

if ( $opt{help} ) {
    print( "
usage: cols [--keep idxList [--keep idxList]...] source [source ...]
       cols [--chuck idxList [--chuck idxList]...] source [source ...]
       cols --help

       Other options: --delim 'delimiterstring'
                      --slient

       --keep and --chuck are mutex options that work as expected: one or more
         columns to either retain or remove. You can specify each option more
         than once and/or use comma delimited lists.

       'idxList' is a comma delimited list of column indexes.
         0 is the first column from the left.
         -1 is the first column from the right.
         A list can be just one item.
         Any list member can be a range using '..' as the range operator.
         Ranges can be ascending or descending and can cross through 0.

         This is a pathological example (with spaces added for clarity):

               1, 6, 3..7, 7..3, -8..-4, -4..-8, 6..-3, -3..6

       --delim is treated as a regular expression that defines column
         boundaries. Single characters are fine. Use single quotes as needed.
         The default is /\\s+/.

       --silent will suppress messages when one or more columns from the --keep
         list are not present in the current input line.

       'source' is file to read from. '-' is STDIN. You can also pipe into the
       command.
" );
    exit 0;
}

die "Stupid, either keep or chuck but don't confuse things by trying to do both"
  if ( $opt{keep} and $opt{chuck} );
die "Stupid, you gotta either keep or chuck, or else why bother?"
  if ( not $opt{keep} and not $opt{chuck} );

while (<>) {
    chomp;
    my $orig = $_;
    my @in   = split(qr($opt{delim}));
    if ( $opt{keep} ) {
        my @k = despan( @{ $opt{keep} } );
        my @undefs;
        my @ok;
        for (@k) {
            if ( not defined( $in[$_] ) ) {
                push @undefs, $_;
            } else {
                push @ok, $_;
            }
        }
        if (@undefs) {
            print "Columns @undefs not found:[$orig]\n"
              unless $opt{silent};
        } else {
            print "@in[@ok]\n";
        }
    } else {
        my @c = despan( @{ $opt{chuck} } );
        @in[@c] = map { 'CHUCKME' } @c;
        print join( ' ', grep { !m/CHUCKME/ } @in );
    }
}

sub despan {
    my @out;
    my @tmp;
    my @opts = map { split( /,/, $_ ) } @_;
    for (@opts) {
        if ( $_ =~ m/\.\./ ) {
            @tmp = split(/\.\./);
        } else {
            push @out, $_;
            next;
        }
        my $i = shift @tmp;
        if ( $i < $tmp[0] ) {
            ## 3..5 or -5..-3
            while ( $i <= $tmp[0] ) {
                push @out, $i++;
            }
        } else {
            ## 5..3 or -3..-5
            while ( $i >= $tmp[0] ) {
                push @out, $i--;
            }
        }
    }
    return wantarray ? @out : \@out;
}
