#!/usr/bin/env bash

# git-sync-with-remote

# shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"

declare opt_branch=''
declare opt_remote='origin'
declare opt_confirm='0'
declare opt_stash='0'
declare do_stash='0'
declare resp

declare OPTSARGS
OPTSARGS=$(getoptp -o hb:r:c --long help,branch:,remote:,confirm -n git-sync-with-remote -- "$@")
status=$?
((status != 0)) && script-usage && exit $status
eval set -- "$OPTSARGS"
while true
do
    case "$1" in
        -s|--stash) opt_stash=1; shift;;
        -c|--confirm) opt_confirm=1; shift;;
        -r|--remote) opt_remote="$2"; shift; shift ;;
        -b|--branch) opt_branch="$2"; shift; shift ;;
        -h|--help) script-usage; exit 0 ;;
        --) shift; break ;; ## end of opts, remaining $*, if any, are args
        *) cmd-echo "Internal error!"; script-usage; exit 1 ;;
    esac
done

if [ -z "$opt_branch" ]
then
    cmd-echo "--branch required"
    script-usage
    exit 1
fi

declare cb
cb=$(git rev-parse --abbrev-ref HEAD)
status=$?
((status != 0 )) && exit 1

if [ "$cb" == '' ]
then
    cmd-echo
    # shellcheck disable=SC2154
    cat <<EOF

git-sync-with-remote is used to keep your current git repo DEVELOPMENT branch
in your declare clone in sync with changes in

branch "${opt_branch}"
  repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you do not appear to even be in a repo. I'm exiting. Try again in a
proper repo.

EOF
    exit 1
fi

if [ "$cb" == "$opt_branch" ]
then
    cmd-echo
    declare msgoverride
    msgoverride=$(find "$(git root)" -name .git-sync-with-remote.txt)
    if [ -n "$msgoverride" ] && [ -r "$msgoverride" ]
    then
        cat "$msgoverride"
    else
        cat <<EOF

git-sync-with-remote is used to keep your current git repo DEVELOPMENT branch
in your declare clone in sync with changes in

branch "${opt_branch}"
repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you appear to be on branch "${opt_branch}",
the branch you want to sync with. I'm exiting. Get off this branch and onto
another branch. Then rerun the command. Or just do a 'git status' to check this
branch or a 'git pull' if you really need to refresh this branch.

EOF
    fi
    exit 1
fi

## Stash any modified items before checking and proceeding.
declare needs_stash
needs_stash=$( (git what is staged && git what is unstaged) | wc -w )
if ((needs_stash))
then
    if ((opt_stash))
    then
        do_stash=1
    else
        git status
        resp=$(cmd-yesno "Stash" n)
        if [ "$resp" = 'n' ]
        then
            cmd-echo "Will not proceed without a stash"
            exit 1
        else
            do_stash=1
        fi
    fi
else
    if ((opt_stash))
    then
        cmd-echo "stash not needed"
    fi
fi
if ((do_stash))
then
    git stash
    status=$?
    if [ "$status" != '0' ]
    then
        exit $status
    fi
fi

## Grab head of log
declare oldsha
oldsha=$(git-log-grab-sha -1)
cmd-echo --head 'Log before pull:'
git-log-shas-range "$oldsha" "$oldsha"

## Check the declare branch against its origin
declare stcheck
stcheck=$(mktemp -t tmp.git-sync-with-remote.check.XXXXXXXXXX)
rm_on_exit "$stcheck"
git status 1>"$stcheck" 2>&1
grep "Your branch is up.to.date with 'origin/$cb'." "$stcheck" 1>/dev/null
status=$?
if [ "$status" != '0' ]
then
    cmd-echo
    cat "$stcheck"
    cat <<EOF
Your branch should be up to date with its origin in order to simplify the
rebase.
EOF
    resp=$(cmd-yesno "Do you want to continue anyway" n)
    if [ "$resp" == 'n' ]
    then
        if ((do_stash))
        then
            cmd-echo 'Stash pop...'
            git stash pop
        fi
        exit 0
    fi
fi

cmd-echo 'Fetching to check...'
git fetch "${opt_remote}" "${opt_branch}"

declare diffoutput
diffoutput=$(mktemp -t tmp.git-sync-with-remote.diff.XXXXXXXXXX)
rm_on_exit "$diffoutput"
git diff ..."${opt_remote}" > "$diffoutput" 2>&1
declare diffc
diffc=$(wc -l < "$diffoutput")
if ((diffc)) && ((opt_confirm))
then
    cmd-echo --head "===== diffs ====="
    cat "$diffoutput"
    \rm "$diffoutput"
fi

declare logoutput
logoutput=$(mktemp -t tmp.git-sync-with-remote.log.XXXXXXXXXX)
rm_on_exit "$logoutput"
git log ..."${opt_remote}" > "$logoutput" 2>&1
declare logc
# shellcheck disable=SC2002
logc=$(wc -l < "$logoutput")

if ((logc)) && ((opt_confirm))
then
    ((diffc)) && cmd-echo
    cmd-echo "=====  log  ====="
    cat "$logoutput"
    \rm "$logoutput"
fi

if ((diffc)) || ((logc))
then
    if ((opt_confirm))
    then
        resp=$(cmd-yesno "Ok to pull" n)
        if [ "$resp" == 'n' ]
        then
            if ((do_stash))
            then
                cmd-echo 'Stash pop...'
                git stash pop
                exit 0
            fi
        fi
    fi
else
    cmd-echo "No difference with remote."
    if ((do_stash))
    then
        cmd-echo 'Stash pop...'
        git stash pop
    fi
    exit 0
fi

cmd-echo 'Pulling to sync...'
git pull --rebase "${opt_remote}" "${opt_branch}"
status=$?
if [ ! "$status" = '0' ]
then
    cmd-echo
    cat <<EOF

It appears the pull --rebase was not successful. Assuming the issue was not a
system issue, but rather related to conflicts:

1) Edit each file in conflict, looking for the (partial) conflict marker
   "<<<<<". Once you see the issue, fix the code and save the file.

2) "git add" any files you've changed.

Once any conflicts are resolved, do a "git status". You will see files under
the section "Changes to be committed" if:

1) You fixed any conflicts.

2) There are changes in the branch "${opt_branch}" that need to be added in
   that have no conflicts.

If you see any such files, run "git commit". That will complete the merge into
your branch.

Then push the branch up to your fork so you can submit a pull request.

EOF
    if ((do_stash))
    then
        cmd-echo "Leaving stash stashed so a not to further complicate the issue"
    fi
    exit 1
fi

## Grab head of log
declare newsha
newsha=$(git-log-grab-sha -1)

## Show log
cmd-echo --head 'Log after pull:'
git-log-shas-range "$oldsha" "$newsha"

## Push the merged branch back
cmd-echo --head "pull --rebase successful. Pushing..."
git push
status=$?
if [ "$status" != '0' ]
then
    resp=$(cmd-yesno "'git push' complained. Shall I re-push with --force" n)
    if [ "$resp" = 'y' ]
    then
        git push --force
        status=$?
    fi
fi

## Show log
cmd-echo --head 'Log after push:'
git-log-shas-range "$oldsha" "$newsha"

declare ask_pop=0
if [ ! "$status" = '0' ]
then
    cmd-echo
    cat <<EOF
It appears that the git push was not successful and you declined to use --force,
or the --force was also unsuccessful.
EOF
    if ((do_stash))
    then
        cmd-echo
        cat <<EOF
It may be that you decided not to force the push since you still have work to do,
in which case you will want to pop the latest stash.
EOF
        ask_pop=1
    fi
fi

if ((do_stash))
then
    resp='y'
    if ((ask_pop))
    then
        resp=$(cmd-yesno "Shall I pop the last git stash" n)
    fi
    if [ "$resp" = 'y' ]
    then
        cmd-echo 'Stash pop...'
        git stash pop
        status=$?
        if ((status != 0))
        then
            cmd-echo
            cat <<EOF
It appears that the stash pop failed. There may be conflicts. Once you fix the
conflicts, you can drop the stash, as all of the non-conflicted files were
successfully popped - that's the way that git stashes work.
EOF
            exit $?
        fi
    fi
fi

#git-sync-with-remote-usage ()
#{
#    echo "Usage: $1 --branch otherBranch [--remote remote] [--confirm]"
#    echo "       Rebase your branch from another remote branch."
#    echo "       'remote' defaults to 'origin'."
#}
