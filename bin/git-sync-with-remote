# -*- sh -*-
# shellcheck shell=bash

# git-sync-with-remote

use on_exit
use mktemp

main ()
{
    local opt_branch=''
    local opt_remote='origin'
    local opt_confirm='0'
    local opt_stash='0'
    local do_stash='0'
    local do_push='1'
    local resp

    local OPTSARGS
    if ! OPTSARGS=$(getopt -a -o scr:b:h -l stash,confirm,remote:,branch:,help,nopush -n git-sync-with-remote -- "$@"); then
        git-usage "$0"
        false; return
    fi
    eval set -- "$OPTSARGS"
    while true; do
        local option=$1
        shift
        [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
        case "$option" in
            s|stash) opt_stash=1 ;;
            c|confirm) opt_confirm=1 ;;
            r|remote) opt_remote="$1"; shift ;;
            b|branch) opt_branch="$1"; shift ;;
            h|help) git-usage "$0"; true; return ;;
            nopush) do_push=0 ;;
            --) break ;; ## end of opts, remaining $*, if any, are args
            *) cmd-echo --id git-sync-with-remote --ec -- "'$option' is an invalid option."
               git-usage "$0"
               false; return
               ;;
        esac
    done

    if [[ -z "$opt_branch" ]]; then
        cmd-echo --id git-sync-with-remote --ec "--branch required"
        git-usage "$0"
        false; return
    fi

    local cb
    if ! cb=$(git rev-parse --abbrev-ref HEAD); then
        false; return
    fi

    if [[ "$cb" == '' ]]; then
        cmd-echo --id git-sync-with-remote --ec ""
        # shellcheck disable=SC2154
        cat <<EOF

git-sync-with-remote is used to keep your current git repo DEVELOPMENT branch
in your local clone in sync with changes in

branch "${opt_branch}"
  repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you do not appear to even be in a repo. I'm exiting. Try again in a
proper repo.

EOF
        false; return
    fi

    if [[ "$cb" == "$opt_branch" ]]; then
        local msgoverride
        msgoverride=$(find "$(git root)" -name .git-sync-with-remote.txt)
        if [[ -n "$msgoverride" ]] && [[ -r "$msgoverride" ]]; then
            cmd-echo --id git-sync-with-remote ""
            cat "$msgoverride"
        else
            cmd-echo --id git-sync-with-remote --ec ""
            cat <<EOF

git-sync-with-remote is used to keep your current git repo DEVELOPMENT branch
in your local clone in sync with changes in

branch "${opt_branch}"
repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you appear to be on branch "${opt_branch}",
the branch you want to sync with. I'm exiting. Get off this branch and onto
another branch. Then rerun the command. Or just do a 'git status' to check this
branch or a 'git pull' if you really need to refresh this branch.

EOF
        fi
        false; return
    fi

    ## Stash any modified items before checking and proceeding.
    local needs_stash
    needs_stash=$( (git what is staged && git what is unstaged) | wc -w )
    if ((needs_stash)); then
        if ((opt_stash)); then
            do_stash=1
        else
            git status
            resp=$(cmd-yesno --id git-sync-with-remote "Stash" n)
            if [[ "$resp" = 'n' ]]; then
                cmd-echo --id git-sync-with-remote --ec "Will not proceed without a stash"
                false; return
            else
                do_stash=1
            fi
        fi
    else
        if ((opt_stash)); then
            cmd-echo --id git-sync-with-remote "stash not needed"
        fi
    fi
    if ((do_stash)); then
        git stash || return
    fi

    ## Refresh
    cmd-echo --id git-sync-with-remote 'Fetching all to check...'
    git fetch

    ## Grab head of log
    local oldsha
    oldsha=$(git-log-grab-sha -1)
    cmd-echo --id git-sync-with-remote --head 'Log before pull:'
    git-log-shas-range "$oldsha" "$oldsha"

    ## Check the local branch against its origin
    local stcheck
    stcheck=$(mktempfile -+ stcheck)
    rm-on-exit "$stcheck"
    git status 1>"$stcheck" 2>&1
    local origin
    origin=$(git config --get "branch.${cb}.remote")
    grep "Your branch is up.to.date with '${origin}/${cb}'." "$stcheck" 1>/dev/null
    status=$?
    if [[ "$status" != '0' ]]; then
        cmd-echo --id git-sync-with-remote --wc ""
        cat "$stcheck"
        cat <<EOF
Your branch should be up to date with its origin in order to simplify the
rebase.
EOF
        resp=$(cmd-yesno --id git-sync-with-remote "Do you want to continue anyway" n)
        if [[ "$resp" == 'n' ]]; then
            if ((do_stash)); then
                cmd-echo --id git-sync-with-remote 'Stash pop...'
                git stash pop
            else
                true;
            fi
            return
        fi
    fi

    local diffoutput
    diffoutput=$(mktempfile -+ diff)
    rm-on-exit "$diffoutput"
    git diff ..."${opt_remote}" > "$diffoutput" 2>&1
    local diffc
    diffc=$(wc -l < "$diffoutput")
    if ((diffc)) && ((opt_confirm)); then
        cmd-echo --id git-sync-with-remote --head "===== diffs ====="
        cat "$diffoutput"
        \rm "$diffoutput"
    fi

    local logoutput
    logoutput=$(mktempfile -+ log)
    rm-on-exit "$logoutput"
    git log ..."${opt_remote}" > "$logoutput" 2>&1
    local logc
    # shellcheck disable=SC2002
    logc=$(wc -l < "$logoutput")

    if ((logc)) && ((opt_confirm)); then
        ((diffc)) && cmd-echo --id git-sync-with-remote ""
        cmd-echo --id git-sync-with-remote "=====  log  ====="
        cat "$logoutput"
        \rm "$logoutput"
    fi

    if ((diffc)) || ((logc)); then
        if ((opt_confirm)); then
            resp=$(cmd-yesno --id git-sync-with-remote "Ok to pull" n)
            if [[ "$resp" == 'n' ]]; then
                if ((do_stash)); then
                    cmd-echo --id git-sync-with-remote 'Stash pop...'
                    git stash pop
                else
                    true
                fi
                return
            fi
        fi
    else
        cmd-echo --id git-sync-with-remote "No difference with remote."
        if ((do_stash)); then
            cmd-echo --id git-sync-with-remote 'Stash pop...'
            git stash pop
        else
            true
        fi
        return
    fi

    cmd-echo --id git-sync-with-remote 'Pulling to sync...'
    if ! git pull --rebase "${opt_remote}" "${opt_branch}"; then
        cmd-echo --id git-sync-with-remote --ec -- "It appears the pull --rebase was not successful."
        cmd-echo --id git-sync-with-remote -- "" \
                 "Assuming the issue was not a system issue, but rather related to conflicts:" \
                 "" \
                 "1) Edit each file in conflict, looking for the (partial) conflict marker" \
                 "   '<<<<<'. Once you see the issue, fix the code and save the file." \
                 "" \
                 "2) 'git add' any files you've changed." \
                 "" \
                 "Once any conflicts are resolved, do a 'git status'. You will see files under" \
                 "the section 'Changes to be committed' if:" \
                 "" \
                 "1) You fixed any conflicts." \
                 "" \
                 "2) There are changes in the branch '${opt_branch}' that need to be added in" \
                 "   that have no conflicts." \
                 "" \
                 "If you see any such files, run 'git commit'. That will complete the merge into" \
                 "your branch." \
                 "" \
                 "Then push the branch up to your fork so you can submit a pull request."
        if ((do_stash)); then
            cmd-echo --id git-sync-with-remote -- "Leaving stash stashed so as not to further complicate the issue." \
                     "Don't forget to 'git stash pop' after correcting the situation."
        fi
        false; return
    fi

    ## Grab head of log
    local newsha
    newsha=$(git-log-grab-sha -1)

    ## Show log
    cmd-echo --id git-sync-with-remote --head 'Log after pull:'
    git-log-shas-range "$oldsha" "$newsha"

    ## Push the merged branch back, if desired.
    if ((do_push)); then
        cmd-echo --id git-sync-with-remote --head "pull --rebase successful. Pushing..."
        git push
        status=$?
        if [[ "$status" != '0' ]]; then
            resp=$(cmd-yesno --id git-sync-with-remote "'git push' complained. Shall I re-push with --force" n)
            if [[ "$resp" = 'y' ]]; then
                git push --force
                status=$?
            fi
        fi

        ## Show log
        cmd-echo --id git-sync-with-remote --head 'Log after push:'
        git-log-shas-range "$oldsha" "$newsha"

        local ask_pop=0
        if [[ "$status" = '0' ]]; then
            cmd-echo --id git-sync-with-remote --head 'Head log record:'
            git log -1
        else
            cmd-echo --id git-sync-with-remote --wc ""
            cat <<EOF
It appears that the git push was not successful and you declined to use --force,
or the --force was also unsuccessful.
EOF
            if ((do_stash)); then
                cat <<EOF
It may be that you decided not to force the push since you still have work to do,
in which case you will want to pop the latest stash.
EOF
                ask_pop=1
            fi
        fi
    fi

    if ((do_stash)); then
        resp='y'
        if ((ask_pop)); then
            resp=$(cmd-yesno --id git-sync-with-remote "Shall I pop the last git stash" n)
        fi
        if [[ "$resp" = 'y' ]]; then
            cmd-echo --id git-sync-with-remote 'Stash pop...'
            if ! git stash pop; then
                cmd-echo --id git-sync-with-remote --ec ""
                cat <<EOF
It appears that the stash pop failed. There may be conflicts. Once you fix the
conflicts, you can drop the stash, as all of the non-conflicted files **were**
successfully popped - that's the way that git stashes work.
EOF
                false; return
            fi
        fi
    fi
}

main "$@"
exit

:<<'__PODUSAGE__'
=head1 NAME

git-sync-with-remote - sync current repo/branch with a remote.

=head1 SYNOPSIS

 git-sync-with-remote [--remote remote-ref] --branch remote-branch \
                      [--stash] [--confirm]

=head1 DESCRIPTION

TBD

=head1 OPTIONS

=over 4

=item remote

TBD

=item branch

TBD

=item stash

TBD

=item confirm

TBD

=back

=cut

__PODUSAGE__
