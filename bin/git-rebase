# -*- sh -*-
# shellcheck shell=bash

# git-rebase

use on_exit

_git_rebase_via_ilog ()
{
    local rebase_sha
    local resp
    if [[ -z "$1" ]]; then
        ## Show the current commit
        cmd-echo --id git-rebase --head 'Current commits:'
        $REALGIT log -2
        ## The first one we can rebase on is the third one in the log
        rebase_sha=$(git-log-grab-sha -3)
    else
        rebase_sha=$1
    fi

    if(($($REALGIT log "${rebase_sha}..HEAD" | grep -c -E '^commit') < 2)); then
        cmd-echo --id git-rebase -ec -- "Not enough commits to rebase on"
        false; exit
    fi

    cmd-echo --id git-rebase --head 'Rebase-able commits:'
    local prev_rebase_sha=-1
    while [[ "$prev_rebase_sha" != "$rebase_sha" ]]; do

        ## show the log
        git-log-shas-range "$rebase_sha" "$rebase_sha"

        ## check the log
        if(($($REALGIT log "${rebase_sha}..HEAD" | grep -c -E '^commit') < 2)); then
            cmd-echo --id git-rebase -ec -- "Not enough commits remaining to rebase on"
            false; exit
        fi

        resp=$(pick "Rebase on $rebase_sha" "y/n/q" 'n')
        if [[ "$resp" = 'q' ]]; then
            true; exit
        fi
        if [[ "$resp" = 'y' ]]; then
            "$REALGIT" rebase -i "$rebase_sha" || exit
            cmd-echo --id git-rebase --head 'Log is now:'
            if(($($REALGIT log | grep -c -E '^commit') > 2)); then
                $REALGIT log "${rebase_sha}^1..HEAD"
            else
                ## With less than three commits, the $REALGIT log statement above won't
                ## work; just show the whole log
                $REALGIT log
            fi
            exit
        fi

        ## Get the next log
        prev_rebase_sha=$rebase_sha
        rebase_sha=$(git-log-grab-sha -2 "$rebase_sha")
    done
}

main ()
{
    ## DO NOT attempt to convert this to a 'getopt' implementation; it would
    ## require specifying and handling every existing option in 'git rebase'
    ## and it is just not necessary.
    local -a pass_on

    while (( $# )); do
        local arg=$1
        shift
        case $arg in
            --ilog | --log )
                _git_rebase_via_ilog "$@"
                exit
                ;;
            --help | -h )
                git-usage "$0"
                true; exit
                ;;
            * )
                ## Eventually, you call the real command with "${pass_on[@]}"
                pass_on+=("$arg")
                ;;
        esac
    done

    ## If we get here, it's just a straight rebase
    "$REALGIT" rebase "${pass_on[@]}"
}

main "$@"
exit

:<<'__PODUSAGE__'
=head1 NAME

git-rebase - extension to git rebase

=head1 SYNOPSIS

git-rebase --ilog [commit_id]

=head1 DESCRIPTION

Uses the git log of the current repo to pick a starting interactive rebase point.

=head1 OPTIONS

=over 4

=item ilog

Prints the git log, one entry at at time, allowing the user to pick a starting point for an interactive rebase. If a commit id is provided, the log is started at that commit instead of at HEAD.

=back

=cut

__PODUSAGE__
