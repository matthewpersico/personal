# -*- sh -*-
# shellcheck shell=bash

# git-go-get

use mktemp
use on_exit

declare update
declare wt=1
declare only_wt=0
declare fields
declare filter
declare exact
declare limited
declare with_pr
# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='eurmwofh'
declare longopts
longopts="exact,et,exact-tail,eh,exact-head,update"
longopts="$longopts,wt,nowt,wto,fields,limited:,help"
longopts="$longopts,wpr,with-pr,npr,no-pr"

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        e | exact) exact='headtail' ;;
        et | exact-tail) exact='tail' ;;
        eh | exact-head) exact='head' ;;
        u | update) update=1 ;;
        wt)   wt=1; only_wt=0 ;;
        nowt) wt=0; only_wt=0 ;;
        wto ) wt=1; only_wt=1 ;;
        f | fields) fields=1 ;;
        wpr | with-pr ) with_pr=1 ;;
        npr | no-pr ) with_pr=2 ;;
        limited)
            ## Searches are limited to this string of comma separated
            ## directories at the start of the search.
            limited="$1"
            shift ;;
        h | help ) git-usage "$0" && { true; exit; } ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo --id git-go-get -ec -- "$option is an invalid option. See $0 --help"
            false; exit
            ;;
    esac
done
filter="$1"

declare tmpfile
tmpfile=$(mktempfile)
rm_on_exit "$tmpfile"
rm_on_exit "${tmpfile}.001"

declare gitfuncs_git_go_file
if [[ -n "$limited" ]]; then
    declare i
    declare -a tmp
    asplit "$limited" -s , -a tmp
    for i in "${tmp[@]}"; do
        echo "$i" >> "$tmpfile"
    done
else
    gitfuncs_git_go_file="${HOME}/gits/.git-go.$(date +%Y%m%d)"
    if [[ ! -e "$gitfuncs_git_go_file" ]] || ((update)); then
        git-go-set
    fi
    cp "$gitfuncs_git_go_file" "$tmpfile"

    if ((wt==0)); then
        grep -v '/wt/' "$tmpfile" > "${tmpfile}.001"
        mv "${tmpfile}.001" "$tmpfile"
    fi

    if ((only_wt==1)); then
        grep '/wt/' "$tmpfile" > "${tmpfile}.001"
        mv "${tmpfile}.001" "$tmpfile"
    fi
fi

if [[ -n "$filter" ]]; then
    declare -a grepargs
    if [[ $filter =~ ^\^ ]]; then
        filter=${filter/^/}
        grepargs+=('-v')
    else
        grepargs+=('--') # you need the -- just in case your filter has a dash
                         # in it, but not if you are using the filter with -v
    fi
    case $exact in
        headtail ) grep -E "${grepargs[@]}" "^$filter\$" "$tmpfile" > "${tmpfile}.001" ;;
        head     ) grep -E "${grepargs[@]}" "^$filter"   "$tmpfile" > "${tmpfile}.001" ;;
        tail     ) grep -E "${grepargs[@]}" "$filter\$"  "$tmpfile" > "${tmpfile}.001" ;;
        *        ) grep -i "${grepargs[@]}" "$filter"    "$tmpfile" > "${tmpfile}.001" ;;
    esac
    mv "${tmpfile}.001" "$tmpfile"
fi

if ((with_pr)); then
    declare repos
    readarray -t repos < <(cat "$tmpfile")
    for r in "${repos[@]}"; do
        (
            # The false; exit; will exit from the subshell, skipping the rest
            cd "${HOME}/$r" || { echo "Cannot cd ${HOME}/$r"; false; exit; }
            if ((with_pr==1)) && git repo pr-get 1>/dev/null 2>&1 ; then
                echo "$r"
            elif ((with_pr==2)) && ! git repo pr-get 1>/dev/null 2>&1 ; then
                echo "$r"
            fi
        )
    done > "${tmpfile}.001"
    mv "${tmpfile}.001" "$tmpfile"
fi

if((fields)); then
    tr '\n' ' ' < "$tmpfile"
else
    cat "$tmpfile"
fi
