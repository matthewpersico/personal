#!/usr/bin/env perl

# A replacement for shell getopt that respects long options on those machines
# where the shell getopt does not. Only implements the most used options from
# getopt, but adds Getopt::Long options.

use strict;
use warnings;

use Getopt::Long qw(
  GetOptionsFromArray
  :config pass_through
);

use lib $ENV{PERSONALLIB};
use Misc qw(UNIX_TRUE UNIX_FALSE);

## Options to getoptp
my %metaopt = (
    'o' => '',
    'l' => '',
    'n' => 'getoptp',
    ## These control the behavior of the parsing for the caller's
    ## options. These defaults are either getopt behavior or this scripts
    ## default from creation.
    'permute'     => 1,
    'auto_abbrev' => 1,
    'ignore_case' => 1
);

GetOptions( \%metaopt, 'o|options|short=s', 'l|long=s', 'n|name=s', 'permute!', 'auto_abbrev!',
    'ignore_case!' );

shift @ARGV if ( $ARGV[0] and $ARGV[0] eq '--' );    ## This should be the end of
## getoptp's options
## indicator.

## The options to the caller's program
my %optshort;
my %optlong;
my @optctrl;
my %opt;

for my $opt (qw(permute auto_abbrev ignore_case)) {
    Getopt::Long::Configure( ( $metaopt{$opt} ? '' : 'no_' ) . $opt );
}

if ( $metaopt{o} ) {
    ## No commas between short options and some can have ':' so the split is
    ## more involved.
    my @split;
    for ( split( //, $metaopt{o} ) ) {
        $_ eq ':' ? $split[-1] .= ':' : push @split, $_;
    }
    %optshort = map { /(.*):/ ? ( $1 => 's' ) : ( $_ => 1 ) } @split;
    push @optctrl, map { s/:/=s/; $_ } @split;
}

if ( $metaopt{l} ) {
    %optlong =
      map { /(.*)::/ ? ( $1 => ':s' ) : /(.*):/ ? ( $1 => '=s' ) : ( $_ => 1 ) }
      split( /,/, $metaopt{l} );
    push @optctrl, map { s/::$/:s/; s/:$/=s/; $_ } split( /,/, $metaopt{l} );
}

# This scan ensures that if an option with an optional arg does NOT have an
# equal sign, we do NOT take the next arg as its arg. This is how shell getopt
# works (as opposed to Getopt::Long where it will only skip the next arg in the
# absence of an '=' if the next arg looks like an option or does not match the
# spec. That works for integers but since we are only processing 's', that
# fails.
my @optorder;
my @processedARGV;
for (@ARGV) {
    if ( $_ !~ m/^-+/ ) {
        push @processedARGV, $_;
    } else {
        my $tmp = $_;
        # One dash, more then two chars, char[2] ne '=' => ganged single
        # options. Split them.
        if ( $tmp =~ /^-[^-]/ and substr( $tmp, 2, 1 ) ne '=' ) {
            my @tmp = split( //, $tmp );
            shift @tmp;
            push @processedARGV, map { "-$_" } @tmp;
            push @optorder,      map { "$_" } @tmp;
        } else {
            $tmp =~ s/^-+//;
            my @optarg = split( /=/, $tmp );
            my $fmt    = ( $optshort{ $optarg[0] } or $optlong{ $optarg[0] } );
            if ( $fmt eq ':s' and !$optarg[1] ) {
                push @processedARGV, $_, '';
            } else {
                push @processedARGV, $_;
            }
            push @optorder, ${ optarg [0] };
        }
    }
}

# Now process the options and arguments for the script calling us.
GetOptionsFromArray( \@processedARGV, \%opt, @optctrl );
my @out;
for (@optorder) {
    my $optfmt;
    if ( defined( $optshort{$_} ) ) {
        push @out, "-$_";
        $optfmt = $optshort{$_};
    } elsif ( defined( $optlong{$_} ) ) {
        push @out, "--$_";
        $optfmt = $optlong{$_};
    } else {
        die "$metaopt{n}: $_ is not a short or long opt.\n";
    }
    if ( $optfmt =~ m/s/ ) {
        push @out, "'$opt{$_}'";
    }
}
push @out, '--' if ( @processedARGV and $processedARGV[0] ne '--' );
push @out, map { "'$_'" } @processedARGV;
push @out, '--' if ( !@out or !@processedARGV );
print "@out";
exit UNIX_TRUE;

=for test_script

#!/usr/bin/env bash

opt_short_s=0
opt_short_t_with_arg=''

opt_long_vlong=0
opt_long_wlong_with_arg=''

OPTSARGS=$(perl getoptp -o st: --long vlong,wlong: -n 'testing' -- "$@")
status=$?; true # resets $?
if ((status != $?))
then
    echo "Error."
    exit $status
fi

# Reset the command line.
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true ; do
    case "$1" in
        -s | --vlong)
            echo "option $1 specified"
            shift
            ;;
        -t | --wlong)
            echo "option $1 specified"
            echo "next arg is '$2' and it modifies $1"
            shift
            shift
            ;;
        --)
            echo "end of options. args are $@"
            break
            ;;
        *) echo "option $1 illegal"
           shift
           ;;
    esac
done

=cut

=for test_cases

$  ./getoptp_test -s -t --vlong --wlong -- --foo
'--vlong' is the value for option 't', yet '--vlong' is itself a valid option.
This is probably an error; perhaps you forgot the value for 't'?.
Error.

$ ./getoptp_test -s -t -d --vlong --wlong -d -- --foo
option --wlong specified
next arg is '-d' and it modifies --wlong
option -s specified
option --vlong specified
option -t specified
next arg is '-d' and it modifies -t
end of options. args are -- --foo

=cut
