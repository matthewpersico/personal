#!/usr/bin/env perl

# A replacement for shell getopt that respects long options on those machines
# where the shell getopt does not. Only implements the most used options from
# getopt, but adds Getopt::Long options.

use strict;
use warnings;

use Getopt::Long qw(:config
  pass_through
);

## Options to getoptp
my %metaopt = (
    'o' => '',
    'l' => '',
    'n' => 'getoptp',
    ## These control the behavior of the parsing for the caller's
    ## options. These defaults are either getopt behavior or this scripts
    ## default from creation.
    'permute'     => 1,
    'auto_abbrev' => 1,
    'ignore_case' => 1
);

GetOptions( \%metaopt, 'o=s', 'l|long=s', 'n=s', 'permute!', 'auto_abbrev!',
    'ignore_case!' );

shift @ARGV if ( $ARGV[0] and $ARGV[0] eq '--' );   ## This should be the end of
## getoptp's options
## indicator.

## The options to the caller's program
my %optshort;
my %optlong;
my @optctrl;
my %opt;

for my $opt (qw(permute auto_abbrev ignore_case)) {
    Getopt::Long::Configure( ( $metaopt{$opt} ? '' : 'no_' ) . $opt );
}

if ( $metaopt{o} ) {
    ## No commas between short options and some can have ':' so the split is
    ## more involved.
    my @split;
    for ( split( //, $metaopt{o} ) ) {
        $_ eq ':' ? $split[-1] .= ':' : push @split, $_;
    }
    %optshort = map { /(.*):/ ? ( $1 => 's' ) : ( $_ => 1 ) } @split;
    push @optctrl, map { s/:/=s/; $_ } @split;
}

if ( $metaopt{l} ) {
    %optlong =
      map { /(.*):/ ? ( $1 => 's' ) : ( $_ => 1 ) } split( /,/, $metaopt{l} );
    push @optctrl, map { s/:/=s/; $_ } split( /,/, $metaopt{l} );
}

GetOptions( \%opt, @optctrl );

my @out;
for ( keys %opt ) {
    ## Special check. If the value of an option starts with - or -- and matches
    ## an entry in optctrl, odds are you're missing a value for the option and
    ## have glommed the next option as the value.
    if ( $opt{$_} =~ m/^-{1,2}/ ) {
        ( my $nodash = $opt{$_} ) =~ s/-{1,2}//;
        if (   defined( $optshort{$nodash} )
            or defined( $optlong{$nodash} ) )
        {
            die join( "\n",
"'$opt{$_}' is the value for option '$_', yet '$opt{$_}' is itself a valid option.",
"This is probably an error; perhaps you forgot the value for '$_'?.\n"
            );
        }
    }

    my $optfmt;
    if ( defined( $optshort{$_} ) ) {
        push @out, "-$_";
        $optfmt = $optshort{$_};
    } elsif ( defined( $optlong{$_} ) ) {
        push @out, "--$_";
        $optfmt = $optlong{$_};
    } else {
        die "$metaopt{n}: $_ is not a short or long opt";
    }
    if ( $optfmt eq 's' ) {
        push @out, "'$opt{$_}'";
    }
}
push @out, '--' if ( @ARGV and $ARGV[0] ne '--' );
push @out, map { "'$_'" } @ARGV;
push @out, '--' if ( !@out or !@ARGV );
print "@out";
exit 0;

=for test_script

#!/usr/bin/env bash

opt_short_s=0
opt_short_t_with_arg=''

opt_long_vlong=0
opt_long_wlong_with_arg=''

OPTSARGS=$(perl -d:ptkdb getoptp -o st: --long vlong,wlong: -n 'testing' -- "$@")
status=$?
if ((status != 0))
then
    echo "Error."
    exit $status
fi

# Reset the command line.
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true ; do
    case "$1" in
        -s | --vlong)
            echo "option $1 specified"
            shift
            ;;
        -t | --wlong)
            echo "option $1 specified"
            echo "next arg is '$2' and it modifies $1"
            shift
            shift
            ;;
        --)
            echo "end of options. args are $@"
            break
            ;;
        *) echo "option $1 illegal"
           shift
           ;;
    esac
done

=cut

=for test_cases

$  ./getoptp_test -s -t --vlong --wlong -- --foo
'--vlong' is the value for option 't', yet '--vlong' is itself a valid option.
This is probably an error; perhaps you forgot the value for 't'?.
Error.

$ ./getoptp_test -s -t -d --vlong --wlong -d -- --foo
option --wlong specified
next arg is '-d' and it modifies --wlong
option -s specified
option --vlong specified
option -t specified
next arg is '-d' and it modifies -t
end of options. args are -- --foo

=cut
