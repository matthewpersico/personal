# -*- sh -*-

#
# logit
#

# Take args, treat as a command + args and run all output to a file.

usage ()
{
    cat <<EOUSAGE
logit [ --tee ] \\
      [ --log log_basename ] \\
      [ --dir log_directory ] \\
      [ [--edit ] || --editor "command" ] \
      [ --purge | --purgeprior ] \\
      [ -- ] \\
      command [arg ..]

logit [ --help | -h ]

      --tee    - Spin up a terminal and show the log
                 output in it as it is generated.

      --log    - Provide a name for the log if the command is
                 generic.

      --dir    - Put the logs in specifed directory, not
                 current working directory. If not specified
                 and there is a 'logit' subdir of the current
                 working directory, logs will be placed in './logit'.

      --edit   - Run \$EDITOR ($EDITOR) on the log file when complete.

      --editor - Run "command" on the log file when complete.

      --purge  - Remove all similarly named log files before
                 running the command.

      --purgeprior -
                 Remove all similarly named log files before
                 running the command, but keep those with
                 today's date in the log name.

      --       - Ends options to logit. Command and its options
                 follow. Only needed if one or more logit options
                 are specified.

      --help  - show this text.
EOUSAGE
    exit $1
}

# Inits
logfile=''
logdir=''
teeit=0
edit=''
purge=''

# Read the options and args from command line.
GETOPTOUT=`getopt -o h -l tee,log:,dir:,edit,editor:,purge,purgeprior,help,cmd -n 'logit' -- "$@"`
status=$?
((status != 0)) && echo "Exiting." && exit $status

# Reset the command line.
eval set -- "$GETOPTOUT"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true ; do
    case "$1" in
        -h|--help)
            usage 0 ;;
        --log)
            logfile="$2"
            shift 2 ;;
        --dir)
            logdir="$2"
            shift 2 ;;
        --tee)
            teeit=1
            shift ;;
        --edit)
            edit="$EDITOR"
            shift ;;
        --editor)
            edit="$2"
            shift 2 ;;
        --purge)
            purge=all
            shift ;;
        --purgeprior)
            purge=prior
            shift ;;
        --) shift ; break ;; ## VITAL!!! Exits the while loop, no more options
        *) echo "Internal error!" ; usage 1 ;;
    esac
done

# Arg checking
if [ -z "$1" ]
then
    echo "Command required."
    usage 1
fi

command=$1
shift
args="$@"

if [ ! -x $command ]
then
    fullcommand=$(which $command 2>/dev/null)
    if [ -z "$fullcommand" ]
    then
        isafunc=$(type $command | head -1)
        if [ "$isafunc" != "$command is a function" ]
        then
            echo "'$command' is not a function or not found or not executable."
            usage 1
        fi
    fi
fi

# Log file setup
[ -z "$logfile" ] && logfile=$(basename $command)
logfileroot="${logfile}.logit"
now=$(date +%Y_%m_%dT%H_%M_%S)
logfile="${logfile}.logit.${now}"
today=${now%%T*}

if [ -z "$logdir" ]
then
    logdir=$(pwd)
    [ -d ./logit ] && logdir=$(pwd)/logit
fi

logspec="$logdir/$logfile"
logspecroot="$logdir/$logfileroot"
if [ -n "$purge" ]
then
    if [ "$purge" = 'all' ]
    then
        echo "Purging ${logspecroot}*"
        rm -f ${logspecroot}*
    else
        ## prior day
        echo "Purging ${logspecroot}*, keeping $today"
        local rmlist=$(ls ${logspecroot}* 2>/dev/null | grep -v logit.${today})
        [ -n "$rmlist" ] && rm -f $rmlist
    fi
fi

touch $logspec ## Critical for tee below
logmsg="Logfile is: $logspec"
echo $logmsg

# And off we go...
echo "Working..."

if ((teeit))
then
    termer=''
    for i in xterm rxvt mrxvt
    do
        [ -z "$termer" ] && [ -n "$(which $i 2>/dev/null)" ] && termer=$(which $i)
    done
    $termer -g 132x40 -title "logit tee on $(hostname)" -e tail -f $logspec &
    sleep 2 ## Give the terminal a chance to come up and start tailing so we
            ## see the whole log in the tali
fi

(
    if [ -n "$(git rev-parse --git-dir 2>/dev/null)" ]
    then
        echo "********************"
        echo "      git info      "
        echo "********************"
        git log -1
        git status
        echo
    fi

    echo "********************"
    echo "      Command       "
    echo "********************"
    echo $command $args
    echo

    echo "********************"
    echo "       Output       "
    echo "********************"
    $command $args
    status=$?
    echo

    echo "********************"
    echo $logmsg
    echo "Exit status: $status"
    echo "********************"
    exit $status
) >> $logspec 2>&1
status=$?
echo "$logmsg"
echo "Exit status: $status"

if [ -n "$edit" ]
then
    $edit $logspec &
fi

exit $status
