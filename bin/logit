# -*- sh -*-
# shellcheck shell=bash

# logit

use mktemp
use on_exit

# Inits
declare logfile=''
declare opt_add_args_to_logfile=0
declare logdir=''
declare teeit=0
declare guiit=0
declare gui_only=0
declare browserit=0
declare browser_only=0
declare tsit=0
declare edit=''
declare edit_echo=''
declare edit_on_fail=''
declare purge=''
declare notimestamp=''
declare attime=''
declare isat=0
declare -a gui_geo
declare opt_logonly=0
declare -a envs
declare teeppid=''
declare teedir=''

declare -a original_argv
original_argv+=("$0" "$@")

# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='kz'
declare longopts

ajoin longopts -s , \
      help \
      aa at: isat logonly log: dir: \
      tee teeppid: teedir: tpe tpae tppe tpye \
      gui gui-only gw: gh: gpe gpae gppe gpye \
      browser browser-only bpe bpae bppe bpye \
      edit-echo edit edit-on-fail \
      purge purgeprev purgeyesterday \
      reinvoke: notimestamp ts env:

# Process the command line, first time around.
if ! OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@"); then
    declare d0
    d0=$(basename "$0")
    cmd-echo --id logit --ec -- \
             "If the error here ^ was" \
             "     ${d0}: unrecognized option..." \
             "then ${d0} read an option to your program as its own."\
             "Add -- as the last ${d0} option right before your command."\
             "Otherwise, did you type a wrong option, like maybe"\
             "--tail instead of --tee?"
    false; exit
fi

# Reset the command line ($@).
eval set -- "$OPTSARGS"
declare opts_count=0

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        h|help)
            bash-usage "$0"; true; exit ;;
        aa )
            opt_add_args_to_logfile=1
            ;;
        at )
            if ((opts_count)); then
                echo "--at must be first option"
                false; exit
            fi
            attime="$1"
            shift
            atfile=$(mktempfile -+ at)
            echo "logit --isat $*" > "$atfile"
            chmod +x "$atfile"
            at -m -f "$atfile" "$attime"
            sleep 5
            echo
            true; exit
            ;;
        isat)
            isat=1
            ;;
        logonly )
            opt_logonly=1
            ;;
        log)
            logfile="$1"
            shift ;;
        dir)
            logdir="$1"
            shift ;;
        tee)
            teeit=1
            ;;
        teeppid)
            teeppid="$1"
            shift ;;
        teedir)
            teedir="$1"
            shift ;;
        tpe | tpae | tppe | tpye )
            teeit=1
            purge=all
            case "$option" in
                tppe)
                    purge=prev
                    ;;
                tpye)
                    purge=yesterday
                    ;;
            esac
            edit="$LOGIT_EDITOR"
            [[ -z "$edit" ]] && edit="$EDITOR"
            ;;
        gui | gui-only | gw | gh)
            guiit=1
            gui_geo=(--width 1320 --height 800)
            case "$option" in
                gw) gui_geo[1]="${1}"; shift;;
                gh) gui_geo[3]="${1}"; shift;;
                gui-only)
                    gui_only=1;;
                gui) : ;;
            esac
            ;;
        gpe | gpae | gppe | gpye )
            guiit=1
            edit="$LOGIT_EDITOR"
            [[ -z "$edit" ]] && edit="$EDITOR"
            purge=all
            case "$option" in
                gppe)
                    purge=prev
                    ;;
                gpye)
                    purge=yesterday
                    ;;
            esac
            ;;
        browser )
            browserit=1 ;;
        browser-only )
            browserit=1
            browser_only=1;;
        bpe | bpae | bppe | bpye )
            browserit=1
            edit="$LOGIT_EDITOR"
            [[ -z "$edit" ]] && edit="$EDITOR"
            purge=all
            case "$option" in
                bppe)
                    purge=prev
                    ;;
                bpye)
                    purge=yesterday
                    ;;
            esac
            ;;
        edit-echo)
            edit_echo=1
            ;& ## unconditional dropthrough
        edit)
            edit="$LOGIT_EDITOR"
            [[ -z "$edit" ]] && edit="$EDITOR"
            ;;
        edit-on-fail)
            edit_on_fail="$LOGIT_EDITOR"
            [[ -z "$edit_on_fail" ]] && edit_on_fail="$EDITOR"
            ;;
        purge)
            purge=all
            ;;
        purgeprev)
            purge=prev
            ;;
        purgeyesterday)
            purge=yesterday
            ;;
        reinvoke )
            declare log=$1; shift
            if [[ ! -r "$log" ]]; then
                cmd-echo --id logit --ec -- "'$log' does not exist"
                false; exit
            fi
            declare -a cmd
            read -r -a cmd < <(head -4 "$log" | tail -1)
            exec "${cmd[@]}"
            ;;
        notimestamp)
            notimestamp=1
            ;;
        ts)
            tsit=1
            ;;
        env)
            asplit "$1" -s , -a envs
            export eval "${envs[@]}"
            shift ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo --id logit -ec -- "$option is an invalid option; you probably forgot to add a -- option between the logit options and the command to run. See $0 --help"
            false; exit ;;
    esac
done

if ((isat)) \
       && { (( teeit+guiit+browserit )) \
                || \
                [[ -n "${edit}${edit_on_fail}" ]]; }; then
    echo "Cannot use --at with any of of the --tee, --gui, --browser, --edit, or --edit_on_fail options."
    bash-usage "$0"; false; exit
fi

# Arg checking
if [[ -z "$1" ]]; then
    echo "Command required."
    bash-usage "$0"; false; exit
fi

declare command
declare -a cmdargs

for arg in "$@"; do
    if [[ -z $command ]]; then
        command="$arg"
    else
        cmdargs+=("$arg")
    fi
done

if [[ ! -x "$command" ]]; then
    fullcommand=$(type -P "$command" 2>/dev/null)
    if [[ -z "$fullcommand" ]]; then
        isafunc=$(type -t "$command")
        if [[ $isafunc != "function" ]] \
        && [[ $isafunc != "alias" ]]; then
            echo "'$command' is not a function or alias and it either cannot not be found on PATH or is not executable."
            false; exit
        fi
    fi
fi

# Log file setup
[[ -z "$logfile" ]] && logfile=$(basename "$command")
if (( opt_add_args_to_logfile )); then
    declare aatl
    ajoin aatl -s , "${cmdargs[@]}"
    aatl=${aatl// /,,}
    logfile="${logfile}.${aatl}"
fi
logfileroot="${logfile}.logit"
now=$(date +%Y_%m_%dT%H_%M_%S)
logfile="${logfileroot}"
if [[ "$notimestamp" = '' ]]; then
    logfile="${logfile}.${now}.$$"
    export LOGIT_TIMESTAMP="$now"
fi
today=${now%%T*}

if [[ -z "$logdir" ]]; then
    if [[ $logfile =~ / ]]; then
        logdir=$(dirname "$logfile")
        logfile=$(basename "$logfile")
    else
        logdir=${PWD}
        [[ -d ./.logit ]] && logdir=${PWD}/.logit
    fi
fi

logspec="$logdir/$logfile"
logspecroot="$logdir/$logfileroot"
export LOGIT_SPEC="$logspec"
if [[ -n "$purge" ]]; then
    declare -a rmlist
    if [[ "$purge" = 'all' ]]; then
        echo "Purging ${logspecroot}*"
        rm -f "${logspecroot}"*
    elif [[ "$purge" = 'prev' ]]; then
        ## 0th log by time, descending
        echo -n "Purging ${logspecroot}*, removing the latest"
        declare rmlist
        rmlist=$(ls -t "${logspecroot}"* 2>/dev/null)
        if [[ -n "${rmlist[0]}" ]]; then
            rm -f "${rmlist[0]}"
            echo ", ${rmlist[0]}"
        else
            echo
        fi
    elif [[ "$purge" = 'yesterday' ]]; then
        ## prior day
        echo "Purging ${logspecroot}*, keeping $today"
        declare tmps
        readarray tmps < <(ls -rt "${logspecroot}"* 2>/dev/null)
        declare tmp
        for tmp in "${tmps[@]}"; do
            [[ ! $tmp =~ logit.${today} ]] && rmlist+=("$tmp")
        done
         [[ -n "${rmlist[0]}" ]] && rm -f "${rmlist[@]}"
    fi
fi

touch "$logspec" ## Critical for tee below
if ((gui_only == 1 )); then
    logmsg='--gui-only, log will not be retained'
elif ((browser_only == 1 )); then
    logmsg='--browser-only, log will not be retained'
else
    logmsg="Logfile is: $logspec"
fi

if ((! isat)); then
    echo "$logmsg"
    echo "Working..."
fi

if ((opt_logonly)); then
    echo '--logonly specified. Run these commands:'
    (( ${#envs[@]} )) && echo -n "${envs[*]} "
    echo "$command ${cmdargs[*]}" '2>&1 | tee ' "$logspec"
    true; exit
fi

if ((teeit || guiit || browserit)); then
    declare termer=''

    declare -a terms
    ((guiit)) && terms+=('yad')
    ((browserit)) && [[ -n "$BROWSER" ]] && terms+=('browser')
    terms+=(xterm rxvt mrxvt)
    declare termer
    declare termcmd
    declare fulltermcmd
    for termer in "${terms[@]}"; do
        if [[ $termer == 'browser' ]]; then
            termcmd="$BROWSER"
        else
            termcmd=$termer
        fi
        fulltermcmd="$(type -P "$termcmd" 2>/dev/null)"
        if [[ -n $fulltermcmd ]]; then
            break
        fi
    done

    declare title
    title="logit tee of '$command ${cmdargs[*]}' on $(hostname)"
    ((!gui_only)) && ((!browser_only)) && title="$title [log is $logspec]"

    if [[ $termer =~ yad ]]; then
        $fulltermcmd --text-info --tail \
                "${gui_geo[@]}" \
                --title "$title" \
                < <(tail -f "$logspec") \
            &
    elif [[ $termer =~ browser ]]; then
        to-browser tail -f "$logspec" &
    else
        if [[ -z $teeppid ]]; then
            teeppid=$PPID
        fi
        if [[ -z $teedir ]]; then
            teedir=$(pwd)
        fi

        # Size the popup tailing xterm with respect to screen real estate.
        declare termheight
        termheight=$(x-current-root --height)
        if ((termheight >1024)); then termheight=40; else termheight=20; fi

        declare -a colors
        colors=('-fg' "$(xterm-cli --pid "${teeppid}" --pwd "${teedir}" foreground)" '-bg' "$(xterm-cli --pid "${teeppid}" --pwd "${teedir}" background)")

        $fulltermcmd -g 132x${termheight} \
                -title "$title" \
                "${colors[@]}" \
                -e tail -f "$logspec" \
            &
    fi
    sleep 2 ## Give the $termer a chance to come up and start tailing so we
            ## see the whole log in the tail

    ## Grabs the line that is the process entry for the tail command, prints the first number it finds (the pid)
    # shellcheck disable=SC2009 #https://github.com/koalaman/shellcheck/wiki/SC2009
    tailpid=$(ps -ef | grep "$logspec" | grep 'tail -f' | grep -v "$termer" | perl -an -e 'for(@F){/[0-9]+/ && do {print $_; exit}}')
    ## Grabs the line that is the process entry for the output of the tail command, prints the first number it finds (the pid)
    # shellcheck disable=SC2009 #https://github.com/koalaman/shellcheck/wiki/SC2009
    termerpid=$(ps -ef | grep "$logspec" | grep 'tail -f' | grep "$termer" | perl -an -e 'for(@F){/[0-9]+/ && do {print $_; exit}}')

    if [[ $termer =~ gui ]]; then
        ## Ending the gui process doesn't end the tail and exiting this
        ## program doesn't end the tail either. We must arrange for it to
        ## explicitly end when this program exits. Otherwise, the tails pile up
        ## in the process table. Also make sure that we flush the log and wait
        ## before we kill that tail so that all the output ends up in the log.
        declare cmds="echo >> $logspec \
                      && sleep 2 \
                      && ps -p $tailpid >/dev/null 2>/dev/null \
                      && kill $tailpid >/dev/null 2>/dev/null"
        if((gui_only)); then
            cmds="$cmds && rm -f $logspec"
        fi
        do_on_exit "$cmds"
    fi
fi

(
    echo "********************"
    echo "  logit invocation"
    echo "********************"
    echo "${original_argv[@]}"
    echo

    echo "********************"
    echo "     log file"
    echo "********************"
    echo "$logspec"
    echo

    if [[ -n "$(git rev-parse --git-dir 2>/dev/null)" ]]; then
        echo "********************"
        echo "      git info"
        echo "********************"
        echo
        echo "Latest log entry:"
        git log -1
        echo
        echo "Status:"
        git status
        echo

        tmpf=$(mktempfile logit)
        rm_on_exit "$tmpf"
        git stash list >>"$tmpf" 2>&1
        if [[ -s "$tmpf" ]]; then
            echo "Stashes:"
            cat "$tmpf"
            echo
        fi
        rm -rf "$tmpf"
    fi

    echo "********************"
    echo "        cwd"
    echo "********************"
    pwd
    echo

    echo "********************"
    echo "      command"
    echo "********************"
    (( ${#envs[@]} )) && echo "export ${envs[*]}"
    echo "$command ${cmdargs[*]}"
    echo

    echo "********************"
    echo "     execution"
    declare start_at
    start_at=$(date +%s)
    echo "start time: $(date --date=@"$start_at")"
    "${envs[@]}"
    echo "********************"

    if((tsit)); then
        $command "${cmdargs[@]}" | perl -pe 'use POSIX strftime; use Time::HiRes gettimeofday;
                    $|=1;
                    select((select(STDERR), $| = 1)[0]);
                    ($s,$ms)=gettimeofday();
                    $ms=substr(q(000000) . $ms,-6);
                    print strftime "[%Y-%m-%d %H:%M:%S.$ms]", localtime($s)'
    else
        $command "${cmdargs[@]}"
    fi
    declare status=${PIPESTATUS[0]}

    echo "********************"
    echo "$logmsg"
    echo "exit status: $status"
    declare end_at
    end_at=$(date +%s)
    echo "end time: $(date --date=@"$end_at")"
    echo "elapsed seconds: $((end_at-start_at))"
    echo "********************"
    exit "$status"
) >> "$logspec" 2>&1
declare status=$?
if (( !isat)); then
    echo "$logmsg"
    echo "Exit status: $status"
    grep 'elapsed seconds:'  "$logspec"
fi

declare -a editcmd
if [[ -n "$edit" ]]; then
    read -r -a editcmd < <(echo "$edit")
elif [[ ! "$status" = '0' ]] && [[ -n "$edit_on_fail" ]]; then
    read -r -a editcmd < <(echo "$edit_on_fail")
fi

if [[ "${editcmd[0]}" =~ emacs\  ]]; then
    width=$(perl -n -e 'length($_)>$x and $x=length($_);END{print $x}' "$logspec");
    lineheight=$(( ($(x-current-root --height)-100) / 30 ))
    logheight=$(wc -l < "$logspec")
    if (( lineheight <= logheight )); then
        height=$lineheight
    else
        height=$logheight
    fi
    declare xtermxy xtermx xtermy
    xtermxy=$(xterm-cli --pid "${teeppid}" --pwd "${teedir}" location get)
    xtermx=$((${xtermxy%%:*}+20))
    xtermy=$((${xtermxy##*:}+20))
    editcmd+=('-g' "${width}x${height}+${xtermx}+${xtermy}")
fi
if [[ -n "${editcmd[0]}" ]]; then
    if [[ -n "$edit_echo" ]]; then
        echo "${editcmd[@]}" "$logspec"
    else
        "${editcmd[@]}" "$logspec" &
        [[ -n $tailpid ]] && kill "$tailpid" >/dev/null 2>/dev/null
        [[ -n $termerpid ]] && kill "$termerpid" >/dev/null 2>/dev/null
    fi
fi
exit $status

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<__USAGE__
logit [ --at time ] \\
      [ --env [FOO=BAR[,FOO2=BAR2... ] ]] \\
      [ --tee | \\
        [ --gui[-only]|-gh:height|-gw:width ] | \\
        [ --browser[-only] ] ] \\
      [ --teeppid pid ] \\
      [ --teedir dir ] \\
      [ --log log_basename ] \\
      [ --aa ]
      [ --notimestamp ] \\
      [ --dir log_directory ] \\
      [ [ --edit ] | [ --edit-echo ] | [ --edit-on-fail ] ] \\
      [ --purge | --purgeprev | --purgeyesterday ] \\
      [ --tp[[|a]|y|pe ] \\
      [ --gp[[|a]|y|pe ] \\
      [ --bp[[|a]|y|pe ] \\
      [ --ts ] \\
      [ -- ] \\
      command [arg ..]

logit [ --reinvoke log ]

logit [ --help | -h ]

Capture all the output of the command and some information about the executing
environment into a log file.

Tip: For command

  logit somecommand --options args

you can use 'nohup' and backgrounding (&) to execute it so that exiting the
terminal you started the command with does not kill your command:

  nohup logit somecommand --options args &

OPTIONS:
      --at     - Run the command on an 'at' queue at the
                 specified time. '--at' must be the first option,
                 if specified.

      --env    - comma separated pairs of VAR=value definitions. You can
                 also just put these before the 'logit' call, but then you
                 won't have them noted in the logit log file. Using '--env'
                 will document them on the command line print out.

      --tee    - Spin up a terminal and show the log output in it as it is
                 generated.

      --teeppid
               - We try to find the window from which logit was invoked in
                 order to locate the terminal used for teeing near that
                 window. If logit is invoked from a command line, then that
                 window's pid is PPID inside logit. But if logit is invoked
                 inside another script, that doesn't work. Rather than try to
                 walk the process tree, just feed the window's pid into logit.
                 generated.

      --teedir - We try to find the window from which logit was invoked in
                 order to locate the terminal used for teeing near that
                 window. Part of that is locating the window by title, which
                 include the current working directory. If ths current working
                 directory changes in a script before we invoke the tee, use
                 this argument to specify the pwd of the script before cd'ing.

      --gui
               - Spin up a gui text dialog and show the log output in it as it
                 is generated. If a gui is not available, we fall back to
                 --tee.

      --gui-only
               - Spin up a gui text dialog and show the log output in it as it
                 is generated. Delete the underlying log file when done.  If a
                 gui is not available, we fall back to --tee and retain the
                 log.

      --gh:height
      --gw:width
               - Spin up a gui text dialog as with '--gui', and also change the
                 size.  If a gui is not available, we fall back to --tee and
                 retain the log.

      --browser
               - Start a browser and show the log output in it as it is
                 generated. If \$BROWSER (currently $BROWSER) is not set or the
                 specified browser is not available, we fall back to --tee.

      --browser-only
               - Start a browser and show the log output in it as it is
                 generated. Delete the underlying log file when done. If
                 \$BROWSER (currently $BROWSER) is not set or the specified
                 browser is not available, we fall back to --tee and retain the
                 log.

      --log    - Provide a root name for the log if the command is generic.

      --dir    - Put the logs in specifed directory. If not specfied, logs will
                 be placed in the './.logit' subdir, if it exists. Otherwise,
                 logs will be placed in the current directory.

      --aa     - Short for 'add args'. Concatinates all the arguments to the
                 command into one string, using '-' as a separator and appends
                 that string to the base logfile name with a dot. Useful if
                 logging multiple invocations of a command differing only in the
                 arguments.

      --notimestamp
               - Do not add a timestamp or the pid of the logit process to the
                 log name.  Use if the log name provided by --log is unique or
                 you don't care about overwriting logs.

      --edit   - Look for \$LOGIT_EDITOR (currently: $LOGIT_EDITOR), then
                 \$EDITOR (currently: $EDITOR). Run the first one found in order
                 to edit log file when the command exits.

      --edit-echo
               - Look for \$LOGIT_EDITOR (currently: $LOGIT_EDITOR), then \$EDITOR
                 (currently: $EDITOR). Echo the command that would have been generated for
                 --edit. This allows you to decide whether or not to edit the
                 log.

      --edit-on-fail
               - Look for \$LOGIT_EDITOR (currently: $LOGIT_EDITOR), then \$EDITOR
                 (currently: $EDITOR). Run the first one found in order to edit the log
                 file if the command fails.

      --purge  - Remove all similarly named log files before
                 running the command.

      --purgeprev
               - Remove only the latest log file. Allows you to keep an initial
                 log, remove the intermediate failures and have a successful
                 log to compare with.

      --purgeyesterday
               - Remove all similarly named log files before
                 running the command, but keep those with
                 today's date in the log name.

      --tpe|tpae
               - A shortcut for --tee --purge --edit, the three most commonly
                 used switches. 'pa' is purge all, which is the default.

      --tppe   - A shortcut for --tee --purgeprev --edit.

      --tpye   - A shortcut for --tee --purgeyesterday --edit.

      --gpe|gpae
               - A shortcut for --gui --purge --edit. 'pa' is purge all, which
                 is the default.

      --gppe   - A shortcut for --gui --purgeprev --edit.

      --gpye   - A shortcut for --gui --purgeyesterday --edit.

      --bpe|bpae
               - A shortcut for --browser --purge --edit. 'pa' is purge all, which
                 is the default.

      --bppe   - A shortcut for --browser --purbeprev --edit.

      --gpye   - A shortcut for --browser --purgeyesterday --edit.

      --ts     - Use the 'ts' command to prepend a time stamp to each
                 output line.

      --       - Ends options to logit. Command and its options
                 follow. Only needed if one or more logit options
                 are specified.

      --reinvoke
               - Grab the command from the given log file and rerun it.

      --help   - show this text.

      FOO=BAR  - Any environment variables you want to set before
                 running your command should be set before calling
                 logit.

ENVIRONMENT VARIABLES

The following are exported and available for use in the logged command:

      LOGIT_TIMESTAMP - the timestamp that is apploed to the log file name. Use it to
                        name files and directories that match the log file for ease
                        of tracking.

      LOGIT_SPEC      - the name of the log file.

__USAGE__

#  LocalWords:  fi
