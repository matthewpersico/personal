# -*- sh -*-
# shellcheck shell=bash

# git-status

process_group ()
{
    declare group_ref
    group_ref=$(git wt get-name)
    if [[ -z $group_ref ]]; then
        group_ref=$(git branch --show-current)
        if [[ -z $group_ref ]]; then
            cmd-echo --wc --title --id "git status --group" "No worktree or branch reference to group"
            return
        fi
    fi

    local -a wts
    readarray -t wts < <(git go --listfull "$group_ref")
    local sibling
    for sibling in "${wts[@]}";
    do
        (
        if [[ "${PWD}" =~ $sibling ]]; then
            cmd-echo --infoc --title --id "git status --group" "(current) $sibling"
        else
            cmd-echo --infoc --title --id "git status --group" "$sibling"
            # shellcheck disable=SC2164 #https://github.com/koalaman/shellcheck/wiki/SC2164
            cd "$sibling"
        fi
        git stx "$@"
        )
    done
}

main ()
{
    if [[ $1 =~ -ext$ ]];
    then
        shift
    else
        "$REALGIT" status "$@"
        return
    fi

    if [[ "$1" =~ ^-+h ]]; then
        git-usage "$0"
        return
    fi

    if [[ "$1" =~ ^-+group ]]; then
        shift
        process_group "$@"
        return
    fi

    declare -a git_repo_args=('status')
    if [[ "$1" =~ ^-+update ]]; then
        git_repo_args+=('--update')
        shift
    fi

    local color
    color='--color=never'
    if [[ "$1" == --nocolor ]]; then
        shift
    else
        { [[ -t 1 ]] || [[ -p /dev/stdout ]] ; } && color="--color=always"
    fi

    echo
    local lines
    lines=$(git log $color -1 | wc -l)
    local line_limit=20 # 4 header + 16 log text.
    if ((lines > line_limit)); then
        echo "=== Latest log entry (first $line_limit lines):"
        git log $color -1 | head -$line_limit
        echo '    ...'
    else
        echo "=== Latest log entry:"
        git log $color -1
    fi

    if (( $(git comment --show | wc -l) )); then
        echo
        echo "=== Comments:"
        git comment --show
    fi
    echo
    echo "=== Status:"
    local outcmd='cat'
    if is-interactive; then
        outcmd=${PAGER:-less}
        [[ $outcmd =~ 'less' ]] && outcmd="$outcmd -RE"
    fi
    local -a args
    local arg
    for arg in "${@}"; do
        if [[ $arg == -uno ]]; then
            args+=('--uno')
        else
            args+=("$arg")
        fi
    done
    git-status-with-source-ctrl-log $color "$@" | grep -v "No files specified" | $outcmd

    git repo "${git_repo_args[@]}"
}

main "$@"
exit

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
=head1 NAME

git-status - extended git status

=head1 SYNOPSIS

 git status -ext \
        [--[no]sclonly | --[no]gcsonly] \
        [--sclpick 'comment fragment to match' ] \
        [--noun[tracked] \
        [--diff[=gitdiffopts] [--cached]] [--edit] \
        [--color [always|never] | --nocolor] \
        [--update] \
        [filename [filename...]]

 git status -ext --help

=head1 DESCRIPTION

Run a B<git status>, interleaving the entries from B<SourceCtrlLog> and B<git
diff>.

=head1 ARGUMENTS

=over 4

=item filename

One or more files on which to run B<git status>. With no files, process all
files that would appear in a B<git status> command.

In either case, then apply the filtering options below.

=back

=head1 OPTIONS

=over 4

=item --[no]sclonly

Do [not] print status for items that have an entry in B<SourceCtrlLog>. Default
is to print for both.

Aliases: --[no]sclo, --[no]sco

=item --[no]gcsonly

Do [not] print status for items that have a B<Git Commit Skip> marker in their
code. Default is to print for both.

Aliases: --[no]gcso, --[no]gco

=item --sclpick

Only show entries whose comments contain the comment fragment presented.

=item --noun[tracked]

Do not print status for untracked items. Default is to print them.

=item --diff[=gitdiffopts]

Also mix in the B<git diff> of the item. Any options you want to feed to C<git diff> can be added to the flag, comma separated. The '=' is required to disambuguate git diff options from git-status options.

=item --cached

Do the B<git diff> with the --cached flag.

=item --edit

With L</--diff> or L</--nosclonly> or L</--gcsonly>, if the file has a diff or
has no source control log entry or a gcs marker, edit it in B<$EDITOR>. This
makes it easy to add entries where there are none or ammend existing entries in
conjunction with the status output as it scrolls by or remove the markers.

=item --color

Specify if coloring the output or not using B<git --color> options.

=item --nocolor

Alias for B<--color never>.

=item --update

Go out and update the C<git repo> status, i.e.; check for related pull request,
don't use the cached value.

=back

=cut

__PODUSAGE__
