#!/usr/bin/env bash

# shellcheck disable=SC2230
REALCP=$(type -P -a cp | grep -v "$0" | head -1)

usage ()
{
    (
        [ -n "$*" ] && cmd-echo -- "$@"
        echo "** Extended actions **"
        script-usage
        echo
        echo "** Standard actions **"
        "$REALCP" --help
    ) 2>&1 | ${PAGER:-less}
}

## DO NOT attempt to convert this to a 'getopt' implementation; it would
## require specifying and handling every existing option in 'cp'
## and it is just not necessary.
declare opt_reverse=0
declare opt_mirror=0

declare -a pass_on
declare -a our_opts
while (( $# ))
do
    declare arg=$1
    shift
    case $arg in
        --reverse )
            opt_reverse=1
            ## Eventually we'll remove these do_* default assignments and let
            ## the user decide, but for now, let's always use them for these
            ## options.
            our_opts+=('-vi')
            ;;
        --mirror )
            opt_mirror=1
            ## Ditto
            our_opts+=('-vi')
            ;;
        --help | -h )
            usage ''
            exit 0
            ;;
        * )
            pass_on+=("$arg")
            ;;
    esac
done

if ((opt_mirror))
then
    declare pass_on_idx=0
    declare pass_on_count=${#pass_on[@]}
    declare pass_on_tgt_idx=$((pass_on_count-1))
    declare cparg

    if [ ! -d "${pass_on[$pass_on_tgt_idx]}" ]
    then
        cmd-echo -ec -- "The last argument must be the target directory under which to copy all the requested files." \
                 "'${pass_on[$pass_on_tgt_idx]}' is not a directory:" \
                 "$(ls -la "${pass_on[$pass_on_tgt_idx]}")"
        exit 1
    fi

    while (( pass_on_idx < pass_on_tgt_idx))
    do
        cparg=${pass_on[$pass_on_idx]}
        ((pass_on_idx +=1))
        if [[ "$cparg" =~ ^- ]]
        then
            ## Under opt_mirror, there should be no other options passed into
            ## 'cp'. All args should be files to copy or the target
            ## directory. If we eventually do not force -vi, we'll have to
            ## account for those above.
            cmd-echo -ec -- "'$cparg' is an option; no other options allowed with --mirror"
            exit 1
        fi

        if [ ! -f "$cparg" ]
        then
            cmd-echo -ec -- "'$cparg' is not a file; only files can be mirrored" \
                     "$(ls -la "$cparg")"
            exit 1
        fi
    done

    ## Pull off the target
    declare tgtroot="${pass_on[$pass_on_tgt_idx]}"
    unset "pass_on[$pass_on_tgt_idx]"

    ## Copy the sources
    for cparg in "${pass_on[@]}"
    do
        declare tgt="$tgtroot"/"$cparg"
        yesno --noprint "$REALCP ${our_opts[*]} ${cparg} ${tgt}" "n" || continue

        ## Make the tgt tree
        declare tgtdir
        tgtdir=$(dirname "${tgt}")
        mkdir -p "$tgtdir"

        ## Do the copy
        "$REALCP" "${our_opts[@]}" "$cparg" "$tgt" || exit $?
    done

    exit 0

elif ((opt_reverse))
then
    ## ...then there should be no other options passed into 'cp'. The only args
    ## should be source and target for the copy. If we eventually do not force
    ## -vi, we'll have to account for those above.
    if ((${#pass_on[@]} != 2)) || \
           [ ! -f "${pass_on[1]}" ] || \
           { [ ! -f "${pass_on[0]}" ] && [ ! -d "${pass_on[0]}" ] && [ ! -d "$(dirname "${pass_on[0]}")" ] ;}
    then
        cmd-echo -ec -- "--reverse requires no options, two (and only two) args." \
                 "The first (tgt) must be a file in an existing directory or just an existing directory," \
                 "The second (src) must be a existing file."
        exit 1
    else
        tmp=${pass_on[0]}
        pass_on[0]=${pass_on[1]}
        pass_on[1]=$tmp
    fi

    ## Here, we fall though to the default copy.
fi

"$REALCP" "${our_opts[@]}" "${pass_on[@]}"
exit $?

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/. If you want just plain text, get rid of pod tags and the
## 'POD' in __PODUSAGE__.

:<<'__PODUSAGE__'
=head1 NAME

mycp - extensions to the cp command

=head1 SYNOPSIS

 mycp --reverse DEST SOURCE
 mycp --mirror SOURCE [SOURCE...] DIRECTORY

=head1 DESCRIPTION

Additions to the 'cp' command.

=head1 OPTIONS

=over 4

=item --reverse

For command 'cp DEST SOURCE', do not copy 'DEST' to 'SOURCE', which is the
normal order of operations, but rather, copy 'SOURCE' to 'DEST'. 'DEST' is
either a directory in which to place the source file or a file to overwrite
with the source file. 'SOURCE' is a source file location. Use this if you are
doing diffs and you are using the headers to construct copy commands to pick
the righthand side of the diff as the desired file.

=item --mirror

For command 'cp SOURCE DIRECTORY', 'SOURCE' consists of a file and a path
(possibly partial) to that file, 'DIRECTORY' is a target directory, and the
copy is done such that the result is 'DIRECTORY/SOURCE'. Example:

 cp foo/bar/bin/thefile /home/me/tmp

Result:

 $ ls /home/me/tmp/foo/bar/bin/thefile
 /home/me/tmp/foo/bar/bin/thefile

If any directory in the final result does not exist, it will be created, modulo
permissions.  Very useful for copying files between git worktrees.

=back

=cut

__PODUSAGE__
