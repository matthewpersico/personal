# -*- sh -*-
# shellcheck shell=bash

# die.binc

# Adapted from https://gist.github.com/slowpeek/6127166369d8abd230c30c20cc6a9152
# MIT license (c) 2021 https://github.com/slowpeek

dieguts ()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    declare report_level=1
    IFS=' '
    {
        local lvl=${#FUNCNAME[@]} lineno func file warn=0 stacktrace=0 die_i=0
        while ((die_i < lvl)); do
            case ${FUNCNAME[$die_i]} in
                die )
                    # behaviors:
                    # - report line of die call
                    report_level=$((die_i+1))
                    # - no stacktrace
                    # - exit
                    break;;
                warn )
                    # behaviors:
                    # - report line of warn call
                    report_level=$((die_i+1))
                    # - no stacktrace
                    # - return
                    warn=1;
                    break;;
                croak )
                    # behaviors:
                    # - report line of croak caller
                    report_level=$((die_i+2))
                    # - no stacktrace
                    # - exit
                    break;;
                carp )
                    # behaviors:
                    # - report line of carp caller
                    report_level=$((die_i+2))
                    # - no stacktrace
                    # - return
                    warn=1
                    break;;
                confess )
                    # behaviors:
                    # - report line of confess call
                    report_level=$((die_i+1))
                    # - print stacktrace
                    stacktrace=1
                    # - exit
                    break;;
                cluck )
                    # behaviors:
                    # - report line of cluck call
                    report_level=$((die_i+1))
                    # - print stacktrace
                    stacktrace=1
                    # - return
                    warn=1
                    break;;
            esac
            ((die_i += 1))
        done

        set | grep -E '^BASH_LINENO'
        set | grep -E '^BASH_SOURCE'
        set | grep -E '^FUNCNAME'

        # Only print not empty messages.
        if (($# > 0)); then
            local prefix=${DIE_PREFIX:-auto}

            if [[ $prefix == auto ]]; then
                local lineno func file

                echo orig_report_level=$report_level
                ((report_level >= ${#BASH_SOURCE[@]} )) && \
                    report_level=$((${#BASH_SOURCE[@]} - 1))

                ((report_level == (${#BASH_SOURCE[@]} -1) )) && \
                    func='global scope'

                echo report_level=$report_level
                lineno="${BASH_LINENO[$((report_level-1))]}"
                [[ -z $func ]] && func="${FUNCNAME[$report_level]}()"
                file="${BASH_SOURCE[$report_level]}"
                prefix="$file:$lineno"
                [[ -n $func ]] && prefix+=" $func"
            fi

            [[ -z $prefix ]] || prefix="[$prefix] "

            printf "%s%s\n" "$prefix" "$*"
        fi

        if ( [[ ${DIE_VERBOSE:-} == y ]] && ((lvl > (report_level+1))) ) \
               || ((stacktrace)) ; then
            local s n=$report_level stack=()
            while ((n < lvl)); do
                s=$(caller "$n")
                ((++n))
                [[ -z $s ]] && continue
                read -r lineno func file <<< "$s"
                stack+=("$file:$lineno $func")
            done
            #((${#stack[@]})) && unset -v 'stack[-1]'
            echo 'Call stack:'
            printf '%s\n' "${stack[@]}"
            echo
        fi
    } >&2

    ((warn || DIE_WARN)) && return "${DIE_WARN:-1}"
    exit "${DIE_EXIT:-1}"
}

#set -x
#declare fname
#for fname in die warn croak carp confess cluck; do
#    echo $fname
#    eval "$fname" '()
#    {
#        if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
#        dieguts' "$@" '
#    }'
#done
#set +x
die()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    dieguts "$@"
}
warn()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    dieguts "$@"
}
croak()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    dieguts "$@"
}
carp()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    dieguts "$@"
}
confess()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    dieguts "$@"
}
cluck()
{
    if [[ $1 =~ -h ]]; then bash_usage die; true; return; fi
    dieguts "$@"
}
:<<'__PODUSAGE__'
=head1 NAME

die - Print a message, then exit.
warn - Print a message, then return.

confess - Print a message and a stacktrace, then exit.
cluck - Print a message and a stacktrace, then return.

croak - Print a message from the caller's persepctive, then exit.
carp - Print a message from the caller's persepctive, then return.


=head1 DESCRIPTION

All are 'set -eu' friendly.

Notice the difference:

     $ ./demo.sh
     Something is wrong

     $ DIE_PREFIX=auto DIE_VERBOSE=y ./demo.sh
     [./demo.sh:81 helper_func] Something is wrong

     Call stack:
     ./demo.sh:81 helper_func
     ./demo.sh:85 do_something

Default behaviour:

 - join arguments with a single space to form a message
 - print the message
 - exit 1

Variables:

 - DIE_PREFIX
 - DIE_EXIT
 - DIE_WARN
 - DIE_VERBOSE

Configuration:

The message can be optimally prefixed with context:

     [prefix] message

The prefix can be set with DIE_PREFIX. A special value 'auto' causes
it to take such form:

     lineno:file funcname

B<funcname> is there if L<die> was called from a function.

Custom exit code can be set with DIE_EXIT.

With DIE_VERBOSE=y call stack is printed after the message if L<die>
was called from a function.

__PODUSAGE__
