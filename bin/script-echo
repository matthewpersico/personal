#!/usr/bin/env bash

# script-echo
declare moreopts=1
declare -a cmd_echo_opts
while [[ "$1" =~ ^- ]] && ((moreopts))
do
    declare original="$1"
    declare option
    option=$(dashstripper "$original")
    shift

    case $option in
        i | o )
            echo "-i and -o are no longer used. Ignored..."
            ;;
        h | help )
            script-usage script-echo
            exit 0
            ;;
        -- )
            moreopts=0
            ;&
        head | title | n | c )
            cmd_echo_opts+=("--$option");
            ;;
    esac
done

if [ -n "$*" ]
then
        cmd-echo "${cmd_echo_opts[@]}" "$@"
fi

:<<'__PODUSAGE__'
=head1 NAME

  script-echo - label echos in scripts with some extra adornments

=head1 SYNOPSIS

 ## To write:
 script-echo [--head] [--title] [-n] [-c] -- "text" ["text"...]

 ## This text:
 script-echo -h|--help

=head1 DESCRIPTION

Call 'script-echo' to print the first "text" on a line with a reversed-color
prefix. Print subsequent lines indented with reversed color spaces, indicating
continuation. The name of the calling script is no longer printed. Too
difficult get it right with a mixture of functions and scripts at different
nesting levels. It is sufficient just to be able to pick out our messages vs
those printed by the utilities we call.

=head1 OPTIONS

=item --

Indicates end of options to 'script-echo', so that all subsequent arguments are
taken as text to print. Technically not necessary UNLESS your first argument to
print happens to match one of the options to 'script-echo'.

=item --head

Print a blank line for spacing before printing any text.

=item --title

Print a blank line for spacing before printing any text and then print the
entire first text line as reversed, not just the prefix.

=item -n

Do not print a new line at the end of each line.

=item -c

Print the first "text" element as a continuation line.

=item -h|--help

This text.

=back

=cut

__PODUSAGE__

#  LocalWords:  funcname shellcheck util func
