# -*- sh -*-
# shellcheck shell=bash
# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
# but should be:
# shellcheck disable=SC2329 #https://github.com/koalaman/shellcheck/wiki/SC2329

# git-linear

use on_exit
do_on_exit END

# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
declare ceid=$(basename "$0")

declare starting_remote
declare starting_branch
# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
declare restore_file="$(pwd)/git-linear-restore"
declare write_restore_file=0
declare resp
main ()
{

    # Deal with a found restart file
    if [[ -e $restore_file ]]; then
        write_restore_file=0
        cmd-echo --id "$ceid" -- "Restore file $restore_file found."
        select resp in \
            "restore and continue" \
                "restore and exit" \
                "delete and exit" \
                "ignore and continue" \
                "quit" ; do
            case $REPLY in
                1) $restore_file && rm "$restore_file" && break;;
                2) $restore_file && rm "$restore_file" && return 0 ;;
                3) rm "$restore_file" && return 0;;
                4) break ;;
                5) return 0 ;;
            esac
        done
    fi

    # Read the options and args from command line. Note that the long and short
    # don't have to match up.
    local OPTSARGS
    local shortopts='ah'
    local longopts='auto,yes,help,stop-on-success,stop-on-failure,stop-on-0,stop-on-1'
    local opt_auto=0
    local opt_stop_on_success=1
    local opt_stop_on_failure=0
    local opt_stop_on_0=0
    local opt_stop_on_1=0
    local opt_stops_set=0
    # Process the command line.
    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

    # Reset the command line ($@).
    eval set -- "$OPTSARGS"

    # Reprocess the command line, extracting options and their arguments into
    # variables.
    while true; do
        local option=$1
        shift
        [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
        case "$option" in
            a | auto | yes )
                opt_auto=1
                ;;
            stop-on-success )
                if ((opt_stops_set)) ; then
                    cmd-echo --id "$ceid" -ec -- "Cannot set more than one --stop-on option"
                    false; return
                fi
                opt_stops_set=1
                opt_stop_on_success=1
                opt_stop_on_failure=0
                opt_stop_on_0=0
                opt_stop_on_1=0
                ;;
            stop-on-failure )
                if ((opt_stops_set)) ; then
                    cmd-echo --id "$ceid" -ec -- "Cannot set more than one --stop-on option"
                    false; return
                fi
                opt_stops_set=1
                opt_stop_on_success=0
                opt_stop_on_failure=1
                opt_stop_on_0=0
                opt_stop_on_1=0
                ;;
            stop-on-0 )
                if ((opt_stops_set)) ; then
                    cmd-echo --id "$ceid" -ec -- "Cannot set more than one --stop-on option"
                    false; return
                fi
                opt_stops_set=1
                opt_stop_on_success=0
                opt_stop_on_failure=0
                opt_stop_on_0=1
                opt_stop_on_1=0
                ;;
            stop-on-1 )
                if ((opt_stops_set)) ; then
                    cmd-echo --id "$ceid" -ec -- "Cannot set more than one --stop-on option"
                    false; return
                fi
                opt_stops_set=1
                opt_stop_on_success=0
                opt_stop_on_failure=0
                opt_stop_on_0=0
                opt_stop_on_1=1
                ;;
            h | help )
                git-usage "$0"
                true; return
                ;;
            --)  break ;; ## VITAL!!! Exits the while loop, no more options,
                          ## remaining $*, if any, are args
            *)
                cmd-echo --id "$ceid" -ec -- "$option is an invalid option. See $0 --help."
                false; return
                ;;
        esac
    done

    declare -a cmd
    cmd=("$@")
    cmd-echo --id "$ceid" -- "Running '${cmd[*]}':"

    declare -a parts
    IFS='/' read -r -a parts < <(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')
    starting_remote=${parts[0]}
    starting_branch=$(IFS='/'; echo "${parts[*]:1}")

    write_restore_file=1
    resp=y
    declare prevcommitid
    declare commitid
    declare status
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    declare current_commit=$(git log --IDs | wc -l)
    declare total_commits=$current_commit
    while [[ $resp == 'y' ]]; do
        commitid=$(git log -1 --IDs)
        if [[ $prevcommitid == "$commitid" ]]; then
            cmd-echo --id "$ceid" -ec -- "Reached end of commits."
            break
        else
            prevcommitid="$commitid"
        fi

        cmd-echo --id "$ceid" -- "Start output for $commitid (commit #$current_commit/${total_commits}):"
        "${cmd[@]}"
        status=$?
        cmd-echo --id "$ceid" -- "End   output for $commitid. Status $status. "
        ((current_commit -= 1))

        if (( ( status == 0 && (opt_stop_on_success == 1 || opt_stop_on_0 == 1) )
                ||
              ( status != 0 && (opt_stop_on_failure == 1 || opt_stop_on_1 == 1) ) )); then
            cmd-echo --id "$ceid" -- "Search successful."
            break;
        fi

        if [[ $opt_auto == 0 ]]; then
            resp=$(cmd-yesno -q --id "$ceid" "Continue" y)
        fi

        if [[ $resp == 'y' ]]; then
            if ! git checkout -q HEAD~1; then
                cmd-echo --id "$ceid" -ec -- "Checkout error. Exiting."
                break;
            fi
        elif [[ $resp == 'n' ]]; then
            cmd-echo --id "$ceid" -- "Stopping at current commit. Exiting."
            break;
        elif [[ $resp == 'q' ]]; then
            cmd-echo --id "$ceid" -- "Quiting, restoring repo."
            if git pull "$starting_remote" "$starting_branch" && git checkout "$starting_branch"; then
                write_restore_file=0
            fi
            break;
        fi
    done
}

echo "done"

END ()
{
    cmd-echo --id "$ceid" -- "Current commit:"
    git log -1
    if ((write_restore_file)); then
        if [[ -n $starting_remote ]] && [[ -n $starting_branch ]] ; then
            echo "git pull $starting_remote $starting_branch && git checkout $starting_branch" > "$restore_file"
            chmod +x "$restore_file"
            cmd-echo --id "$ceid" -- "Restore with: $restore_file"
        else
            cmd-echo --id "$ceid" --error -- "Cannot write restore file $restore_file: starting_remote='$starting_remote' starting_branch='$starting_branch'"
        fi
    fi
}

NOTHING ()
{
    echo > /dev/null
}

echo "done"

main "$@"
exit

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
=head1 NAME

git-linear - git bisect but linearly

=head1 TODO

Rewrite how we keep state. From https://www.google.com/search?q=how+does+git+bisect+store+its+current+state+data

 Git bisect stores its current state data within the .git/ directory of your
 repository. Specifically, it creates and utilizes several files to keep track
 of the bisection process:

  * .git/BISECT_START: This file stores the starting point of the bisection,
  usually the "bad" commit where the bug exists.

  * .git/BISECT_LOG: This file records the actions taken during the bisect,
  such as marking commits as "good" or "bad". It acts as a history of the
  bisection process and can be used to retrace steps or correct mistakes.

  * Other files within .git/: Git bisect also utilizes other internal files,
  such as refs/bisect/bad which points to the last known "bad" commit and
  refs/bisect/good for the last known "good" commit.

 These files collectively enable Git bisect to:

  * Track the range of suspect commits: It remembers the known good and bad
  commits to define the boundaries of the search.

  * Maintain the bisection history: The BISECT_LOG file allows you to see the
  commits you've tested and how you've marked them.

  * Continue the process after interruption: If you stop a bisect session and
  resume later, Git bisect uses this stored information to pick up where it
  left off.

In essence, these files are how Git bisect keeps track of its current progress
in the binary search and ensures it can efficiently narrow down the possible
commits until the culprit is found.

=head1 SYNOPSIS

 git-linear [-a|--auto] [--stop-on-[success|failure|0|1]] \
    command and args to perform on each commit

=head1 DESCRIPTION

Starting with the current commit, the command given by the arguments is run and
then you are asked whether or not you want to continue to the prior SHA or not.

 $ git linear git grep UC

Without options you are prompted to examine the command output and decide
whether or not to continue. You have three options:

=over 4

=item y

Checkout the next commit and execute the command.

=item n

Stop checking out and executing, leaving the repo at the last commit checked out.

=item q

Stop checking out and executing, and quit the session, returning the repo to
the commit it was at when you started.

=back

DESCRIBE RECOVERY ACTIONS HERE

=head1 OPTIONS

=over 4

=item --auto

Instead of prompting after each command execution, the status of the command is
examined and if successful (0), processing stops. Otherwise, the next commit is
checked out and the process repeated. The process will stop if you reach the
first SHA.

=item --stop-on-success

The default setting. When the command returns 0, C<git-linear> stops
checking and leaves you at the commit where the command succeeded.

=item --stop-on-failure

The inverted setting. When the command returns not 0, C<git-linear> stops
checking and leaves you at the commit where the command failed.

=item --stop-on-0|1

For a command like C<diff> where you would B<THINK> that if the files are
different, you would get a success (0) return, but instead you get a failure
(non-zero) return, you can specify exactly what return value you want to stop
on. For '0', use --stop-on-0. For non-zero, use '--stop-on-1'. When the command
return matches your chosen option, C<git-linear> stops checking and leaves you
at the commit where the command succeeded.

=item --help

This help text.

=back

=cut

__PODUSAGE__
