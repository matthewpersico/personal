# -*- sh -*-
# shellcheck shell=bash

# git-linear

use on_exit
do-on-exit END

# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
declare ceid=$(basename "$0")

declare starting_remote
declare starting_branch
# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
declare restore_file="$(pwd)/git-linear-restore"
declare write_restore_file=0
declare resp
main ()
{
    if [[ -e $restore_file ]]; then
        write_restore_file=0
        cmd-echo --id "$ceid" -- "Restore file $restore_file found."
        resp=$(pick "Choose an action: (r)estore and exit, (d)elete, (s)kip and continue, (q)uit" "r/d/s/q" q)
        case $resp in
            q) echo noop > /dev/null ;;
            d) rm "$restore_file" ;;
            r) $restore_file ;;
            # s) we just move on
        esac
        if [[ $resp != 's' ]]; then
            return 1
        fi
    fi
    # Read the options and args from command line. Note that the long and short
    # don't have to match up.
    local OPTSARGS
    local shortopts='aih'
    local longopts='auto,yes,invert,inverse,help'
    local opt_auto=0
    local opt_invert=0

    # Process the command line.
    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

    # Reset the command line ($@).
    eval set -- "$OPTSARGS"

    # Reprocess the command line, extracting options and their arguments into
    # variables.
    while true; do
        local option=$1
        shift
        [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
        case "$option" in
            a | auto | yes )
                opt_auto=1
                ;;
            i | invert | inverse)
                opt_invert=1
                ;;
            h | help )
                git-usage "$0"
                true; return
                ;;
            --)  break ;; ## VITAL!!! Exits the while loop, no more options,
                          ## remaining $*, if any, are args
            *)
                cmd-echo --id "$ceid" -ec -- "$option is an invalid option. See $0 --help."
                false; return
                ;;
        esac
    done

    declare -a cmd
    cmd=("$@")
    cmd-echo --id "$ceid" -- "Running '${cmd[*]}':"

    declare -a parts
    IFS='/' read -r -a parts < <(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')
    starting_remote=${parts[0]}
    starting_branch=$(IFS='/'; echo "${parts[*]:1}")

    write_restore_file=1
    resp=y
    declare prevcommitid
    declare commitid
    declare status
    # shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
    declare current_commit=$(git log --IDs | wc -l)
    declare total_commits=$current_commit
    while [[ $resp == 'y' ]]; do
        commitid=$(git log -1 --IDs)
        if [[ $prevcommitid == "$commitid" ]]; then
            cmd-echo --id "$ceid" -ec -- "Reached end of commits."
            break
        else
            prevcommitid="$commitid"
        fi

        cmd-echo --id "$ceid" -- "Start output for $commitid  (commit #$current_commit/${total_commits}):"
        "${cmd[@]}"
        status=$?
        cmd-echo --id "$ceid" -- "End   output for $commitid. Status $status. Invert $opt_invert."
        ((current_commit -= 1))

        if { [[ $opt_invert == 0 ]] && [[ $status == 0 ]]; }  \
               ||
               { [[ $opt_invert == 1 ]] && [[ $status != 0 ]]; }; then
            cmd-echo --id "$ceid" -- "Search successful."
            break;
        fi

        if [[ $opt_auto == 0 ]]; then
            resp=$(cmd-yesno -q --id "$ceid" "Continue" y)
        fi

        if [[ $resp == 'y' ]]; then
            if ! git checkout -q HEAD~1; then
                cmd-echo --id "$ceid" -ec -- "Checkout error. Exiting."
                break;
            fi
        elif [[ $resp == 'n' ]]; then
            cmd-echo --id "$ceid" -- "Stopping at current commit. Exiting."
            break;
        elif [[ $resp == 'q' ]]; then
            cmd-echo --id "$ceid" -- "Quiting, restoring repo."
            if git pull "$starting_remote" "$starting_branch" && git checkout "$starting_branch"; then
                write_restore_file=0
            fi
            break;
        fi
    done
}

END ()
{
    cmd-echo --id "$ceid" -- "Current commit:"
    git log -1
    if ((write_restore_file)); then
        if [[ -n  $starting_remote ]] && [[ -n $starting_branch ]] ; then
            echo "git pull $starting_remote $starting_branch && git checkout $starting_branch" > "$restore_file"
            chmod +x "$restore_file"
            cmd-echo --id "$ceid" -- "Restore with: $restore_file"
        else
            cmd-echo --id "$ceid" --error -- "Cannot write restore file $restore_file: starting_remote='$starting_remote' starting_branch='$starting_branch'"
        fi
    fi
}

NOTHING ()
{
    echo > /dev/null
}

main "$@"
exit

:<<'__PODUSAGE__'
=head1 NAME

git-linear - git bisect but linearly

=head1 SYNOPSIS

 git-linear [-a|--auto] [-i|--invert] command and args to perform on each commit.

=head1 DESCRIPTION

Starting with the current commit, the command given by the arguments is run and
then you are asked whether or not you want to continue to the prior SHA or not.

 $ git linear git grep UC

Without options you are prompted to examine the command output and decide
whether or not to continue. You have three options:

=over 4

=item y

Checkout the next commit and execute the command.

=item n

Stop checking out and executing, leaving the repo at the last commit checked out.

=item q

Stop checking out and executing, and quit the session, returning the repo to
the commit it was at when you started.

=back

DESCRIBE RECOVERY ACTIONS HERE

=head1 OPTIONS

=over 4

=item --auto

Instead of prompting after each command execution, the status of the command is
examined and if successful (0), processing stops. Otherwise, the next commit is
checked out and the process repeated. The process will stop if you reach the
first SHA.

=item --invert

Instead of stopping when the command succeeds, processing halts when the
command fails. This would allow you for example, to stop when git grep fails to
find what you are looking for.

=item --help

This help text.

=back

=cut

__PODUSAGE__
