#!/usr/bin/env bash

use mktemp
use on_exit

declare -a repos
repos=(
    "$HOME/personal"
    "$HOME/bloomberg"
    "$HOME/.emacs.d/taps/$USER"
    "$HOME/examples"
    "$HOME/.git_template"
)

for repo in "${repos[@]}"; do
    [[ ! -e $repo ]] && continue
    (
        cd "$repo" || exit 1
        cmd-echo "**** $(pwd) ****"
        git pull

        if git repo is pristine; then
            echo "Your branch is up to date with 'origin/$(git-branch --list -c)'"
        else
            git -c color.status=always st | \
                perl -MTerm::ANSIColor -ne \
                     'chomp;
$on = $off = q();
if (/Your branch is (ahead|behind).*/) {
  $on=color(q(on_red));
  $off=color(q(reset));
}
 print($on,$_,$off,qq(\n));
'
        fi
        declare output
        output=$(mktempfile)
        rm-on-exit "$output"
        declare default_branch
        default_branch=$(git repo default-branch)
        git diff --name-only "origin/$default_branch" >"$output" 2>&1
        if (( $(wc -l < "$output") )); then
            cmd-echo --color RED -- "Your branch is NOT up to date with 'origin/$default_branch'." "The differing files are:"
            cat "$output"
            rm -rf "$output"
        else
            echo "Your branch is up to date with 'origin/$default_branch'"
        fi
    )
    echo
done
