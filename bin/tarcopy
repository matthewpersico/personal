# -*- sh -*-
# shellcheck shell=bash

# tarcopy

declare moreopts
moreopts=1
declare -a ext_tar_opts
declare make_tgt=0
while [[ "$1" =~ ^- ]] && ((moreopts)); do
    declare original
    original="$1"
    declare option
    option=$(dashstripper "$original")
    shift

    case $option in
        p )
            ext_tar_opts+=('-p')
            ;;
        v )
            ext_tar_opts+=('-v')
            ;;
        make-tgt)
            make_tgt=1
            ;;
        help )
            bash-usage "$0"
            exit 0
            ;;
        * )
            echo "$original is an invalid option. See $0 --help"; exit 1;;
    esac
done

if (($#<2)); then
    echo "Not enough arguments."
    bash-usage "$0"
    exit 1
fi

declare tgtdir
tgtdir="${*: -1}"
if [[ ! -d "$tgtdir" ]]; then
    if ((make_tgt)); then
        echo "Target '$tgtdir' does not exist. Will be created, as requested."
        mkdir -p "$tgtdir" || exit $?
    else
        echo "Target '$tgtdir' must be an existing directory, or use --make-tgt to request its creation."
        exit 1
    fi
else
    if ((make_tgt)); then
        echo "Target '$tgtdir' already exists. Will not be created, though requested."
    fi
fi

## -B - reblock
## -C - instead of (cd "tgtdir"; tar...)
tar cf - "${@:1:$# - 1}" | tar -C "$tgtdir" "${ext_tar_opts[@]}" -B -xf -
exit $?

:<<'__PODUSAGE__'
=head1 NAME

tarcopy - copy one or more files or directory trees using the classic 'tar <pack> | tar <unpack>' paradigm.

=head1 SYNOPSIS

 tarcopy [-p] [-v] [--make-tgt] src [src ..] tgtdir
 tarcopy --help

=head1 DESCRIPTION

Copy one or more files or directory trees intact to another directory using the
classic 'tar <pack> | tar <unpack>' paradigm. The 'tgtdir' must exist (but see
the --make-tgt option).

=head1 ARGUMENTS

=over 4

=item src

A file or a directory to be copied. If a directory, the
directory is copied to the target. In other words, given files

  srcdir/a/b/c
  srcdir/b

the command

  tarcopy srcdir tgtdir

creates

  tgtdir/srcdir/a/b/c
  tgtdir/srcdir/b

not

  tgtdir/a/b/c
  tgtdir/b

If you want the latter, you need to do

  tarcopy srcdir/* tgtdir

But this has a problem; it does not copy hidden (dot) files. In order to copy
those, use:

 ( GLOBIGNORE=".:.." && tarcopy srcdir/* tgtdir )

The 'srcdir/*' normally evaluates to only the non-hidden files in 'srcdir'. If
there are hidden files, and you *want* to copy them, use the construct
above. The GLOBALIGNORE assignment also sets 'dotglob' to true, so that *
matches hidden files, but '.' and '..' are ignored.

The parens are required because the typical

 GLOBIGNORE=".:.." tarcopy srcdir/* tgtdir

does not work and using the && leaves the assignment in your environment to
affect all subsequent commands, unless you remember to unset it. The parans put
the command in a subshell so that your current shell is unaffected.

If your source has no "hidden files", then

 tarcopy srcdir/* tgtdir

will suffice.

The entire directory structure is copied for directories. Copying directory
structures intact is the raison d'etre for this script.

=item tgt

A directory to where the sources are to be copied. The directory must exist, or
must be requested to be created with the '--make-tgt' option.

=back

=head1 OPTIONS

=over 4

=item -p

Option to tar, preserving original permissions on the copies.

=item -v

Option to tar, verbose.

=item --make-tgt

Create the target directory if it does not exist. If it already exists, a
message is printed, and the copy is still executed. 'mkdir -p' is the command
used to create the directory, so 'tgtdir' can be a multilevel directory.

=item --help

This help text.

=back

=cut

__PODUSAGE__
