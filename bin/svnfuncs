# -*- sh -*-

# svnfuncs

SVNFUNCS_FILE=${BASH_SOURCE[0]}

svnfuncs_edit ()
{
    xo $SVNFUNCS_FILE
}
#nxport -f svnfuncs_edit
alias svnfuncs-edit=svnfuncs_edit

svnfuncs_reload ()
{
    . $SVNFUNCS_FILE
}
alias svnfuncs-reload=svnfuncs_reload

MOP_svnroot_MBIG=${HOME}/MBIG
MOP_svnroot=${HOME}/svns
MOP_svnhook_dir=${HOME}/.svn_template

svn_st_por_usage ()
{
    echo "Usage: svn-st-por [--strip|-s] [arg ...]"
    echo "       svn-st-por [--help|-h]"
    echo
    echo "       'svn status' in porcelain mode."
    echo
    echo "       --strip will get remove the leading"
    echo "       status indicators"
    echo
    echo "       'arg is any argument you would normally"
    echo "       pass to 'svn status'"
}
alias svn-st-por-usage=svn_st_por_usage

svn_st_por ()
{
    typeset opt_strip=0
    typeset opt_vconly=0
    typeset OPTSARGS=$(getoptp -o sh --long strip,help,vconly -n 'svn-st-por' -- "$@")
    status=$?
    ((status != 0)) && svn-st-por-usage && return $status
    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -s|--strip) opt_strip=1; shift ;;
            -h|--help) svn-st-por-usage; return 0 ;;
            --vconly) opt_vconly=1; shift ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; svn-st-por-usage; return 1 ;;
        esac
    done

    local tmp1=$(mktemp --suffix=.svn_st_por.tmp1)
    svn st "$@" > $tmp1
    if ((opt_vconly))
    then
        local tmp2=$(mktemp --suffix=.svn_st_por.tmp2.1)
        cat $tmp1 | grep -v '?' > $tmp2
        mv $tmp2 $tmp1
    fi
    if ((opt_strip))
    then
        local tmp2=$(mktemp --suffix=.svn_st_por.tmp2.2)
        cat $tmp1 | sed 's/.* //' > $tmp2
        mv $tmp2 $tmp1
    fi
    cat $tmp1; rm -f $tmp1
}
alias svn-st-por=svn_st_por

svn_find ()
{
    find ${1:-.} -type f | grep -v .svn
}
alias svn-find=svn_find

svn_strip_repo ()
{
    echo $1 | sed 's/(repo)//'
}

svn_add_repo ()
{
    echo "$1(repo)"
}

svn_go_set ()
{
    echo "Regenerating .svn-go ($MOP_svn_go_file)..." >&2
    typeset repo_tops=$(find ${HOME}/svns ${HOME}/MBIG/svns ${HOME}/MBIG/cstools -maxdepth 1 -mindepth 1 -type d -follow)
    typeset repo_tops_re=":$(echo $repo_tops | sed 's/ /:/g'):"
    typeset repos=$(find $repo_tops -name .svn -type d | sed 's|/.svn||g' | sort -u)
    typeset repo_roots=$(typeset i j
                         for i in $repos
			             do
                             svn_add_repo $(svn_get_root $i)
			             done)
    typeset tmproot=${MOP_svnroot}/tmp
    echo $repo_roots $repo_tops | tr ' ' '\n' | sort -u | sed "s|${HOME}/||" > ${tmproot}.001
    grep '(repo)'  ${tmproot}.001 > ${tmproot}.repos
    grep -v '(repo)'  ${tmproot}.001 > ${tmproot}.roots
    for root in $(cat ${tmproot}.roots)
    do
        for repo in $(cat ${tmproot}.repos)
        do
            if [[ $repo =~ ^$root ]]
            then
                echo $root
            fi
        done
    done | sort -u > ${MOP_svn_go_file}

    ls ${HOME}/svns/.svn-go* ${tmproot}* | grep -v $MOP_svn_go_file | xargs rm -f
}
alias svn-go-set=svn_go_set

svn_go_set_filename ()
{
    MOP_svn_go_file=${HOME}/svns/.svn-go.$(date +%Y%m%d)
}
alias svn-go-set-filename=svn_go_set_filename

svn_go_get ()
{
    typeset update=$1
    shift
    typeset filter=$1
    shift
    svn-go-set-filename
    if [ ! -e $MOP_svn_go_file ] || ((update))
    then
	    svn-go-set
    fi

    if [ -n "$filter" ]
    then
        cat $MOP_svn_go_file | grep $filter
    else
        cat $MOP_svn_go_file
    fi
}

svn_go_usage ()
{
    echo "Usage: svn-go [--update|-u] [dirmatch]"
    echo "       svn-go [-h|--help]"
    echo
    echo "       Presents a list of all svn repos"
    echo "       in ${HOME}/MBIG"
    echo "       and ${HOME}/svns"
    echo "       for you to choose and then cd to."
    echo
    echo "       'dirmatch' will filter the list"
    echo
}
alias svn-go-usage=svn_go_usage

svn_go ()
{
    typeset PS3="Choose by number, q to quit: "
    typeset opt_update=0
    typeset OPTSARGS=$(getoptp -o uh --long update,help -n 'svn-go' -- "$@")
    status=$?
    ((status != 0)) && svn_go_usage && return $status
    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -u|--update) opt_update=1; shift ;;
            -h|--help) svn-go-usage; return 0 ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; svn-go-usage; return 1 ;;
        esac
    done

    typeset REPOS REPO
    REPOS=$(svn_go_get $opt_update "$1")
    if [ -z "$REPOS" ]
    then
        echo $1 does not match any repo
        svn_go_usage
        return
    fi
    select REPO in $REPOS
    do
	    if [ -n "$REPO" ]
	    then
	        go ${HOME}/$(svn_strip_repo $REPO)
	        return
        elif [ "$(echo $REPLY | tr '[A-Z]' '[a-z]')" = 'q' ]
        then
            return
        else
            echo "'$REPLY' is an invalid choice"
	    fi
    done
}
alias svn-go='svn_go '
alias svngo='svn_go '

svn_help ()
{
    ls -c1 $PERSONALBIN/*bbgh* 2>/dev/null | sed 's|.*/|script |' > /tmp/mop.$$.gh1
    ls -c1 $PERSONALBIN/*svn* 2>/dev/null| sed 's|.*/|script |' > /tmp/mop.$$.gh2
    declare -F | grep svn | grep -v _svn > /tmp/mop.$$.gh3

    sort -u /tmp/mop.$$.gh*
    \rm -f /tmp/mop.$$.gh*
}
alias svn-help=svn_help

svn_get_root ()
{
    # this command outputs the top-most parent of the current folder that is
    # still under svn revision control to standard out

    # if the current folder is not under svn revision control, nothing is
    # output and a non-zero exit value is given
    (
     builtin cd .
     if [ -n "$1" ]
     then
         builtin cd $1
     fi
     typeset parent=""
     typeset grandparent=$(pwd)

     while [ -d "$grandparent/.svn" ]; do
         parent=$grandparent
         grandparent="$parent/.."
     done

     if [ ! -z "$parent" ]; then
         (builtin cd $parent ; pwd)
         return 0
     else
         return 1
     fi
    )
    return $?
}

svn_stash ()
{
    typeset root=$(svn_get_root)
    if [ -z "$root" ]
    then
        echo $(pwd) is not an SVN repo dir
        return 1
    fi
    if [ -z "$1" ]
    then
        ls -c1 $root/.svnstash
    elif [ "$1" = 'details' ]
    then
        for i in $root/.svnstash/*
        do
            echo "----  $(basename $i)"
            find $i -ls
        done
    elif [ "$1" = 'push' ] || [ "$1" = 'save' ]
    then
        (
            builtin cd $root
            typeset stashable
            stashable=$(svn st | grep -v .svnstash | sed 's/.* //')
            if [ -z "$stashable" ]
            then
                echo Working copy clean. Nothing to stash.
            else
                if [ ! -d .svnstash ]
                then
                    mkdir -p .svnstash
                fi
                typeset stashdir=.svnstash/$(date '+%Y%m%d_%H%M%S')
                mkdir $stashdir
                echo "Stash $stashdir"
                for o in $stashable
                do
                    typeset tgt=$stashdir/$o
                    echo $o
                    mkdir -p $(dirname $tgt)
                    mv $o $tgt
                    echo $o >> $stashdir/.manifest.stash
                done
                svn update $stashable
            fi
            sort -uo $stashdir/.manifest.stash $stashdir/.manifest.stash
        )
    elif [ "$1" = 'pop' ] || [ "$1" = 'restore' ]
    then
        shift
        (
            builtin cd $root
            local confirm=0
            local diff=0
            if [ "$1" = 'diff' ]
            then
                diff=1
                confirm=1
            fi
            if [ "$1" = 'confirm' ]
            then
                confirm=1
            fi
            builtin cd $root
            typeset stashid=$(ls -c1 .svnstash | head -1)
            if [ -z "$stashid" ]
            then
                echo No stashes found.
            else
                echo Restoring $stashid
                local stashdir=".svnstash/$stashid"
                local popables=$(cat $stashdir/.manifest.stash)
                set -x
                for o in $popables
                do
                    local restore=n
                    if ((diff))
                    then
                        diff $stashdir/$o $o
                        local status=$?
                        if ((status==2))
                        then
                            ls -la $stashdir/$o
                        fi
                    fi
                    if ((confirm))
                    then
                        restore=$(yesno "Restore $o")
                    fi
                    if [ "$restore" = 'y' ]
                    then
                        if [ -d $stashdir/$o ]
                        then
                            mkdir -vp $o
                        else
                            mv -v $stashdir/$o $o
                        fi
                        cat $stashdir/.manifest.stash | grep -v -E "^$o$" | sort -uo $stashdir/.manifest.stash
                    fi
                done

                empty=$(find . -type f $stashdir)
                if [ -z "$empty" ]
                then
                    yesno "epty"
                    rm -rf $stashdir
                fi
                set +x
            fi
        )
    fi
}
alias svn-stash='svn_stash '

svn_checkout ()
{
    svnroot='https://code.dev.bloomberg.com/svnweb'
    typeset svnsrc=$1
    if [[ ! $svnsrc =~ ^$svnroot ]]
    then
        echo "Find your svn repo on $svnroot and use the full url"
        return 1
    fi

    svntgt=$(echo $svnsrc | sed "s|${svnroot}/||" | sed 's|/browse/|/|g')
    svnsrc="svn+ssh://devsvn/$svntgt"
    set -x
    svn checkout $svnsrc $svntgt
set +x
}
alias svn-checkout='svn_checkout '

svn_review ()
{
    arc diff
}
svn_review_update ()
{
    arc diff --update $1
}
