# -*- sh -*-
# shellcheck shell=bash

# show

declare o_width=1056
declare o_height=500
declare do_join=0
declare renderer='yad'
declare -a renderer_args

# Define the options. ':' suffix for a mandatory value to an option, '::' for
# an optional one. Note that the long and short don't have to match up.
declare OPTSARGS
declare shortopts='w:h:njt'
declare longopts='width:,height:,help,join,tail'

# Parse args.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
if ((status != 0)); then
    declare d0
    d0=$(basename "$0")
    cmd-echo --id show -ec -- \
             "If the error was" \
             "     ${d0}: unrecognized option..." \
             "then ${d0} read an option to your program" \
             "as its own. Add -- as the last ${d0} option" \
             "right before your command. If you did, then check" \
             "that any option requiring an argument (like --at)" \
             "has one. Exiting."
    exit $status
fi

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true && [[ $1 =~ ^- ]]; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        help )
            bash-usage "$0"
            exit 0
            ;;
        w | width )
            o_width=$1
            shift
            ;;
        h | height )
            o_height=$1
            shift
            ;;
        j | join)
            do_join=1
            ;;
        t | tail)
            renderer_args+=(--tail)
            ;;
        --)
            break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo --id show -ec -- "$option is an invalid option."
            cat "$0"
            exit 1
            ;;
    esac
done

renderer_args+=(--text-info --title="$*")

declare do_filt=cat
declare -a cmd
if [[ -n $1 ]]; then
    case $1 in
        perldoc)
            shift
            cmd=('perldoc' "$@")
            do_filt=uncolor
            ;;
        man)
            cmd=("$@")
            do_filt=uncolor
            ;;
        tail )
            cmd=("$@")
            renderer_args+=(--tail)
            ;;
        * )
            cmd=("$@")
            ;;
    esac
else
    cmd=('cat' '-')
fi

renderer_args+=(--width="$o_width" --height="$o_height")

if ((do_join)); then
    "${cmd[@]}" 2>&1 | $do_filt | $renderer "${renderer_args[@]}" &
else
    "${cmd[@]}" | $do_filt  | $renderer "${renderer_args[@]}" &
fi

:<<'__PODUSAGE__'
=head1 NAME

show - put command line output to a gui coompnent

=head1 SYNOPSIS

 show [-w|-width] pixels] [-h|--height] pixels] \
     [-j|--join] [-t|--tail] [--] command [args...]

 command [args...] [ | command [args...] ]\
     | show [-w|-width] pixels] [-h|--height] pixels] \
          [-j|--join] [-t|--tail] [--]
 show --help

=head1 DESCRIPTION

Takes the output of the command or the last output of a pipelineand feeds it to
gui text box.  This is good for long outputs that you would either have to page
or scroll in a terminal.

=head1 OPTIONS

=head2 Notes

- We are currently using 'yad' as the rendering engine. Any options to yad should come before the command.

- If your command has options, you need to add a '--' end-of-options marker, or else the options will be reported as unrecognized by yad:

  show -- command --opt --op2 arg arg

=head2 Options

=over 4

=item --width/--height

Specify a starting size for the text box.

=item --join

Route stderr to the text box also.

=item --tail

This is different than handling for the 'tail' command. Use this option if the
command puts out continuous output and you want to be brought to the end of the
output and kept there.

=item --help

This text. And yes, you can 'show -- show --help'. :-)

=back

=head1 ARGUMENTS

All remaining arguments are run as the command to capture and its
arguments. stdout is piped to a text box whose scrollbar stays at the top of
the box as input is added, by default.

There are three commands that currently have specific processing when used as
arguments. However, if those commands are part of a pipe that feeds into
'show', the specific processing is not executed; 'show' cannot know the
commands in the upstream pipeline.

=over 4

=item perldoc

'perldoc' is recognized and control characters that won't render nicely in the
text box are stripped out.

=item man

'man' is recognized and control characters that won't render nicely in the
text box are stripped out.

=item tail

'tail' is recognized and the text box is set to --tail so that you are
brought to the end of the output and kept there as if using 'tail -f'.

=back


=cut

__PODUSAGE__
