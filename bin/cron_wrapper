#!/opt/bb/bin/bash
# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
# shellcheck disable=SC2154 #https://github.com/koalaman/shellcheck/wiki/SC2154
# shellcheck disable=SC1090 ## cannot find sourced file at shellcheck time

## Control when cron jobs mail their output. This could probably use a refactor
## into functions but I'm not sure if we would leak functions into the call,
## so...

## CW variables are taken from the cronjob env, set in the crontab file.
declare mailtype=${CW_mail_type,,}
mailtype=${mailtype:=always}
declare mailfrom=${CW_from:-$USER@$(hostname)}
declare mailto=${CW_to:-${MAILTO:-$USER}}
declare mailsubject="$CW_mail_subject"
declare checkkinit=${CW_checkkinit:-0}
declare keeplog=${CW_keeplog:-0}
declare setx=${CW_setx:-0}
declare setv=${CW_setv:=0}

## Pops the last two args to the this command if they are '--CW-id' and
## '"string"' so that we don't pass them to the command. We put them there so
## that there is something unique on the command line for cron email subjects
## if there's a hard die.
declare next_to_last="${*: -2: 1}"
if [[ $next_to_last == '--CW-id' ]]; then
    set -- "${@:1:$#-2}"
fi

## Mail schedule processing.
dayofweek=$(date +%a)
dayofweek=${dayofweek,,}
args_ok=0
while ((!args_ok)); do
    case $mailtype in
        never | non-zero | if-output | if-no-output | today | always )
            args_ok=1
            break
            ;;
        "$dayofweek" )
            mailtype=today
            break
            ;;
        sun | mon | tue | wed | thu | fri | sat )
            ## We get here if the day in the mail type does not match today in
            ## the $dayofweek case above
            mailtype=non-zero
            break
            ;;
        * )
            echo "Invalid mail type $mailtype"
            exit 1
            break
            ;;
    esac
done

## Logging setup. We keep all output and then we keep profile's output as a
## separate subset.
declare filesubject=${mailsubject// /-}
temproot=$(mktemp -t "tmp.cron_wrapper.${filesubject}.XXXXXXXXXX")
alllog=${temproot}.alllog
profilelog=${temproot}.profilelog
did_profile=0

## Run the user's profiles and log their output. If you ever need to check the
## environment before and after, bracket the for loop with 'env' calls.
for p in ${TILDAE:-$HOME}/.bash_profile.${USER} \
                         ${TILDAE:-$HOME}/.bash_profile \
                         ${TILDAE:-$HOME}/.profile.${USER} \
                         ${TILDAE:-$HOME}/.profile; do
    if [[ -r "$p" ]] && ((!did_profile)); then
        ## Environment setup here.
        . "$p" > "$profilelog" 2>&1
        did_profile=1
    fi
done

if ((!did_profile)); then
    echo 'ERROR - No profiles found before trying to run'
    echo "$@"
    echo
    cat "$profilelog"
    exit 42
fi

##
## Temp file handling. We clean up after ourselves. Unless we want to keep the
## logs, but we handle that below.
##
source "$BASH_INC_DIR/on_exit.binc"
rm-on-exit "$temproot" "$alllog" "$profilelog"

##
## Kerberos cr-p.
##
if((checkkinit)); then
    klist -s
    status=$?
    if((status)); then
        backoff="$(dirname "$(realpath "$0")")/../data/cron_wrapper.kinit.${mailsubject// /_})"
        if [[ -e "$backoff" ]]; then
            was=$(cat "$backoff")
            now=$(date +%s)
            if ((now-was<86399)); then
                exit 0 ## Once a day email on a kerberos expiration
            fi
        fi
        echo 'ERROR - kerberos ticket has expired before trying to run'
        echo "$@"
        echo
        echo 'Expiration(s):'
        klist | cut -d ' ' -f4,5 | sort -u | grep '/'
        date +%s > "$backoff"
        echo 'Now:'
        date '+%m/%d/%y %H:%M:%S'
        echo
        echo 'This is a ONCE-A-DAY notification, regardless of cron schedule.'
        exit $status
    fi
fi

##
## Now we shunt all output to files we control.
##
holdstdout=$(get-next-descriptor)
eval "exec $holdstdout>&1"  ## Link file descriptor with stdout, which saves stdout.
exec 1>> "$alllog"  ## Re-point stdout to the log.

holdstderr=$(get-next-descriptor)
eval "exec $holdstderr>&2"  ## Link file descriptor with stderr, which saves stderr.
exec 2>> "$alllog"  ## Re-point stderr to the log.

##
## Here is where the command gets executed
##
status=0

## We set up a trap here to make sure that if the command dies so hard that the
## rest of this script does not run, we get something from the shunted output.
# shellcheck disable=SC1078
# shellcheck disable=SC1079
trap "eval ""exec 1>&$holdstdout $holdstdout>&-""      ## Restore stdout and close file descriptor.
      eval ""exec 2>&$holdstderr $holdstderr>&-""      ## Restore stderr and close file descriptor.
      [ -f $profilelog ] && cat $profilelog
      [ -f $alllog ]     && cat $alllog
     " SIGTERM SIGINT SIGFPE SIGBUS

((setx)) && set -x
((setv)) && set -v
"$@" ## This is where we execute the command with arguments. Everything else
     ## above and below is boilerplate. Sheeesh.
status=$?
((setv)) && set +v
((setx)) && set +x

## The restorations will cause any mail errors to be sent to you via the regular
## cron error channels.
eval "exec 1>&$holdstdout $holdstdout>&-"      ## Restore stdout and close file descriptor.
eval "exec 2>&$holdstderr $holdstderr>&-"      ## Restore stderr and close file descriptor.

##
## Mail the output
##
subsubject=''
mailthelog=0
if ((status)); then
    mailthelog=1 ## We always grab the log if there is an issue.
    if [[ "$mailtype" = 'non-zero' ]];  then
        subsubject="Non-zero exit ($status)"
    elif [[ ! "$mailtype" = 'never' ]];  then
        subsubject="Issue - Exit status: $status"
    fi
else
    subsubject="Success"
    if [[ "$mailtype" = 'if-no-output' ]]; then
        mailthelog=$(wc -c < "$alllog")
        if ((mailthelog==0)); then
            mailthelog=1
            subsubject='Issue - No output'
        fi
    elif [[ "$mailtype" = 'if-output' ]]; then
        mailthelog=$(wc -c < "$alllog")
    elif [[ "$mailtype" = 'today' ]]; then
        mailthelog=1
        subsubject="Success, $(date +%A) check"
    elif [[ "$mailtype" = 'never' ]] || [[ "$mailtype" = 'non-zero' ]]; then
        mailthelog=0
    elif [[ "$mailtype" = 'always' ]]; then
        mailthelog=1
    else
        subsubject="Success, but unknown mailtype $mailtype. Mailing the log."
        mailthelog=1
    fi
fi

exitstatus=0

declare logmsg
if ((keeplog)); then
    ## If we are keeping logs, we need to be notified so we mail the log
    ## information, despite any mail settings above to the contrary.
    mailthelog=1
    logmsg="--keeplog specified. Logs are alllog - $alllog, profilelog - $profilelog"
    dont-on-exit "$temproot" "$alllog" "$profilelog"
fi

if ((mailthelog)); then
    if [[ -n "$mailto" ]]; then
        /home/mpersico5/personal/bin/local-mailme \
            -f "$mailfrom" \
            -t "$mailto" \
            -s "$subsubject - $mailsubject" \
            <<EOM
$subsubject
$logmsg
$( ((status)) && [[ -f "$profilelog" ]] && cat "$profilelog"; [[ -f "$alllog" ]] && cat "$alllog")
EOM
        exitstatus=0 ## we mailed off the error, if any
        exit 0
    else
        cat <<EOM
$subsubject
$logmsg
$( ((status)) && [[ -f "$profilelog" ]] && cat "$profilelog"; [[ -f "$alllog" ]] && cat "$alllog")
EOM
        exitstatus=$status ## we need to force the mail of the log, to at least
                           ## the cron owner.
    fi
fi


exit $exitstatus

#  LocalWords:  checkkinit args koalaman bb cron cronjob env crontab
#  LocalWords:  profilelog backoff mailfrom mailto mailme
#  LocalWords:  mailsubject
