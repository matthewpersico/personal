# -*- sh -*-
# shellcheck shell=bash

# git-check-with-remote

use mktemp
use on_exit

main ()
{
    local opt_branch=''
    local opt_remote='origin'
    local opt_bail_on_dirty='0'
    local OPTSARGS
    local shortopts='hb:r:c'
    local longopts='help,branch:,remote:,bail-on-dirty'

    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || return

    # Reset the command line ($@).
    eval set -- "$OPTSARGS"

    # Reprocess the command line, extracting options and their arguments into
    # variables.
    while true; do
        local option=$1
        shift
        case "$option" in
            --bail-on-dirty) opt_bail_on_dirty=1 ;;
            -r|--remote) opt_remote="$1"; shift ;;
            -b|--branch) opt_branch="$1"; shift ;;
            -h|--help) cmd-echo --id git-check-with-remote -- "No help. Please read the code: '$0'."
                       true; return ;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
            ## remaining $*, if any, are args
            *)
                cmd-echo --id git-check-with-remote -ec -- "$option is an invalid option. See '$0 --help'."
                false; return
                ;;
        esac
    done

    if [[ -z "$opt_branch" ]]; then
        git-usage "$0" "Missing option '--branch' is required."
        false; return
    fi

    local cb
    cb=$(git rev-parse --abbrev-ref HEAD)
    status=$?
    if ((status != 0 )); then
        false; return
    fi

    # shellcheck disable=SC2154 #https://github.com/koalaman/shellcheck/wiki/SC2154
    if [[ "$cb" == '' ]]; then
        cat <<EOF

You are trying to check your current git repo DEVELOPMENT branch in your clone
against changes in

branch "${opt_branch}"
  repo "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you do not appear to even be in a repo. I'm exiting. Try again in a
proper repo.

EOF
        false; return
    fi

    if [[ "$cb" == "$opt_branch" ]]; then
        cat <<EOF

You are trying to check your current git repo DEVELOPMENT branch in your clone
against changes in

branch "${opt_branch}"
  repo "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you appear to be on branch "${opt_branch}", the branch you want to
sync with. I'm exiting. Get off the branch "${opt_branch}" and onto another
branch Then rerun the command. Or just do a 'git pull' if you really need to
refresh this branch.

EOF
        false; return
    fi

    ## Check the local branch against its origin
    local stcheck
    stcheck=$(mktempfile -+ check)
    rm_on_exit "$stcheck"
    git status 1>"$stcheck" 2>&1
    if ! grep "Your branch is up.to.date with 'origin/$cb'." "$stcheck" 1>/dev/null; then
        cat "$stcheck"
        cat <<EOF
Your branch should be up to date with its origin in order to simplify the
check.
EOF
        if ((opt_bail_on_dirty)); then
            cmd-echo --id git-check-with-remote --ec 'Exiting.'
            false; return
        else
            local resp
            resp=$(cmd-yesno --id git-check-with-remote "Do you want to continue anyway" n)
            if [[ "$resp" == 'n' ]]; then
                false; return
            fi
        fi
    fi

    ## Now grab the remote branch
    local gflog
    gflog=$(mktempfile -+ gflog)
    rm_on_exit "$gflog"
    git fetch "${opt_remote}" "${opt_branch}" 2>"$gflog"
    local rc=$?
    if ((rc)); then
        cat "$gflog"
        rm -f "$gflog"
        false; return
    fi
    rm -f "$gflog"

    ## Log the local branch
    local locallog
    locallog=$(mktempfile -+ locallog)
    rm_on_exit "$locallog"
    git log > "$locallog"

    ## Log the local copy of the remote branch
    local remotelog
    remotelog=$(mktempfile -+ remotelog)
    rm_on_exit "$remotelog"
    git log "${opt_remote}/${opt_branch}" > "$remotelog"

    ## Diff 'em
    local difflog
    difflog=$(mktempfile +- difflog)
    rm_on_exit "$difflog"
    diff "$locallog" "$remotelog" 1> "$difflog" 2>&1

    if [[ -s "$difflog" ]]; then
        # shellcheck disable=SC2002
        # #https://github.com/koalaman/shellcheck/wiki/SC2002 Using the cat
        # instead of wc -l file prevents the filename from being printed out,
        if [[ "$(cat "$difflog" | wc -l)" = '10' ]] \
               && [[ ! "$(grep -E "Merge pull request.*$(git repo current-branch)" "$difflog")" = '' ]]; then
            cmd-echo --id git-check-with-remote "Only diff to '${opt_remote}' is merge pull request."
        else
            cmd-echo --id git-check-with-remote -head "*** git repo: ${PWD}"
            cmd-echo --id git-check-with-remote -c "*** Current branch $(git repo current-branch) and ${opt_remote}/${opt_branch} are not synced:"
            cat "$difflog"
        fi
    fi

    true
}

main "$@"
exit
