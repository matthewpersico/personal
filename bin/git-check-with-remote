# -*- sh -*-

# git-check-with-remote

##@@ 0001||group||git-check-with-remote||

source $BASH_INC_DIR/on_exit.binc

declare usage_func="${FUNCNAME}-usage"
declare iam=$(func-name-spoof)

declare opt_branch=''
declare opt_remote='origin'
declare opt_bail_on_dirty='0'
declare OPTSARGS=$(getoptp -o hb:r:c --long help,branch:,remote:,bail_on_dirty -n $iam -- "$@")
status=$?
((status != 0)) && $usage_func $iam && exit $status
eval set -- "$OPTSARGS"
while true
do
    case "$1" in
        --bail_on_dirty) opt_bail_on_dirty=1; shift;;
        -r|--remote) opt_remote="$2"; shift; shift ;;
        -b|--branch) opt_branch="$2"; shift; shift ;;
        -h|--help) $usage-func $iam; exit $OK ;;
        --) shift; break ;; ## end of opts, remaining $*, if any, are args
        *) echo "Internal error!"; $usage_func $iam; exit $NOT_OK ;;
    esac
done

if [ -z "$opt_branch" ]
then
    echo "--branch required"
    $usage_func $iam
    exit $NOT_OK
fi

declare cb=$(git rev-parse --abbrev-ref HEAD)
status=$?
((status != 0 )) && exit $NOT_OK

if [ "$cb" == '' ]
then
    cat <<EOF

$iam is used to check your current git repo DEVELOPMENT branch in your declare
clone against changes in

branch "${opt_branch}"
repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you do not appear to even be in a repo. I'm exiting. Try again in a
proper repo.

EOF
    exit $NOT_OK
fi

if [ "$cb" == "$opt_branch" ]
then
    cat <<EOF

$iam is used to check your current git repo DEVELOPMENT branch in your declare
clone against changes in

branch "${opt_branch}"
repo   "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you appear to be on branch "${opt_branch}", the branch you want to
sync with. I'm exiting. Get off the branch "${opt_branch}" and onto another
branch Then rerun the command. Or just do a 'git pull' if you really need to
refresh this branch.

EOF
    exit $NOT_OK
fi

## Check the declare branch against its origin
declare stcheck=$(mktemp --suffix=.git-check-with-remote.check)
rm_on_exit $stcheck
git status 1>$stcheck 2>&1
grep "Your branch is up.to.date with 'origin/$cb'." $stcheck 1>/dev/null
status=$?
if [ "$status" != '0' ]
then
    cat $stcheck
    cat <<EOF
Your branch should be up to date with its origin in order to simplify the
check.
EOF
    if ((opt_bail_on_dirty))
    then
        echo Exiting.
        exit $NOT_OK
    else
        declare resp=$(func-yesno "Do you want to continue anyway" n)
        if [ "$resp" == 'n' ]
        then
            exit $NOT_OK
        fi
    fi
fi

declare ok_to_pull=1
((opt_confirm)) && ok_to_pull=0

## Now grab the remote branch
declare gflog=$(mktemp --suffix=.git-check-with-remote.gflog)
rm_on_exit $gflog
git fetch ${opt_remote} ${opt_branch} 2>$gflog
declare rc=$?
if ((rc))
then
    cat $gflog
    rm -f $gflog
    exit $NOT_OK
fi
rm -f $gflog

## Log the declare branch
declare locallog=$(mktemp --suffix=.git-check-with-remote.locallog)
rm_on_exit $locallog
git log > $locallog

## Log the declare copy of the remote branch
declare remotelog=$(mktemp --suffix=.git-check-with-remote.remotelog)
rm_on_exit $remotelog
git log ${opt_remote}/${opt_branch} > $remotelog

## Diff 'em
declare difflog=$(mktemp --suffix=.git-check-with-remote.difflog)
rm_on_exit $difflog
diff $locallog $remotelog 1> $difflog 2>&1

if [ -s $difflog ]
then
    if [ "$(cat $difflog | wc -l)" = '10' ] \
           && [ ! "$(grep -E "Merge pull request.*$(git-get-current-branch)" $difflog)" = '' ]
    then
        echo "Only diff to ${opt_remote} is merge pull request."
    else
        echo
        echo "*** git repo: $(pwd)"
        echo "*** Current branch $(git-get-current-branch) and ${opt_remote}/${opt_branch} are not synced:"
        echo
        cat $difflog
    fi
fi

exit $OK
