#!/usr/bin/env bash

# git-check-with-remote

# shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"

declare opt_branch=''
declare opt_remote='origin'
declare opt_bail_on_dirty='0'
declare OPTSARGS
declare shortopts='hb:r:c'
declare longopts='help,branch:,remote:,bail_on_dirty'

OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
((status != 0)) && exit $status ## return $status ## in functions

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true
do
    declare option=$1
    shift
    case "$option" in
        --bail_on_dirty) opt_bail_on_dirty=1 ;;
        -r|--remote) opt_remote="$1"; shift ;;
        -b|--branch) opt_branch="$1"; shift ;;
        -h|--help) bash-usage "$0"; exit 0 ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -ec -- "$option is an invalid option. See $0 --help"
            exit 1 ## return 1 in functions
            ;;
    esac
done

if [ -z "$opt_branch" ]
then
    cmd-echo -- "--branch required"
    bash-usage "$0"
    exit 1
fi

declare cb
cb=$(git rev-parse --abbrev-ref HEAD)
status=$?
((status != 0 )) && exit 1

if [ "$cb" == '' ]
then
    # shellcheck disable=SC2154
    cat <<EOF

You are trying to check your current git repo DEVELOPMENT branch in your clone
against changes in

branch "${opt_branch}"
  repo "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you do not appear to even be in a repo. I'm exiting. Try again in a
proper repo.

EOF
    exit 1
fi

if [ "$cb" == "$opt_branch" ]
then
    cat <<EOF

You are trying to check your current git repo DEVELOPMENT branch in your clone
against changes in

branch "${opt_branch}"
  repo "${opt_remote}" (${gitfuncs_remotes[$opt_remote]})

However, you appear to be on branch "${opt_branch}", the branch you want to
sync with. I'm exiting. Get off the branch "${opt_branch}" and onto another
branch Then rerun the command. Or just do a 'git pull' if you really need to
refresh this branch.

EOF
    exit 1
fi

## Check the declare branch against its origin
declare stcheck
stcheck=$(mktemp -t tmp.git-check-with-remote.check.XXXXXXXXXX)
rm-on-exit "$stcheck"
git status 1>"$stcheck" 2>&1
grep "Your branch is up.to.date with 'origin/$cb'." "$stcheck" 1>/dev/null
status=$?
if [ "$status" != '0' ]
then
    cat "$stcheck"
    cat <<EOF
Your branch should be up to date with its origin in order to simplify the
check.
EOF
    if ((opt_bail_on_dirty))
    then
        cmd-echo Exiting.
        exit 1
    else
        declare resp
        resp=$(cmd-yesno "Do you want to continue anyway" n)
        if [ "$resp" == 'n' ]
        then
            exit 1
        fi
    fi
fi

## Now grab the remote branch
declare gflog
gflog=$(mktemp -t tmp.git-check-with-remote.gflog.XXXXXXXXXX)
rm-on-exit "$gflog"
git fetch "${opt_remote}" "${opt_branch}" 2>"$gflog"
declare rc=$?
if ((rc))
then
    cat "$gflog"
    rm -f "$gflog"
    exit 1
fi
rm -f "$gflog"

## Log the declare branch
declare locallog
locallog=$(mktemp -t tmp.git-check-with-remote.locallog.XXXXXXXXXX)
rm-on-exit "$locallog"
git log > "$locallog"

## Log the declare copy of the remote branch
declare remotelog
remotelog=$(mktemp -t tmp.git-check-with-remote.remotelog.XXXXXXXXXX)
rm-on-exit "$remotelog"
git log "${opt_remote}/${opt_branch}" > "$remotelog"

## Diff 'em
declare difflog
difflog=$(mktemp -t tmp.git-check-with-remote.difflog.XXXXXXXXXX)
rm-on-exit "$difflog"
diff "$locallog" "$remotelog" 1> "$difflog" 2>&1

if [ -s "$difflog" ]
then
    # shellcheck disable=SC2002 # Using the cat instead of wc -l file prevents
    # the filename from being printed out,
    if [ "$(cat "$difflog" | wc -l)" = '10' ] \
           && [ ! "$(grep -E "Merge pull request.*$(git branch --show-current)" "$difflog")" = '' ]
    then
        cmd-echo "Only diff to ${opt_remote} is merge pull request."
    else
        cmd-echo -head "*** git repo: ${PWD}"
        cmd-echo -c "*** Current branch $(git branch --show-current) and ${opt_remote}/${opt_branch} are not synced:"
        cat "$difflog"
    fi
fi

exit 0
