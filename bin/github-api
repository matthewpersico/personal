# -*- sh -*-
# shellcheck shell=bash
# shellcheck disable=SC2218 #https://github.com/koalaman/shellcheck/wiki/SC2218

# github-api

use mktemp
use on_exit

github-api-echo ()
{
    cmd-echo --id github-api "$@" >&2
}

curl-cat ()
{
    cmd-echo --id github-api --title Headers
    cat "$curlheaders"
    cmd-echo --id github-api --title Data
    cat -v "${curldata}"*
}

decode-html-status ()
{
    # $1 is the file of curl headers
    local status
    status=$(grep -i "status:" "$1" | sed -e 's/status: //i' -e 's/ .*//')
    if [[ -z $status ]]; then
        # github has no Status: field in the headers. Bummner.head -1 "$1" | perl -ane 'print $F[-1]'
        status=$(head -1 "$1" | perl -ane 'print $F[-1]')
    fi
    echo "$status"
}

main ()
{
    ## If there's any chance that this will be in a script that will be dotted in,
    ## remove the explicit out_cmd calls.
    local moreopts=1

    local server='github'
    local token_file="$HOME/.github"
    local verbose=0
    local silent=0
    local synchronous=0
    local keep_data=0
    local scope='all'
    local pullId
    local stream_data=0
    local perl_data=0
    local doexec=1
    local -a otherparams
    local opt_data_mode=0
    local opt_page_limit=0
    local override_url
    local -a override_args
    local -a re_exec

    re_exec=("$@")

    ##
    ## options parsing
    ##
    while [[ "$1" =~ ^- ]] && ((moreopts)); do
        local original="$1"
        shift
        local option
        option=$(dashstripper "$original")
        ## This bit deals with --foo=bar instead of --foo bar
        local okey=''
        local ovalue=''
        ## but only deal with it if we really have an option. Otherwise you
        ## misinterpret items like this git clone option: --config
        ## "remote.origin.fetch=+refs/pull/*/head:refs/remotes/origin/pr/*'
        if [[ $option =~ ^- ]]; then
            if [[ "$option" =~ = ]]; then
                okey=${option%%=*}
                ovalue=${option#*=}
                option="$okey"
            fi
        fi

        case $option in
            override-url )
                override_url=${ovalue:-$1}
                [[ -z "$ovalue" ]] && shift
                ;;

            page-limit )
                opt_page_limit=${ovalue:-$1}
                [[ -z "$ovalue" ]] && shift
                ;;

            data-mode ) opt_data_mode=1 ;;

            stream-data ) stream_data=1 ;;

            perl-data ) stream_data=1; perl_data=1 ;;

            keep-data ) keep_data=1 ;;

            server )
                server=${ovalue:-$1}
                [[ -z "$ovalue" ]] && shift
                ;;

            wait ) synchronous=1 ;;

            all | public | private | list-forks | sources | member | contents )
                scope=$option ;;

            pull | pullId )
                pullId=${ovalue:-$1}
                [[ -z "$ovalue" ]] && shift
                ;;

            h | help )
                git-usage "$0"
                true; return
                ;;

            v | verbose )
                verbose=1
                silent=0
                ;;

            s | silent )
                verbose=0
                silent=1
                ;;

            noexec)
                doexec=0
                verbose=1
                ;;
            --)
                moreopts=0
                ;;

            * )
                github-api-echo -- "$original is an invalid option. See $0 --help"
                false; return
                ;;
        esac
    done

    local noop
    # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
    read -r server noop noop noop < <(git utils decode-url "$server")
    local server_url
    server_url="$(git kv --get "api-urls.$server")/"
    if [[ -z "$server_url" ]]; then
        github-api-echo -- "'$server' is an in valid --server option"
        false; return
    fi

    local token_file
    token_file="$HOME/$(git kv --get "token-file.$server")"
    if [[ ! -r "$token_file" ]]; then
        github-api-echo -- "Credentials file '$token_file' not found. Do you have the right server?"
        false; return
    fi

    ##
    ## action parsing
    ##
    local org_is_user=0
    local action=$1
    shift

    case $action in
        fork | list-forks | exists | ping | pulls | contents | repo )
            ## Requires a repo
            if [[ -z "$1" ]]; then
                github-api-echo -- "No org/repo specified"
                false; return
            fi
            if [[ "$1" =~ / ]]; then
                org=${1%/*}
                repo=${1#*/}
                shift
            else
                org=$1; shift
                repo=$1; shift
            fi
            [[ -z "$org" ]] && github-api-echo -- "No org specified" && bail=1
            [[ -z "$repo" ]] && github-api-echo -- "No repo specified" && bail=1
            ((bail)) && { false; return; }

            if [[ $action == 'contents' ]]; then
                contents="$1"; shift
            fi
            ;;

        org | repos )
            ## Requires an org
            if [[ -z "$1" ]]; then
                github-api-echo -- "No org specified"
                false; return
            fi
            if [[ $1 =~ -user ]]; then
                org_is_user=1
                shift
            fi
            if [[ "$1" =~ / ]]; then
                org=${1%/*}
                repo=${1#*/}
            else
                org=$1; shift
                if [[ -n "$1" ]]; then
                    repo=$1; shift
                fi
            fi
            if [[ $action == 'org' ]] && [[ -n $repo ]]; then
                cmd-echo --id github-api --wc -- "Repo ignore for action org"
                repo=''
            fi

            ;;

        raw )
            raw="$1"; shift
            ;;

        url )
            url="$1"; shift
            ;;

        filename )
            filename="$1"; shift
            otherparams=("$@")
            [[ -n ${otherparams[0]} ]] && \
                [[ ! ${otherparams[0]} =~ ^\+ ]] &&
                otherparams[0]="+${otherparams[0]}"
            ;;

        text )
            text="$1"; shift
            otherparams=("$@")
            [[ -n ${otherparams[0]} ]] && \
                [[ ! ${otherparams[0]} =~ ^\+ ]] &&
                otherparams[0]="+${otherparams[0]}"
            ;;

        * )
            if [[ -n "$1" ]]; then
                github-api-echo -- "$1 is not supported"
            else
                github-api-echo -- "No action provided"
            fi
            false; return
    esac

    if [[ -n "$org" ]]; then
        # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
        local dummy
        ## todo make sure org exists
    fi

    ##
    ## URL fixup, action normalization
    ##
    local -a curlopts
    case $action in
        exists | ping )
            action='exists'
            url="repos/$org/$repo"
            ;;

        fork )
            url="repos/$org/$repo/forks"
            curlopts=('-X' 'POST')
            ;;

        list-forks )
            url="repos/$org/$repo/forks"
            ;;

        org)
            url="orgs/$org"
            ;;

        repos)
            if ((org_is_user)); then
                url="users/$org/repos?type=$scope"
            else
                url="orgs/$org/repos?type=$scope"
            fi
            ;;

        repo )
            action='exists'
            url="repos/$org/$repo"
            ;;

        raw)
            server_url=''
            url="$raw"
            ;;

        url)
            # shellcheck disable=SC2269 #https://github.com/koalaman/shellcheck/wiki/SC2269
            url="$url"
            ;;

        filename)
            url="search/code?q=$filename+in:path"
            ;;

        text)
            url="search/code?q=${text}&type=Code"
            ;;

        pulls)
            url="repos/$org/$repo/pulls"
            [[ -n "$pullId" ]] && url="${url}/$pullId"
            [[ -n "$scope" ]] && url="${url}?state=$scope"
            ;;

        contents)
            url="repos/$org/$repo/contents/$contents"
            ;;

    esac
    ## Override on re-exec
    if [[ -n $override_url ]]; then
        ## Get rid of the option since we may have to use it again. We know we
        ## made it the first option in the command.
        re_exec=("${re_exec[@]:2}")

        ## Use it
        url="${override_url}"
        override_args=('--override-url' "${url}")
    fi

    local curlheaders
    curlheaders=$(mktempfile -+ curlheaders)
    curlopts+=('-D' "$curlheaders")

    local curldata
    curldata=$(mktempfile -+ curldata)

    local perldata
    perldata=$(mktempfile -+ perldata)

    if ((keep_data)); then
        github-api-echo -- "Header and data files are" "$curlheaders" "$curldata"
    else
        rm_on_exit "$curlheaders" "$curldata" "$perldata"
    fi

    if((verbose)); then
        github-api-echo -- "curl --header \"Authorization: token\$(grep token $token_file | cut -d= -f2)\" ${curlopts[*]} ${server_url}${url}${otherparams[*]} -s"
    fi

    if ((doexec)); then
        curl \
            --header "Authorization: token$(grep token "$token_file" | cut -d= -f2)" \
            "${curlopts[@]}" \
            "${server_url}${url}${otherparams[*]}" -s > "$curldata" 2>&1
        local status=$?
        if ((status)); then
            github-api-echo -- "curl returned with error :$status"
            curl-cat
            return $status
        fi

        local -a pagenums
        local page_links
        page_links=$(grep -i -E '^Link: ' "$curlheaders" )
        if [[ -n $page_links ]]; then
            # shellcheck disable=SC2207 #https://github.com/koalaman/shellcheck/wiki/SC2207
            pagenums=($(perl -e '$ARGV[0] =~ m/.*?page=(\d+).*?page=(\d+)/;print "$1 $2\n";' "$page_links"))
            local pagenum=1
            local pagenumfmt
            pagenumfmt="%0${#pagenums[1]}d"
            local pageprint
            # shellcheck disable=SC2059 #https://github.com/koalaman/shellcheck/wiki/SC2059
            pageprint="$(printf "$pagenumfmt" $pagenum)"
            if ((opt_page_limit)) && ((pagenums[1] > opt_page_limit)); then
                github-api-echo "${pagenums[1]} pages of data available, limiting to the first ${opt_page_limit}..."
                pagenums[1]=${opt_page_limit}
            fi
            ((!silent)) && github-api-echo "$pagenum of ${pagenums[1]} pages of data fetched..."
            ((pagenum+=1))
            while (( pagenum <= "${pagenums[1]}" )); do
                ((!silent)) && github-api-echo "Page ${pagenum}..."
                # shellcheck disable=SC2059 #https://github.com/koalaman/shellcheck/wiki/SC2059
                pageprint="$(printf "$pagenumfmt" "$pagenum")"
                curl \
                    --header "Authorization: token$(grep token "$token_file" | cut -d= -f2)" \
                    "${curlopts[@]}" \
                    "${server_url}${url}${otherparams[*]}&page=$pagenum" -s > "${curldata}.${pageprint}" 2>&1
                local status=$?
                if ((status)); then
                    github-api-echo -- "curl returned with error :$status"
                    curl-cat
                    return $status
                fi

                local htmlstatus
                htmlstatus=$(decode-html-status "$curlheaders")
                case $htmlstatus in
                    200 )
                        ## Consolidate paged data.
                        echo ',' >> "$curldata"
                        cat "${curldata}.${pageprint}" >> "$curldata"
                        ;;
                    403 )
                        ## Forbidden. Probably hit a query limit.
                        cat "$curlheaders"
                        ;;
                    404 )
                        ## Sometimes, even though pagination of the returned
                        ## data is indicated, the data is not paginated. If we
                        ## got here and got a 404, let's assume all the data is
                        ## in the prior set of data (there must have been at
                        ## least one good set or we wouldn't have even gotten
                        ## into this pagination-handing loop) and move on.

                        ## Fake a good header
                        echo "Status: 200 OK" > "$curlheaders"

                        break ## while
                        ;;
                    * )
                        cat "$curlheaders"
                        true; return
                        ;;
                esac
                ((pagenum+=1))
            done
            ## $curldata as invalid json because each page is a list instead of
            ## all the data in one list. We added the commas above. Now we pull
            ## out the superfluous ][ here:
            local curldata_relist
            curldata_relist=$(mktempfile -+ curldata_relist)
            perl -e '
BEGIN { print(qq([\n)); }
while(<>){
  chomp;
  print qq($_\n) if($_ ne q([) and $_ ne q(]));
}
END { print(qq(]\n)); }
' "$curldata" > "$curldata_relist"
            mv "$curldata_relist" "$curldata"
        fi
        local htmlstatus
        htmlstatus=$(decode-html-status "$curlheaders")
        case $action in
            repos )
                if [[ -n $repo ]]; then
                    local curldata_filter
                    curldata_filter=$(mktempfile -+ curldata_filter)
                    perl -MJSON::XS -e '
open IH, q(<), $ARGV[0];
$data = join(q(),<IH>);
close(IH);
$json = decode_json($data);
my @js;
my $re = qr/$ARGV[1]/;
for my $j (@{$json}) {
  if ( $j->{name} =~ m/$re/ ) {
    push @js, $j;
  }
}
print(JSON::XS->new->pretty(1)->encode(\@js));
' "${curldata}" "$repo" > "$curldata_filter" || exit
                    mv "$curldata_filter" "$curldata"
                fi
                ;;
            contents)
                case $htmlstatus in
                    200 )
                        ((!verbose)) && silent=1 ## If you want contents, you
                                                 ## probably don't want the
                                                 ## JSON, headers, etc. Unless
                                                 ## you do. :-)
                        # shellcheck disable=SC2016 #https://github.com/koalaman/shellcheck/wiki/SC2016
                        # Yes, I know I have a '$' in single quotes.
                        echo '$VAR1=' > "$perldata"
                        json_xs -t dumper < "$curldata" >> "$perldata"
                        echo ';' >> "$perldata"
                        perl -MMIME::Base64 -e 'do $ARGV[0]; print decode_base64($VAR1->{content})' "$perldata"
                        ;;
                    * )
                        github-api-echo -e -- "HTML status $(grep "Status:" "$curlheaders")"
                        curl-cat
                        false; return
                        ;;
                esac
                ;;

            exists )
                case $htmlstatus in
                    200 )
                        ((opt_data_mode==0)) && github-api-echo -- "Repo exists."
                        ;;
                    404 )
                        github-api-echo -e -- "'${server}:$org/$repo' not found."
                        false; return
                        ;;
                    * )
                        github-api-echo -e -- "HTML status $(grep "Status:" "$curlheaders")"
                        curl-cat
                        false; return
                        ;;
                esac
                ;;

            list-forks )
                case $htmlstatus in
                    200 )
                        # shellcheck disable=SC2016 #https://github.com/koalaman/shellcheck/wiki/SC2016
                        # Yes, I know I have a '$' in single quotes.
                        echo '$VAR1=' > "$perldata"
                        json_xs -t dumper < "$curldata" >> "$perldata"
                        perl -e 'do $ARGV[0]; print join(qq(\n), sort map {$_->{full_name}} @$VAR1)' "$perldata"
                        false; return
                        ;;
#                    301 )
#                        local newurl
#                        newurl=$(perl -MJSON::XS -e '
#open IH, q(<), $ARGV[0];
#$data = join(q(),<IH>);
#close(IH);
#$json = decode_json($data);
#$url = $json->{url};
#$url =~ s|$ARGV[1]||;
#print qq($url);' "${curldata}" "${server_url}")
#                        cmd-echo --id github-api -- "Need a --no-fork option below...Re-directing..."
#                        cmd-echo --id github-api --dc -- "exec $0 --override-url \"$newurl\" \"${re_exec[@]}\""
#                        pause
#                        exec $0 --override-url "$newurl" "${re_exec[@]}"
#                        ;;
                    404 )
                        github-api-echo -e -- "'${server}:$org/$repo' not found."
                        false; return
                        ;;
                    * )
                        github-api-echo -e -- "HTML status $(grep "Status:" "$curlheaders")"
                        curl-cat
                        false; return
                        ;;
                esac
                ;;

            pulls )
                case $htmlstatus in
                    200 )
                    ;;
                    301 )
                        local newurl
                        newurl=$(perl -MJSON::XS -e '
open IH, q(<), $ARGV[0];
$data = join(q(),<IH>);
close(IH);
$json = decode_json($data);
$url = $json->{url};
$url =~ s|$ARGV[1]||;
print qq($url);' "${curldata}" "${server_url}")
                        exec "$0" --override-url "$newurl" "${re_exec[@]}"
                        ;;
                    404 )
                        github-api-echo -e -- "'${server}:$org/$repo' not found."
                        false; return
                        ;;
                    * )
                        github-api-echo -e -- "HTML status $(grep "Status:" "$curlheaders")"
                        curl-cat
                        false; return
                        ;;
                esac
                ;;

            fork )
                case $htmlstatus in
                    200 | 202 )
                        if ((opt_data_mode==0)); then
                            [[ $htmlstatus == '200' ]] && github-api-echo -- "Fork created."
                            [[ $htmlstatus == '202' ]] && github-api-echo -- "Fork found."
                            ## In the 202 case one or both of the repos could have
                            ## been renamed after the fork was originally created.
                        else
                            perl -MJSON::XS -e '
open IH, q(<), $ARGV[0];
$data = join(q(),<IH>);
close(IH);
$json = decode_json($data);
print $json->{name};' "${curldata}"
                        fi
                        ;;

                    307 )
                        local newurl
                        newurl=$(perl -MJSON::XS -e '
open IH, q(<), $ARGV[0];
$data = join(q(),<IH>);
close(IH);
$json = decode_json($data);
$url = $json->{url};
$url =~ s|$ARGV[1]||;
print qq($url);' "${curldata}" "${server_url}")
                        cmd-echo --id github-api -- "Re-directing..."
                        exec "$0" --override-url "$newurl" "${re_exec[@]}"
                        ;;
                    404 )
                        github-api-echo -e -- "either organization '$org' or repo '$repo' does not exist on '$server'."
                        false; return
                        ;;
                    * )
                        github-api-echo -e -- "HTML status $(grep "Status:" "$curlheaders")"
                        curl-cat
                        false; return
                        ;;
                esac

                if ((synchronous)); then
                    local waiting='Waiting for fork creation...'
                    local remaining=60
                    while github-api "${override_args[@]}" --server "$server" list-forks "$org" "$repo" | grep -E -q '"message":\s*"Not Found"'; do
                        [[ -n "$waiting" ]] && github-api-echo -- "'$waiting'" && waiting=''
                        sleep 1
                        ((remaining-=1))
                        ((remaining)) || break
                    done
                    if github-api "${override_args[@]}" --server "$server" list-forks "$org" "$repo" | grep -E -q '"message":\s*"Not Found"'; then
                        github-api-echo -w -- "Fork not yet created"
                        false; return
                    else
                        true; return
                    fi
                fi
                ;;
        esac
    fi

    if ((stream_data)); then
        if((perl_data)); then
            # Yes, we know the variable will not expand.
            echo ''
            # We have to work around Data::Dumper printing a bless statement for JSON::PP::Boolean
            perl -MFile::Slurp -MJSON::XS -MData::Dumper -e'
my $lines=read_file($ARGV[0]);
my $perl = decode_json($lines);
$Data::Dumper::Deepcopy=$Data::Dumper::Terse=1;
my $out = sprintf(q(%s), Data::Dumper->Dump([$perl]));
$out =~ s/bless. do...my .o = (0|1)..,.*JSON::PP::Boolean.../$1/g;
print "\$VAR1=$out"' "${curldata}"
        else
            cat -v "${curldata}"
        fi
    elif ((!silent)); then
        curl-cat
    fi

    if ((keep_data)); then
        github-api-echo -- "Header and data files are" "$curlheaders" "$curldata"
    fi
    true; return
}

main "$@"
exit

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
=head1 NAME

github-api - Wrapper around curl calls to the github api

=head1 SYNOPSIS

 github-api [--server server] [--stream-data|--perl-data] [--keep-data] ] [--wait] [--verbose|--silent|--noexec] \
     org <orgname> |
     repos [--user] <orgname> [<reponamepattern>] |
     exists[|ping] <orgname> <reponame> |
     repo <orgname <reponame> |
     list-forks <orgname> <reponame> |
     fork <orgname> <reponame> |
     filename <filename-to-search-for> |
     text <text-to-search-for> |
     [--pullId N] pulls |
     contents <orgname> <reponame> path/to/file/from/repo/root[?ref=id] |
     url <serverless-url-of-api-call> |
     raw <full-url-of-api-call>

=head1 DESCRIPTION

Run some specific github apis. Uses your own OAuth credentials so you may not
be able to see everything. Prints its messages to stderr, all data to stdout so
you can filter the output with pipes and still see the progress messages.

Any time you are required to provide and orgname and reponame, you can provide
them as one arg: orgname/reponame.

=head1 ARGUMENTS

=over 4

=item org

Runs orgs api call. Requires an orgname. Returns metadata about that org.

=item repos

Runs repos api call. Requires an orgname. Returns metadata about all the repos
in that org. If the 'org' is a person, add the '--user' flag. Add a regular expression and
the output is limited to that repos whose names match.

=item exists|ping

Runs repos api call. Requires an orgname and a repo. Exits 0 if repo found, 1
if not.

=item repo

Runs repo api call. Requires an orgname and a repo. Returns metadata for the repo
specified. More efficient than 'repos' for a single exact repo.

=item list-forks

Lists the forks of a repo. Requires an orgname and a repo.

=item fork

Create a fork, in your org, a repo. Requires an orgname and a repo.

=item filename

Find a file in all orgs/repos. Requires an filename to search for.

=item text

Find a text string in all orgs/repos. Requires an string to search for. Special characters must be provided as URL escapes (%20 for a space, %3D for an equals sign, etc.)

=item pulls

Find information about **open** pull requests.

=item contents

Get a file. Specify the path to the file relative to the repo root. The optional parameter 'ref' is the commit/branch/tag for the version you want. Default is the version at the head of the default branch.

Unlike most, if not all other commands, this one, by default will B<not> print headers and the resulting JSON. If you want all that, add the C<--verbose> flag to your call. You can also  use one of the format options (C<--stream-data>, C<--perl-data>)

=item url

Run any api call, expressed as the raw api, assuming the https://, server and api point portions.

=item raw

Run any api call, expressed as the raw api, starting with the https://, server and api point portions.

=back

=head1 OPTIONS

=over 4

=item --server

Default: 'github'.

=item --stream-data

All headers and titles are suppressed. Only the JSON data structure is sent to stdout for display. Use this if you want to ingest the output in a program.

=item --perl-data

All headers and titles are suppressed. Only the JSON data structure is converted to a Perl Data::Dumper format and sent to stdout for display. The output should be stored to a file X so it can then used via a

 do $ARGV[0];

statement in a Perl script where X is the first arg to the script.

=item --keep-data

Header and data are sent to a file for display. This options doesn't clean up after execution allowing you to use them. Filenames will be shown.

=item --wait

Whe creating a fork, wait for the fork to create before exiting. Default is to send off the command and exit, as the fork creation is async by default.

=item [--verbose|--silent|--noexec]

'verbose' shows steps and the full curl command, sans authentication info.

'silent' supresses the header and data output when you just want the return code.

'noexec' show the full curl command, sans authentication info, but does not execute it.

=item --page-limit

Only fetch the first n pages of data for a query that returns multiple pages.

=back

=cut

__PODUSAGE__
