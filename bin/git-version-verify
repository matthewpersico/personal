#!/usr/bin/env perl

# git-version-verify

use 5.16.3;
use warnings;

use Getopt::Long;
use IO::File;

use lib $ENV{PERSONALLIB};
use Misc qw(UNIX_TRUE UNIX_FALSE);

my %opt = ( update => 0 );
GetOptions(
    \%opt,
    qw ( update
      help )
) or die("Options error");
if ( $opt{help} ) {
    exec "cat $0";
}

my @tmp                   = split( /\s+/, qx($ENV{REALGIT} --version) );
my $git_version_installed = $tmp[-1];
my @git_version_installed = split( /\./, $git_version_installed );

my $gvvfile = "$ENV{REALGIT_VERSION_VERIFY_FILE}";
my ( $time, $git_version_last_verified ) = read_it($gvvfile);
my @git_version_last_verified =
  ( split( /\./, $git_version_last_verified // '' ), 0, 0, 0 )[ 0, 1, 2 ];

my %do = (
    'update' => $opt{update},
    'warn'   => 0
);
my $reason;
SEMANTIC_CHECK: for my $index ( 0, 1, 2 ) {
    if ( $git_version_installed[$index] != $git_version_last_verified[$index] )
    {
        if ( !-e $gvvfile ) {
            # Have not warned on this verified/installed version pair yet.
            $reason = 'initializing';
            $do{update} = 1;
        } else {
            if ( !$ENV{CRON} || $ENV{CRON} eq 'false' ) {
                # Warn Every. Single. Time. If we are not cron. Don't warn in
                # CRON jobs so we don't get a flood of emails.
                $reason = 'interactive';
                $do{warn} = 1;
            }
        }
        last SEMANTIC_CHECK;
    }
}
my @warning;
if ( $do{warn} ) {
    push @warning,
      ( $ARGV[0] ? "$ARGV[0]: " : '' )
      . "Verified ($reason) against $git_version_last_verified, but $git_version_installed is installed.";
}
if ( $do{update} ) {
    push @warning,
      "Writing $gvvfile, recording git version $git_version_installed.";
    write_it( $gvvfile, $git_version_installed );
}
warn ">>> WARNING: " . join( qq(\n), @warning, '' )
  if @warning;

exit UNIX_TRUE;

sub write_it {
    my ( $gvvfile, $installed ) = @_;
    my $gvvh = IO::File->new("> $gvvfile");
    $gvvh->print("time:@{[time()]},installed:$installed\n");
}

sub read_it {
    my ($gvvfile) = @_;
    my ( $time, $installed ) = ( 0, 0 );
    if ( -r $gvvfile ) {
        my $gvvh = IO::File->new("< $gvvfile");
        ( $time, $installed ) =
          map { $_->[1] }
          map { [ split( /:/, $_ ) ] }
          map { chomp; split(/,/) } <$gvvh>;
    }
    return ( $time, $installed );
}
