#!/usr/bin/env bash
# shellcheck disable=SC2154 # shuts up all the complaints about the $ANSI_ variables.

# color-echo

declare nonl
nonl=''
declare fgname
fgname=''
declare fgcolor
fgcolor=''
declare bgname
bgname=''
declare bgcolor
bgcolor=''
declare blink
blink=''
declare bold
bold=''
declare concealed
concealed=''
declare reset
reset="$ANSI_RESET"
declare reverse
reverse=''
declare underscore
underscore=''

# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='nh'
declare longopts='help,nr,fg:,bg:'
longopts="${longopts},black,blue,cyan,green,magenta,red,white,yellow"
longopts="${longopts},BLACK,BLUE,CYAN,GREEN,MAGENTA,RED,WHITE,YELLOW"
longopts="${longopts},bl,blink,bo,bold,con,concealed,hid,hidden,rev,reverse,under,underscore"
longopts="${longopts},BL,BLINK,BO,BOLD,CON,CONCEALED,HID,HIDDEN,REV,REVERSE,UNDER,UNDERSCORE"

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
((status != 0)) && exit $status ## return $status

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true
do
    declare option=$1
    shift
    [ "$option" != '--' ] && option=${option##-} && option=${option##-}
    case "$option" in
        n)
            nonl='-n' ;;
        nr)
            reset='' ;;
        fg)
            fgname=$1; shift ;;
        BLACK | BLUE | CYAN | GREEN | MAGENTA | ORANGE| RED | WHITE | YELLOW )
            fgname="ANSI_FG_${option}" ;;
        black | blue | cyan | green | magenta | orange| red | white | yellow )
            fgname="ANSI_FG_${option^^}" ;;
        bg)
            bgname=$1
            shift
            ;;
        bl | blink | BL | BLINK)
            blink="$ANSI_BLINK" ;;
        bo | bold | BO | BOLD)
            bold="$ANSI_BOLD" ;;
        con | concealed | hid | hidden | CON | CONCEALED | HID | HIDDEN )
            concealed="$ANSI_CONCEALED" ;;
        rev | reverse | REV | REVERSE )
            reverse="$ANSI_REVERSE" ;;
        under | underscore | UNDER | UNDERSCORE )
            underscore="$ANSI_UNDERSCORE" ;;
        h | help )
            bash-usage "$0"
            exit 0
            ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -ec -- "$option is an invalid option. See $0 --help"
            exit 1
            ;;
    esac
done

## Check the colors
if [ -n "$fgname" ]; then
    fgcolor="${!fgname}"
    if [ -z "$fgcolor" ]; then
        cmd-echo "'$fgname' is not a valid foreground color"
        bash-usage "$0"
        exit 1
    fi
fi
if [ -n "$bgname" ]; then
    bgcolor="${!bgname}"
    if [ -z "$bgcolor" ]; then
        cmd-echo "'$bgname' is not a valid background color"
        bash-usage "$0"
        exit 1
    fi
fi

## print
echo $nonl -e "$blink$bold$concealed$reverse$underscore$fgcolor$bgcolor$*$reset"

exit 0 ## usage guard when sourcing

:<<'__PODUSAGE__'
=head1 NAME

color-echo - echo in color

=head1 SYNOPSIS

 color-echo \
     [-n] \
     [--nr ] \
     [--bl[ink]] \
     [--bo[ld]] \
     [--con[cealed]|hid[den]] \
     [--rev[erse]] \
     [--under[score]] \
     [[--fg|--color] foregroundcolor] \
     [--bg backgroundcolor] \
     text to echo

=head1 DESCRIPTION

Print the text, adjusted using ascii escape sequences. Only adjusts the text
requested, calls the reset sequence when done (but see --nr), so if your
terminal is in a non-default state before calling 'color-echo', it will reset
after it is done.

=head1 OPTIONS

=over 4

=item -n

Do not print a newline.

=item -nr

Do not reset formatting adjustments so the carry on to subsequent output. You
could, if you want, use the sequence

  color-echo -nr -formattingoptions
  regular echos and other output to terminal
  color-echo -n

=item --blink, --bold, --concealed|--hidden, --reverse, --underscore

Adjust with these attributes. You can use any combination of them.

=item --fg color, --bg color

'color' is one of black, blue, cyan, green, magenta, red, white, yellow. You
can use --fg and --bg together.

=item --'color'

Alias for '--fg'.

=back

=head1 ARGUMENTS

All other arguments are printed by passing them to 'echo'.

=cut

__PODUSAGE__
