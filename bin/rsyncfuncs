# -*- sh -*-

# rsyncfuncs

RSYNCFUNCS_FILE=${BASH_SOURCE[0]}

rsyncfuncs_ls ()
{
    ls -l $RSYNCFUNCS_FILE
}
#nxport -f rsyncfuncs_ls
alias rsyncfuncs-dir=rsyncfuncs_ls

rsyncfuncs_edit ()
{
    xo $RSYNCFUNCS_FILE
}
#nxport -f rsyncfuncs_edit
alias rsyncfuncs-edit=rsyncfuncs_edit

rsyncfuncs_reload ()
{
    . $RSYNCFUNCS_FILE
}
#nxport -f rsyncfuncs_reload
alias rsyncfuncs-reload=rsyncfuncs_reload
alias rsyncfuncs-load=rsyncfuncs_reload

_rsync2nfs_usage ()
{
    echo "Usage: rsync2nfs -t|--target tgt \ "
    echo "                 [--verbose|-v] \ "
    echo "                 [ [--timestamp|-t] | [--multistamp|-m] ]\ "
    echo "                 src [src...]"
    echo "       rsync2nfs --help|-h"
    echo
}
#nxport -f _rsync2nfs_usage

RSYNCFUNCS_LOG_HOME="${HOME}/rsync2fs"

rsync2nfs ()
{
    local target
    local verbose
    local timestamp
    local multistamp
    local OPTSARGS=$(getoptp -o t:vh --long target:,verbose,timestamp,multistamp,help -- "$@")
    status=$?
    ((status != 0)) && _rsync2nfs_usage && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -h|--help) _rsync2nfs_usage; return 0 ;;
            -t|--target) shift; target=$1; shift ;;
            -v|--verbose) verbose='-v'; shift ;;
            --timestamp) timestamp=1; shift;;
            --multistamp) timestamp=1; multistamp=1; shift;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; _rsync2nfs_usage; return 1 ;;
        esac
    done

    if [ -z "$target" ]
    then
        echo "--target required";
        _rsync2nfs_usage;
        exit 1;
    fi

    [ -z "$multistamp" ] && /bin/rm -f $RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.*
    if [ -n "$timestamp" ]
    then
        mkdir -p $RSYNCFUNCS_LOG_HOME
        timestamp="$RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.$(date +%Y-%m-%dT%H-%M-%S)"

        ## Purge - we don't need more than 7 days (YES +6 GIVES US 7 DAYS)
        find $RSYNCFUNCS_LOG_HOME -type f -mtime +6 -delete

        ## STDOUT to the log
        exec 1> $timestamp

        ## STDERR to the log AND STDERR (so that cron reading STDERR will send an email)
        exec 2> >(tee -ia $timestamp >&2)
    fi

    if [ -n "$verbose" ]
    then
        echo "** Command: rsync -a -z -r -l $verbose --delete $@ $target"
        echo "** Start: $(date)"
        local start=$(date +%s)
    fi
    ## -a "archive" mode, which ensures that symbolic links, devices,
    ## -attributes, permissions, ownerships, etc. are preserved in the
    ## -transfer.
    ## -z - transport compressed
    ## -r - recurse
    ## -l - copy symlinks as symlinks
    ## -v - verbose
    ## --delete - if it was deleted in the source, delete it in the target too.
    ## -i - ssh stuff
    local sshfile
    for i in "${HOME}/.ssh/$(hostname)" "${HOME}/.ssh/id_rsa.$(hostname)"
    do
        [ -e $i ] && sshfile=$i
    done
    if [ -z "$sshfile" ]
    then
        echo "!! Cannot rsync - no ssh identity file found"
        return 1
    fi
    local sshtext="ssh -i $sshfile"
    rsync -e "$sshtext" -a -z -r -l $verbose --delete "$@" $target
    status=$?
    if [ -n "$verbose" ]
    then
        echo "** End: $(date)"
        local end=$(date +%s)
        echo "** Elapsed: $(( (end-start)/60 )) minutes, $(( (end-start)%60 )) seconds"
    fi
    return $status
}
#nxport -f rsync2nfs

NFSMACHINE=nylxdev1.dev.bloomberg.com
vmrsyncgits ()
{
    rsync2nfs -v --timestamp --target $NFSMACHINE:vmstashes/$(hostname)/mpersico5 ~/gits
    return $?
}
#nxport -f vmrsyncgits

vmrsync-running()
{
    local silent=0
    if [ "$1" = '-s' ]
    then
        silent=1
    fi

    local target="$NFSMACHINE:vmstashes/$(hostname)"
    local running=$(mktemp --suffix=.vmrsync-running)
    local ret
    ps lxf | grep -E "COMMAND|rsync.*$target" | grep -v grep  > $running
    if [ "$(cat $running | wc -l)" != 1 ]
    then
        cat $running
        ret=1
    else
        ((silent)) || echo "Not running"
        ret=0
    fi
    \rm -f $running
    return $ret
}

_vmrsync_usage ()
{
    echo "Usage: vmrsync [--verbose|-v] [--help|-h]"
    echo
}

vmrsync ()
{
    local verbose=''
    local silent='-s'
    local OPTSARGS=$(getoptp -o vh --long verbose,help -- "$@")
    status=$?
    ((status != 0)) && _vmrsync_usage && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -h|--help) _vmrsync_usage; return 0 ;;
            -v|--verbose) verbose='-v'; silent=''; shift ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; _vmrsync_usage; return 1 ;;
        esac
    done

    local status
    local target="$NFSMACHINE:vmstashes/$(hostname)"
    vmrsync-running -s
    if [ "$?" = '0' ]
    then
        rsync2nfs $verbose --multistamp --target $target ~
        status=$?
    else
        echo "Another vmrsync appears to be running--^"
        status=1
    fi
    return $status
}
#nxport -f vmrsync
alias vmsync='vmrsync '

vmrsync-status ()
{
    date
    touch /tmp/now.vmrsync-status
    ls -lart $RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.* /tmp/now.vmrsync-status
    vmrsync-running
    ssh $NFSMACHINE 'ls -la ~/.snapshot'
}

vmrsync-pause ()
{
    touch /tmp/pause.vmrsync.cron
    ls -lart /tmp/pause.vmrsync.cron
}

vmrsync-resume ()
{
    ls -lart /tmp/pause.vmrsync.cron
    rm /tmp/pause.vmrsync.cron
    ls -lart /tmp/pause.vmrsync.cron
}
