# -*- sh -*-

# rsyncfuncs

RSYNCFUNCS_FILE=${BASH_SOURCE[0]}

auditfuncs_init $RSYNCFUNCS_FILE
safe_func_export rsyncfuncs_audit

rsyncfuncs-edit ()
{
    rsyncfuncs_audit "$@"
    local editor; editor=$(editor_opt xo "$@"); shift $?
    $editor $RSYNCFUNCS_FILE
}

rsyncfuncs-reload ()
{
    rsyncfuncs_audit "$@"
    . $RSYNCFUNCS_FILE
}
alias rsyncfuncs-load=rsyncfuncs-reload

rsyncfuncs-help () {
    help_strings $RSYNCFUNCS_FILE "$@"
}


_rsync2nfs_usage ()
{
    echo "Usage: rsync2nfs -t|--target tgt \ "
    echo "                 [--verbose|-v] \ "
    echo "                 [ [--timestamp|-t] | [--multistamp|-m] ]\ "
    echo "                 src [src...]"
    echo "       rsync2nfs --help|-h"
    echo
}
#nxport -f _rsync2nfs_usage

RSYNCFUNCS_LOG_HOME="${HOME}/rsync2fs"
export RSYNCFUNCS_LOG_HOME

rsync2nfs ()
{
    ##@@ none||none||rsync2nfs||
    rsyncfuncs_audit "$@"

    local target
    local verbose
    local timestamp
    local multistamp
    local excludeFrom
    local OPTSARGS=$(getoptp -o t:vh --long target:,verbose,timestamp,multistamp,help,excludeFrom: -- "$@")
    status=$?
    ((status != 0)) && _rsync2nfs_usage && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -h|--help) _rsync2nfs_usage; return $(true) ;;
            -t|--target) shift; target=$1; shift ;;
            -v|--verbose) verbose='-v'; shift ;;
            --timestamp) timestamp=1; shift;;
            --multistamp) timestamp=1; multistamp=1; shift;;
            --excludeFrom) excludeFrom="--exclude-from=$2"; shift; shift;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; _rsync2nfs_usage; return $(false) ;;
        esac
    done

    if [ -z "$target" ]
    then
        echo "--target required";
        _rsync2nfs_usage;
        exit 1;
    fi

    [ -z "$multistamp" ] && /bin/rm -f $RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.*
    if [ -n "$timestamp" ]
    then
        mkdir -p $RSYNCFUNCS_LOG_HOME
        timestamp="$RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.$(date +%Y-%m-%dT%H-%M-%S)"

        ## Purge - we don't need more than 48 hours ago (YES +1 GIVES US 2 DAYS)
        find $RSYNCFUNCS_LOG_HOME -type f -mtime +1 -delete

        ## STDOUT to the log
        exec 1> $timestamp

        ## STDERR to the log AND STDERR (so that cron reading STDERR will send an email)
        exec 2> >(tee -ia $timestamp >&2)
    fi

    if [ -n "$verbose" ]
    then
        echo "** Command: rsync -a -z -r -l $verbose $excludeFrom --delete $@ $target"
        echo "** Log: $timestamp"
        echo "** Start: $(date)"
        local start=$(date +%s)
    fi
    ## -a "archive" mode, which ensures that symbolic links, devices,
    ## -attributes, permissions, ownerships, etc. are preserved in the
    ## -transfer.
    ## -z - transport compressed
    ## -r - recurse
    ## -l - copy symlinks as symlinks
    ## $verbose: -v - verbose
    ## $excludeFrom --excludeFrom=a file with exclusions not to sync
    ## --delete - if it was deleted in the source, delete it in the target too.
    ## -i - ssh stuff
    local sshfile
    for i in "${HOME}/.ssh/$(hostname)" "${HOME}/.ssh/id_rsa.$(hostname)"
    do
        [ -e $i ] && sshfile=$i
    done
    if [ -z "$sshfile" ]
    then
        echo "!! Cannot rsync - no ssh identity file found"
        return $(false)
    fi
    local sshtext="ssh -i $sshfile"
    rsync -e "$sshtext" -a -z -r -l $verbose  $excludeFrom --delete "$@" $target &
    local rsyncpid=$!
    if [ -n "$verbose" ]
    then
        echo "** Command PID: $rsyncpid"
    fi
    wait $rsyncpid
    status=$?
    if [ -n "$verbose" ]
    then
        echo "** End: $(date)"
        local end=$(date +%s)
        echo "** Elapsed: $(( (end-start)/60 )) minutes, $(( (end-start)%60 )) seconds"
    fi
    return $status
}
#nxport -f rsync2nfs

rsyncvmgits ()
{
    ##@@ none||none||rsyncvmgits||
    rsyncfuncs_audit "$@"

    set-nfsmachine; local status=$?; [ ! "$status" = 0 ] && return $status
    rsync2nfs -v --timestamp --target $NFSMACHINE:vmstashes/$(hostname)/mpersico5 ~/gits
    return $?
}
#nxport -f rsyncvmgits

rsyncvm-running()
{
    ##@@ none||none||rsyncvm-runnin||
    rsyncfuncs_audit "$@"

    local silent=0
    if [ "$1" = '-s' ]
    then
        silent=1
    fi

    set-nfsmachine; local status=$?; [ ! "$status" = 0 ] && return $status
    local target="$NFSMACHINE:vmstashes/$(hostname)"
    local running=$(mktemp --suffix=.rsyncvm-running)
    local ret
    ps lxf | grep -E "COMMAND|rsync.*$target" | grep -v grep > $running
    if [ "$(cat $running | wc -l)" != 1 ]
    then
        cat $running
        ret=1
    else
        ((silent)) || echo "Not running"
        ret=0
    fi
    \rm -f $running
    return $ret
}

_rsyncvm_usage ()
{
    echo "Usage: rsyncvm [--verbose|-v] [--help|-h] [--excludeFrom=FileOfExcludes]"
    echo
}

rsyncvm ()
{
    ##@@ none||none||_rsyncvm_usage||
    rsyncfuncs_audit "$@"

    local verbose=''
    local silent='-s'
    local excludeFromFile=''
    local excludeFromOpt=''
    local OPTSARGS=$(getoptp -o vh --long verbose,help,excludeFrom: -- "$@")
    status=$?
    ((status != 0)) && _rsyncvm_usage && return $status

    eval set -- "$OPTSARGS"
    while true
    do
        case "$1" in
            -h|--help)
                _rsyncvm_usage; return $(true) ;;
            -v|--verbose)
                verbose='-v'; silent=''; shift ;;
            --excludeFrom)
                excludeFromFile="$2"; shift; shift
                [ -r $excludeFromFile ] && excludeFromOpt="--exclude-from=$excludeFromFile" ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args
            *) echo "Internal error!"; _rsyncvm_usage; return $(false) ;;
        esac
    done

    local status
    set-nfsmachine; status=$?; [ ! "$status" = 0 ] && return $status
    local target="$NFSMACHINE:vmstashes/$(hostname)"
    local runningcheck=/tmp/rsyncvm.$$.runningcheck
    rsyncvm-running -s > $runningcheck 2>&1
    status=$?
    if [ "$status" = '0' ]
    then
        rsync2nfs $verbose $excludeFromOpt --multistamp --target $target ~
        status=$?
    else
        echo "Another rsyncvm appears to be running:"
        cat $runningcheck
        local rsyncpid=$(cat $runningcheck | tail -1 | cols -keep 2)
        local log=$(grep -l "Command PID: $rsyncpid" $RSYNCFUNCS_LOG_HOME/* | sort -r | head -1)
        if [ -n "$log" ]
        then
            cat $log
        fi
        status=1
    fi
    [ -f $runningcheck ] && \rm $runningcheck
    return $status
}
#nxport -f rsyncvm
alias vmsync='rsyncvm '

rsyncvm-status ()
{
    ##@@ none||none||rsyncvm-status||
    rsyncfuncs_audit "$@"

    local opt_log=$1
    date
    touch /tmp/now.rsyncvm-status
    ls -lart $RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.* /tmp/now.rsyncvm-status
    set-nfsmachine; status=$?; [ ! "$status" = 0 ] && return $status
    echo "~/.snapshot on $NFSMACHINE:"
    ssh $NFSMACHINE 'ls -la ~/.snapshot'

    local runningcheck=/tmp/rsyncvm-status.$$.runningcheck
    local running=1
    rsyncvm-running > $runningcheck 2>&1
    if [ "$(grep 'Not running' $runningcheck)" = 'Not running' ]
    then
        cat $runningcheck
        running=0
    fi
    [ -f $runningcheck ] && \rm $runningcheck

    local log=$(ls -rt -c1 $RSYNCFUNCS_LOG_HOME/rsync2fs.timestamp.* | tail -1)
    if [ "$opt_log" = '--log' ]
    then
        cat $log
    elif ((running))
    then
        echo "Tailing current log. CTRL-C to end."
        tail -n +1 -f $log
    fi
}

rsyncvm-pause ()
{
    ##@@ none||none||rsyncvm-pause||
    rsyncfuncs_audit "$@"

    touch /tmp/rsyncvm.cron.pause || return $?
    ls -lart /tmp/rsyncvm.cron.pause
    return $?
}

rsyncvm-resume ()
{
    ##@@ none||none||rsyncvm-resume||
    rsyncfuncs_audit "$@"

    ls -lart /tmp/rsyncvm.cron.pause
    /bin/rm /tmp/rsyncvm.cron.pause || return $?
    [ ! -f /tmp/rsyncvm.cron.pause ] && echo 'Removed' && return $(true)
}
