# -*- sh -*-
# shellcheck shell=bash

# git-clone

##@@ 0001||group||git-clone||Clone a repo locally. Args: protocol namespace repo

declare opt_y=0
declare opt_t=0
declare opt_triangle_namespace=''
declare opt_worktree=1
declare opt_local=0
declare protocol
declare pipe
declare moreopts
moreopts=1
while [[ "$1" =~ ^- ]] && ((moreopts))
do
    declare original="$1"
    declare option
    option=$(dashstripper "$original")
    shift ## That way you avoid endless loops on invalid options.

    case $option in
        pipe )
            pipe=$1
            shift;;
        p | proto | protocol )
            protocol=$1
            shift;;
        y | yes )
            opt_y=1;;
        t | timestamp )
            opt_t=1;;
        tri | triangle )
            declare tmp_otn;
            tmp_otn=$1;
            shift;
            opt_triangle_namespace=${tmp_otn%/*}
            if [ ! "$tmp_otn" = "$opt_triangle_namespace" ]
            then
                script-echo \
                    "WARNING: --triangle takes an upstream namespace specification," \
                    "         not a full upstream repo specification." \
                    "         We will use" \
                    "             $opt_triangle_namespace" \
                    "         not" \
                    "             $tmp_otn"
            fi
            ;;
        noworktree )
            opt_worktree=0;;
        local )
            opt_local=1;;
        ## standard options
        h | help )
            script-usage
            exit 0
            ;;
        debug | x )
            set -x
            trap 'set +x' EXIT
            ;;
        --)
            moreopts=0
            ;;
        * )
            echo "$original is an invalid option. See $0 --help";
            ## (return if a func, exit if a script) 1
            ;;
    esac
done

[ -z "$1" ] && script-usage && exit "$NOT_OK"

declare namespace=$1;shift
if [[ "$namespace" == */* ]]
then
    declare -a tmpa
    asplit tmpa / "$namespace"
    namespace=${tmpa[0]}
    repo=${tmpa[1]}
else
    repo=$1;shift
fi

declare cwpath
cwpath="$(realpath "$(pwd)")"
declare local_protocol
local_protocol="$(basename "$cwpath")"
if [ "$local_protocol" != "$protocol" ]
then
    if ((opt_local == 0))
    then
        script-echo    "You must be in a declare directory path ending in"
        script-echo -c "   $protocol"
        script-echo -c "You are in $cwpath"
        # gitfuncs_root set externally
        # shellcheck disable=SC2154
        declare shouldbein="$gitfuncs_gitroot/$protocol"
        if [ ! -d "$shouldbein" ]
        then
            script-echo    "Cannot find '$shouldbein'."
            script-echo -c "Correct and re-execute."
            exit "$NOT_OK"
        else
            declare resp
            if ((opt_y))
            then
                script-echo "Going to $shouldbein"
                resp='y'
            else
                resp=$(script-yesno "cd to $shouldbein")
            fi
            if [ "$resp" = 'n' ]
            then
                script-echo "Correct and re-execute."
                exit "$NOT_OK"
            else
                _git-cd-to "$shouldbein"
            fi
        fi
    else
        script-echo "--declare specifed. Cloning into $(pwd)/$repo"
    fi
fi

declare protocol_url
protocol_url="$(kvstore get gitfuncs_gitsvcs "$protocol")"
if [ -z "$protocol_url" ]
then
    script-echo "$protocol is unknown. Valid protocols are:$(kvstore vals gitfuncs_gitsvcs)"
    exit "$NOT_OK"
fi

declare tgt="$namespace/$repo"
if [ -e "$tgt" ]
then
    declare resp
    if ((opt_y))
    then
        resp='y'
    else
        resp=$(script-yesno "'$tgt' exists. Will not clone over it. Remove it" n)
    fi
    [ "$resp" = 'n' ] && exit "$NOT_OK"
    rm -rf "$tgt"
fi

declare cmd="git clone ${protocol_url}$namespace/$repo $namespace/$repo"
script-echo "$cmd ..."
$cmd
status=$?; [ "$status" != '0' ] && exit $status
if ((opt_t))
then
    script-echo 'Setting timestamps...'
    (builtin cd "$namespace/$repo"; git-retimestamp)
    script-echo 'Done'
fi

## dirlist, not builtin cd, to take advantage this cd enhancement
dirlist "$namespace/$repo"
if [ -n "$opt_triangle_namespace" ]
then
    script-echo "Setting up triangle workflow with ${protocol_url}$opt_triangle_namespace/${repo}..."
    git-set-triangle "${protocol_url}" "$opt_triangle_namespace" "$namespace" "$repo"
    git pull # To refresh from the upstream
fi
git remote -v

if ((opt_worktree))
then
    script-echo "Setting up for worktrees..."
    mkdir wt
    ls -ld "$(pwd)/wt"
fi

## Add this repo to the list
git-go-set

if [ -z "$pipe" ]
then
    script-echo "Done. Execute" "gitgo $namespace/$repo" "to use."
else
    echo "$namespace/$repo" > "$pipe" &
fi
exit 0

:<<'__USAGE__'
git-clone - wraps 'git clone'

TBD

__USAGE__
