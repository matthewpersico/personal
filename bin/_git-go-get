#!/usr/bin/env bash

# _git-go-get

#shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"

declare update
declare roots
declare mbig
declare wt
declare only_wt
declare fields
declare filter
declare exact
declare limited

# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='eurmwofh'
declare longopts='exact,et,exact-tail,eh,exact-head,update,roots,mbig,wt,only_wt,wto,fields,limited:,help'

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
((status != 0)) && exit $status ## return $status ## in functions

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true
do
    declare option=$1
    shift
    [ "$option" != '--' ] && option=${option##-} && option=${option##-}
    case "$option" in
        e | exact) exact='headtail' ;;
        et | exact-tail) exact='tail' ;;
        eh | exact-head) exact='head' ;;
        u | update) update=1 ;;
        r | roots) roots=1 ;;
        m | mbig) mbig=1 ;;
        w | wt) wt=1 ;;
        o | only_wt | wto ) wt=1; only_wt=1 ;;
        f | fields) fields=1 ;;
        limited)
            ## Searches are limited to this string of comma separated
            ## directories at the start of the search.
            limited="$1"
            shift ;;
        h | help ) func-usage && exit 0 ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -e -- "$option is an invalid option. See $0 --help"
            exit 1
            ;;
        esac
    done

# shellcheck disable=SC2124
filter="$1"

declare tmpfile
tmpfile=$(mktemp -t tmp._git-go-get.XXXXXXXXXX)
rm_on_exit "$tmpfile"
rm_on_exit "${tmpfile}.001"

declare gitfuncs_git_go_file
if [ -n "$limited" ]
then
    for i in $(asplit - , "$limited")
    do
        echo "$i" >> "$tmpfile"
    done
else
    gitfuncs_git_go_file="${TILDAE:-$HOME}/gits/.git-go.$(date +%Y%m%d)"
    if [ ! -e "$gitfuncs_git_go_file" ] || ((update))
    then
        git-go-set $mbig
    fi
    cp "$gitfuncs_git_go_file" "$tmpfile"
    if ((roots==0))
    then
        grep '(repo)' "$tmpfile" | sed 's/(repo)//' > "${tmpfile}.001"
        mv "${tmpfile}.001" "$tmpfile"
    fi

    if ((mbig==0))
    then
        grep -v 'MBIG' "$tmpfile" > "${tmpfile}.001"
        mv "${tmpfile}.001" "$tmpfile"
    fi

    if ((wt==0))
    then
        grep -v '/wt/' "$tmpfile" > "${tmpfile}.001"
        mv "${tmpfile}.001" "$tmpfile"
    fi

    if ((only_wt==1))
    then
        grep '/wt/' "$tmpfile" > "${tmpfile}.001"
        mv "${tmpfile}.001" "$tmpfile"
    fi
fi

if [ -n "$filter" ]
then
    case $exact in
        headtail ) grep -E -- "^$filter\$" "$tmpfile" > "${tmpfile}.001" ;;
        head     ) grep -E -- "^$filter"   "$tmpfile" > "${tmpfile}.001" ;;
        tail     ) grep -E -- "$filter\$"  "$tmpfile" > "${tmpfile}.001" ;;
        *        ) grep -i -- "$filter"    "$tmpfile" > "${tmpfile}.001" ;;
    esac
    mv "${tmpfile}.001" "$tmpfile"
fi

if((fields))
then
    tr '\n' ' ' < "$tmpfile"
else
    cat "$tmpfile"
fi
