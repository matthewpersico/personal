## -*- sh -*-

set -e ## Die on errors

source $BASH_INC_DIR/on_exit.binc

if [[ "$(pwd)" =~ functions ]] || \
       [[ "$(pwd)" =~ bin ]]
then
    script-echo -s $0 'Cannot be in functions or bin subdir for conversion.'
    script-echo -s $0 -c 'cd .. and re-exec.'
    exit 1
fi

if [ -z "$1" ]
then
    script-echo -s $0 "usage: $0 func [func...]"
    script-echo -s $0 -c "       You can use or not use the 'function/'"
    script-echo -s $0 -c "       prefix;we will adjust."
    exit 1;
fi

## Find sources, set targets
raw_src_paths="$@"
bad=0
for src_path in $raw_src_paths
do
    adj_src_path="functions/$(basename $src_path)"
    if [ ! -r $adj_src_path ]
    then
        script-echo -s $0 "$adj_src_path not found"
        ((bad+=1))
    else
        justifed=$(grep $adj_src_path 'Function Justification' | \
                       grep -i -v none)
        if [ -n "$justified" ]
        then
            script-echo -s $0 "Not converting $adj_src_path: $(grep $adj_src_path) 'Function Justification'"
            ((bad+=1))
        else
            file=$(basename $adj_src_path)
            files="$files $file"
            tgt_paths="$tgt_paths bin/$file"
            src_paths="$stc_paths $adj_src_path"
        fi
    fi
done
[ -z "$tgt_paths" ] && script-echo -s $0 "No sources found to convert" && exit 1
((bad)) && script-echo -s $0 "Some sources bad. bailing" && exit 1

script-echo -s $0 git mv $src_paths bin
git mv $src_paths bin
script-echo -s $0 "git commit $src_paths -m 'func to exec, mv (delete) phase'"
git commit $src_paths -m 'func to exec, mv (delete) phase'
script-echo -s $0 "git commit $tgt_paths -m 'func to exec, mv (create) phase'"
git commit $tgt_paths -m 'func to exec, mv (create) phase'

script-echo -s $0 func_to_exec.pl $tgt_paths
func_to_exec.pl $tgt_paths

commit_list=$(mktemp --suffix=.func_to_exec)    ## a file holding the functions
                                                ## we chose to commit after
                                                ## conversion
rm_on_exit $commit_list

for tgt_path in $tgt_paths
do
    resp='e' ## Assume we want to edit
    while [ "$resp" = 'e' ]
    do
        diff -w $tgt_path ${tgt_path}.new && true ## so that a diff does not
                                                  ## trigger an exit due to the
                                                  ## -e setting
        resp=$(pick "mv ${tgt_path}.new $tgt_path" "y/n/e" )
        if [ "$resp" = 'y' ]
        then
            mv ${tgt_path}.new $tgt_path
            chmod +x $tgt_path
            echo $tgt_path >> $commit_list
        elif [ "$resp" = 'e' ]
        then
            $EDITOR $tgt_path
        fi
    done
done

if [ -s $commit_list ]
then
    commit_contents=$(cat $commit_list | tr '\n' ' ')
    script-echo -s $0 "git commit $commit_contents -m 'func to exec, convert phase'"
    git commit $commit_contents -m 'func to exec, convert phase'
    for i in $commit_contents
    do
        unset_contents="$unset_contents $(basename $i)"
    done
    script-echo -s $0 "Remember to 'unset -f $unset_contents'"
else
    script-echo -s $0 nothing to commit after convert phase
fi
