#!/usr/bin/env bash

# cmd-echo

## ANSI_reset is in the env, variable is not all caps, so shellcheck
## complains.
# shellcheck disable=SC2154
declare reset_normal="${ANSI_RESET}"
declare reset_title=''
declare nonl=''
declare local_nonl=''
declare continueline=0
declare head=0
declare title=0
declare join=0
declare id=''
declare append=0
declare prefix='>>> '
declare opt_color=0
declare opt_stderr=0
declare opt_reverse=0
declare color=NONE
declare -A colors
colors=(
    [NONE]=''

    [RED]="${ANSI_FG_RED}"
    [REVRED]="${ANSI_FG_RED}${ANSI_REVERSE}"

    [YELLOW]="${ANSI_FG_YELLOW}"
    [REVYELLOW]="${ANSI_FG_YELLOW}${ANSI_REVERSE}"

    [ORANGE]="${ANSI_FG_ORANGE}"
    [REVORANGE]="${ANSI_FG_ORANGE}${ANSI_REVERSE}"

    [BLUE]="${ANSI_FG_BLUE}"
    [REVBLUE]="${ANSI_FG_BLUE}${ANSI_REVERSE}"
)
## Add the status colors and control sequence
colors+=(
    [REVERSE]="${ANSI_REVERSE}"
    [WARNING]="${colors[REVORANGE]}"
    [ERROR]="${colors[REVRED]}"
    [DEBUG]="${colors[REVBLUE]}"
)

declare msg_status=''
declare interactive=1
[[ ! -t 1 ]] && interactive=0
# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='inachfsojwedp::x'
declare longopts='head,title,id:,help,wc,ec,dc,color:,oii,noreverse,norev,reverse,rev'
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
((status != 0)) && echo "cmd-echo: getopt failure" && exit $status ## return $status ## in functions

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        head )
            head=1 ;;
        title )
            head=1
            title=1
            reset_title="${reset_normal}"
            reset_normal=''
            ;;
        id )
            # shellcheck disable=SC2034 # id is referenced indirectly below:
            ##                               for i in "id" "msg_status"
            id="$1"; shift ;;
        i )
            interactive=1 ;;
        n )
            nonl='-n' ;;
        a )
            append=1 ;;
        c )
            continueline=1 ;;
        h | help )
            bash-usage "$0" && exit 0;;
        f | s | o )
            echo "cmd-echo: -f, -s and -o are no longer used. Ignored..." ;;
        j )
            join=1 ;;
        wc )
            opt_color=1
            ;&
        w )
            msg_status='WARNING'
            opt_stderr=1
            ;;
        ec )
            opt_color=1
            ;&
        e )
            msg_status='ERROR'
            opt_stderr=1
            ;;
        dc )
            opt_color=1
            ;&
        d )
            msg_status='DEBUG'
            opt_stderr=1
            ;;
        color )
            set -x
            opt_color=1
            color="${1^^}"; shift
            declare norev=${color#REV}
            case "$norev" in
                BLACK | BLUE | CYAN | GREEN | MAGENTA \
                    | ORANGE | RED | WHITE | YELLOW )
                    declare fgvar="ANSI_FG_${norev}"
                    colors+=(["$norev"]="${!fgvar}"
                             ["REV${norev}"]="${!fgvar}${ANSI_REVERSE}")
                    if [[ $color =~ ^rev ]]; then
                        opt_reverse=1
                    fi
                    ;;
                * )
                    echo "cmd-echo: $color is not one of BLACK, BLUE, CYAN, GREEN, MAGENTA, ORANGE, RED, WHITE, or YELLOW"
                    exit 1
                    ;;
            esac
            ;;
        norev* )
            opt_reverse=0 ;;
        rev* )
            opt_reverse=1 ;;
        oii | only-if-interactive )
            ((interactive==0)) && exit 0 ;;
        p )
            prefix=$1; shift ;;
        x )
            set -x;;
        -- ) break ;; ## ## VITAL!!! Exits the while loop, no more options,
                      ## remaining $*, if any, are args
        * )
            echo "cmd-echo: '$option' is an invalid option."
            exit 1
            ;;
    esac
done

declare docolor=${colors[$color]}
((opt_color)) && ((opt_reverse)) && docolor=${colors["REV${color}"]}
declare dorest=${reset_title}
declare doresn=${reset_normal}
if ( ((! interactive )) && ((! opt_stderr )) ); then
    ## There are two conditions in the if.  First is if STDOUT is being
    ## redirected away from the terminal,let's assume it's a file, don't print
    ## the colorizing sequences, **except** if the redirection is to stderr for
    ## a warning/error/debug message.
    docolor=''
    dorest=''
    doresn=''
else
    if((opt_color)) && [[ -n $msg_status ]]; then
        docolor=${colors[$msg_status]}
    fi
fi
if ((opt_stderr)); then
    holdstdout=$(get-next-descriptor)
    eval "exec $holdstdout>&1"  ## Link file descriptor with stdout, which saves stdout.
    exec 1>&2  ## Re-point stdout to the log.

    ## We set up a trap here to make sure that if the command dies so hard that
    ## the rest of this script does not run, we get something from the shunted
    ## output.
    # shellcheck disable=SC1078
    # shellcheck disable=SC1079
    trap "eval ""exec 2>&$holdstderr $holdstderr>&-""      ## Restore stderr and close file descriptor.
     " SIGTERM SIGINT SIGFPE SIGBUS
fi
((head)) && echo
declare argcnt="$#"
for arg in "$@"; do
    if [[ -n "${id}" ]]; then
        prefix="$prefix${id} - "
        id=''
    fi
    if [[ -n "${msg_status}" ]]; then
        prefix="$prefix${msg_status}:"
        msg_status=''
    fi

    if ((append)); then
        prefix=''
    fi

    if ((continueline)); then
        ## Substitutes all characters for spaces, giving us a properly
        ## spaced indent, which indicates a continuation of the prior line.
        # shellcheck disable=SC2001
        prefix=$(echo "$prefix" | sed 's/./ /g')
    fi

    if ((join)); then
        echo $nonl -e "${docolor}${prefix}$*${dorest}${doresn}"
    else
        if((argcnt==1)); then
            local_nonl=$nonl
        fi
        ((argcnt-=1))
        echo $local_nonl -e "${docolor}${prefix}${arg}${dorest}${doresn}"
    fi

    ## If there is a next line, it should be a continue line
    ((continueline)) || continueline=1

    ## Reset out of title
    if ((title)); then
        title=0 ## no need to reset for ever
        reset_normal="${doresn}"
        reset_title=''
    fi
    if ((join)); then
        break
    fi
done

##eval "exec 2>&$holdstderr $holdstderr>&-"      ## Restore stderr and close file descriptor.

exit 0 ## USAGE guard during sourcing this file.

:<<'__PODUSAGE__'
=head1 NAME

  cmd-echo - label echo with some prefix and highlighting

=head1 SYNOPSIS

cmd-echo [--oii] [--head] [--title] [-n] [-a] [-c] [-i] [-id "id" ] \
         [j] [ [-w[c]|-e[c]|-d[c]|--color [REV]COLOR] [-p 'prefix' ] -- "text" ["text"...]

=head1 DESCRIPTION

Call 'cmd-echo' to print the first "text" on a line with a reversed-color
prefix. Print subsequent lines indented with reversed color spaces, indicating
continuation. The name of the calling script is no longer printed. Too
difficult get it right with a mixture of functions and scripts at different
nesting levels. It is sufficient just to be able to pick out our messages vs
those printed by the utilities we call.

The reversed and color adornments are is skipped if we think the output is not
a terminal; i.e., a log file.

The text is echo'ed to STDOUT. Redirect the command yourself if you want to put
the output on a different discriptor.

=head1 OPTIONS

=over 4

=item --

Indicates end of options to 'cmd-echo' so that all subsequent arguments are
taken as text to print. Technically not necessary UNLESS your first argument to
print happens to match one of the options to 'cmd-echo'.

=item --oii|--only-if-interactive

If --oii is specified and cmd-echo is called in a non-interactive mode (calling
script output is redirected to a file, for example), exit 0 without printing
anything.  When this flag is not used, then non-interactive prints are still
performed, but the ascii control codes for colorization are not printed.

=item --head

Print a blank line for spacing before printing any text.

=item --title

Print a blank line for spacing before printing any text and then print the
entire first text line as reversed, not just the prefix.

=item -n

Do not print a new line after printing the last argument.

-item -a

Do not print the prefix when printing these lines. Using in conjunction with -n
and specifying only one line for each call allows you 'a'ppend to a single line
as progress takes place in your process.

=item -c

Print the first "text" element as a continuation line.

=item -i

Force interactive mode to force the colorization strings. Used when the output
is being passed onto some other command as a prompt.

=item -id "text"

Prefix the first line of the message with this text and a ": " and indent
subsequent lines accordingly.

=item --color [REV]COLOR

Print the message in color. COLOR is one of BLACK, BLUE, CYAN, GREEN, MAGENTA,
ORANGE, RED, WHITE, or YELLOW. Adding the 'REV' prefix prints in reverse.

=item -j

Instead of printing each argument on its own line, print them all on one line,
separated by one space each.

=item -w|-e|-d

Print the string 'WARNING', 'ERROR', or 'DEBUG' before the message and print
the message to stderr.

=item -wc|-ec|-dc

Print the string 'WARNING', 'ERROR', or 'DEBUG' before the message with an
orange (easier to read than yellow), red or blue background, respectively and
print the message to stderr.

=item -p

Instead of '>>> ' printed before each line, print this instead. A blank prefix
('') does what you'd expect.

=back

=cut

__PODUSAGE__

#  LocalWords:  funcname shellcheck util func PODUSAGE STDOUT cmd args usr
#  LocalWords:  LocalWords
