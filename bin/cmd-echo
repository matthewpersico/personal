# -*- sh -*-
# shellcheck shell=bash

# cmd-echo

## ANSI_reset is in the env, variable is not all caps, so shellcheck
## complains.
declare reset_normal="${ANSI_RESET}"
declare reset_title=''
declare nonl=''
declare local_nonl=''
declare continuation_line=0
declare no_continuation_line=0
declare head=0
declare title=0
declare join=0
declare id=''
declare append=0
declare prefix='>>> '
declare continuation_prefix='    '
declare opt_color=0
declare opt_stderr=0
declare opt_reverse=0
declare lineno=''
declare color=NONE
declare -A colors
colors=(
    [NONE]=''

    [RED]="${ANSI_FG_RED}"
    [REVRED]="${ANSI_FG_RED}${ANSI_REVERSE}"
    [INVRED]="${ANSI_FG_BLACK}${ANSI_BG_RED}"

    [YELLOW]="${ANSI_FG_YELLOW}"
    [REVYELLOW]="${ANSI_FG_YELLOW}${ANSI_REVERSE}"
    [INVYELLOW]="${ANSI_FG_BLACK}${ANSI_BG_YELLOW}"

    [ORANGE]="${ANSI_FG_ORANGE}"
    [REVORANGE]="${ANSI_FG_ORANGE}${ANSI_REVERSE}"
    [INVORANGE]="${ANSI_FG_BLACK}${ANSI_BG_ORANGE}"

    [BLUE]="${ANSI_FG_BLUE}"
    [REVBLUE]="${ANSI_FG_BLUE}${ANSI_REVERSE}"
    [INVBLUE]="${ANSI_FG_WHITE}${ANSI_BG_BLUE}"

    [GREEN]="${ANSI_FG_GREEN}"
    [REVGREEN]="${ANSI_FG_GREEN}${ANSI_REVERSE}"
    [INVGREEN]="${ANSI_FG_BLACK}${ANSI_BG_GREEN}"
)
## Add the status colors and control sequence
colors+=(
    [REVERSE]="${ANSI_REVERSE}"
    [WARNING]="${colors[INVORANGE]}"
    [ERROR]="${colors[INVRED]}"
    [DEBUG]="${colors[INVBLUE]}"
    [INFO]="${colors[INVGREEN]}"
)

declare holdstdout

declare msg_status=''
declare interactive=1
[[ ! -t 1 ]] && interactive=0
# Read the options and args from command line. Note that the long and short
# don't have to match up.
declare OPTSARGS
declare shortopts='inachfsojwedp::xl:'
declare longopts='head,title,id:,help,wc,ec,dc,info,infoc,color:,oii,noreverse,norev,reverse,rev,noc,lineno:,nolineno:'
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        head )
            head=1 ;;
        title )
            head=1
            title=1
            reset_title="${reset_normal}"
            reset_normal=''
            ;;
        id )
            id="$1"; shift ;;
        l | lineno )
            lineno=$1;shift
            ;;
        nolineno )
            shift
            ;;
        i )
            interactive=1 ;;
        n )
            nonl='-n' ;;
        a )
            append=1 ;;
        c )
            continuation_line=1 ;;
        noc )
            no_continuation_line=1 ;;
        h | help )
            bash-usage "$0"
            true; exit
            ;;
        f | s | o )
            echo "cmd-echo: -f, -s and -o are no longer used. Ignored..." ;;
        j )
            join=1 ;;
        wc )
            opt_color=1
            ;&
        w )
            msg_status='WARNING'
            opt_stderr=1
            ;;
        ec )
            opt_color=1
            ;&
        e )
            msg_status='ERROR'
            opt_stderr=1
            ;;
        dc )
            opt_color=1
            ;&
        d )
            msg_status='DEBUG'
            opt_stderr=1
            ;;
        infoc )
            opt_color=1
            ;&
        info )
            msg_status='INFO'
            opt_stderr=0
            ;;
        color )
            opt_color=1
            color="${1^^}"; shift
            declare norev=${color#REV}
            case "$norev" in
                BLACK | BLUE | CYAN | GREEN | MAGENTA \
                    | ORANGE | RED | WHITE | YELLOW )
                    declare fgvar="ANSI_FG_${norev}"
                    colors+=(["$norev"]="${!fgvar}"
                             ["REV${norev}"]="${!fgvar}${ANSI_REVERSE}")
                    if [[ $color =~ ^rev ]]; then
                        opt_reverse=1
                    fi
                    ;;
                * )
                    echo "cmd-echo: $color is not one of BLACK, BLUE, CYAN, GREEN, MAGENTA, ORANGE, RED, WHITE, or YELLOW"
                    false; exit
                    ;;
            esac
            ;;
        norev* )
            opt_reverse=0 ;;
        rev* )
            opt_reverse=1 ;;
        oii | only-if-interactive )
            ((interactive==0)) && { true; exit; } ;;
        x )
            set -x;;
        -- ) break ;; ## ## VITAL!!! Exits the while loop, no more options,
                      ## remaining $*, if any, are args
        * )
            echo "cmd-echo: '$option' is an invalid option."
            false; exit
            ;;
    esac
done

if [[ -n $lineno ]] && [[ -z $id ]]; then
    cmd-echo --id cmd-echo --wc "Won't print line number without --id option"
    lineno=''
fi

declare dorest
declare doresn
declare docolor=${colors[$color]}
if ((opt_color)); then
    ((opt_reverse)) && docolor=${colors["REV${color}"]}
    dorest=${reset_title}
    doresn=${reset_normal}
fi

if ( ((! interactive )) && ((! opt_stderr )) ); then
    ## There are two conditions in the if.  First is if STDOUT is being
    ## redirected away from the terminal,let's assume it's a file, don't print
    ## the colorizing sequences, **except** if the redirection is to stderr for
    ## a warning/error/debug message.
    docolor=''
    dorest=''
    doresn=''
else
    if((opt_color)) && [[ -n $msg_status ]]; then
        docolor=${colors[$msg_status]}
        dorest=${reset_title}
        doresn=${reset_normal}
    fi
fi
if ((opt_stderr)); then
        holdstdout=$(get-next-descriptor)
        eval "exec $holdstdout>&1"  ## Link file descriptor with stdout, which saves stdout.
        exec 1>&2  ## Re-point stdout to stderr. Now we don't need to
                   ## conditionally redirect every echo call.

        ## We set up a trap here to make sure we unwind the redirects on success or failure
        trap "eval ""exec 1>&$holdstdout $holdstdout>&-""
     " SIGTERM SIGINT SIGFPE SIGBUS EXIT
fi
((head)) && echo
declare argcnt="$#"
if [[ -n "${id}" ]]; then
    [[ -n $lineno ]] && id="$id:$lineno"
    prefix="${prefix/% / [${id}]} "
    id=''
fi
if [[ -n "${msg_status}" ]]; then
    prefix="${prefix/% / ${msg_status}:} "
    msg_status=''
fi
if ((append)); then
    prefix=''
fi
for arg in "$@"; do
    if ((continuation_line == 1)); then
        prefix=$continuation_prefix
    fi
    ## If there is a next line, it should be a continuation line
    ((no_continuation_line == 0)) && continuation_line=1
    if ((opt_stderr)); then
        holdstdout=$(get-next-descriptor)
        eval "exec $holdstdout>&1"  ## Link file descriptor with stdout, which saves stdout.
        exec 1>&2  ## Re-point stdout to stderr. Now we don't need to
                   ## conditionally redirect every echo call.

        ## We set up a trap here to make sure we unwind the redirects on success or failure
        trap "eval ""exec 1>&$holdstdout $holdstdout>&-""
     " SIGTERM SIGINT SIGFPE SIGBUS EXIT
    fi

    if ((join)); then
        echo $nonl -e "${docolor}${prefix}$*${dorest}${doresn}"
    else
        if((argcnt==1)); then
            local_nonl=$nonl
        fi
        ((argcnt-=1))
        echo $local_nonl -e "${docolor}${prefix}${arg}${dorest}${doresn}"
    fi

    ## Reset out of title
    if ((title)); then
        title=0 ## no need to reset for ever
        ((opt_color)) && reset_normal="${doresn}"
        reset_title=''
    fi
    if ((join)); then
        break
    fi
done

##eval "exec 2>&$holdstderr $holdstderr>&-"      ## Restore stderr and close file descriptor.

exit

:<<__PODUSAGE__
=head1 NAME

  cmd-echo - label echo with some prefix and highlighting

=head1 SYNOPSIS

cmd-echo [--oii] [--head] [--title] [-n] [-a] [-c|--noc] [-i] [-id "id" ] \
         [j] [ [-w[c]|-e[c]|-d[c]|--info[c]|--color [REV]COLOR] -- "text" ["text"...]

=head1 DESCRIPTION

Call "cmd-echo" to print the first "text" on a line with a prefix
'>>>'. Subsequent lines are printed indented with spaces, indicating
continuation.

Reversed and color adornments, if any, are skipped if we think the output is
not a terminal; i.e., a log file.

The text is echo-ed to STDOUT. Redirect the command yourself if you want to put
the output on a different output descriptor (i.e., STDERR).

=head1 OPTIONS

=over 4

=item --

Indicates end of options to 'cmd-echo' so that all subsequent arguments are
taken as text to print. Technically not necessary UNLESS your first argument to
print happens to match one of the options to 'cmd-echo'.

=item --oii|--only-if-interactive

If --oii is specified and cmd-echo is called in a non-interactive mode (calling
script output is redirected to a file, for example), exit true, without
printing anything.  When this flag is not used, then non-interactive prints are
still performed, but the ascii control codes for colorization are not printed.

=item --head

Print a blank line for spacing before printing any text.

=item --title

Print a blank line for spacing before printing any text and then print the
entire first text line as reversed, not just the prefix.

=item -n

Do not print a new line after printing the last argument.

-item -a

Do not print the prefix when printing these lines. Using in conjunction with -n
and specifying only one line for each call allows you (a)ppend to a single line
as progress takes place in your process.

=item -c

Print all lines as continuation lines, substituting spaces1 for the prefix. You
must provide the same prefix that you used in prior calls if you are trying to
get multiple calls to line up.

=item -noc

Print no lines as continuation lines; all lines get the prefix.

=item -i

Force interactive mode to force the colorization strings. Used when the output
is being passed onto some other command as a prompt.

=item --id "text"

Prefix the first line of the message with this text, followed by a ": " and
indent subsequent lines accordingly.

Note: The original purpose of this function was to determine what
function/script was making the 'cmd-echo' call and print **that** as the id
text ('cmd'-echo; get it?). Turns out that this piece of information is
ambiguous when you start defining functions both outside your script and inside
your script, and then you start calling one from the other, and then you call
them in subshells to capture output. So, don't try to add the
auto-determination to the code. We've already ripped it out once. Leave --id
off unless you come to an output that you don't understand; then find it and
add '--id'.

=item -l|--lineno $LINENO

Print the line number where cmd-line was called. Specified as $LINENO in
bash. Will not print if --id is not specified.

Note: As above, don't try to auto-determine the line number in this code; pass
it in.

=item --nolineno $LINENO

Provided for you to globally change the flag in your code to stop line numbers
from printing when you've finished debugging your problem.

=item --color [REV]COLOR

Print the message in color. COLOR is one of BLACK, BLUE, CYAN, GREEN, MAGENTA,
ORANGE, RED, WHITE, or YELLOW. Adding the 'REV' prefix prints in reverse.

=item -j

Instead of printing each argument on its own line, print them all on one line,
separated by one space each.

=item --w|--e|--d

Put the string 'WARNING', 'ERROR', or 'DEBUG' before the message and print to
stderr.

=item --info

Put the string 'INFO' before the message and print stdout. We use '--info'
because '-i' is taken.

=item --wc|--ec|--dc

Put the string 'WARNING', 'ERROR', or 'DEBUG' before the message. Print to
stderr with an orange (easier to read than yellow), red, or blue background,
respectively.

=item --infoc

Put the string 'INFO' before the message. Print to stdout with a green
background.

=back

=cut

__PODUSAGE__

#  LocalWords:  funcname shellcheck util func PODUSAGE STDOUT cmd args usr
#  LocalWords:  LocalWords
