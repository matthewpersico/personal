# -*- sh -*-
# shellcheck shell=bash

# git-pr

use mktemp
use on_exit

cmd_echo_id='git-pr'

declare opt_force=0

while (( $# )); do
    declare arg=$1
    shift
    case "$arg" in
        ##
        ## Our options
        ##
        --force )
            opt_force=1
            ;;
        * )
            cmd-echo --id "$cmd_echo_id" --ec "'$arg' not a valid option for $cmd_echo_id"
            false; exit
            ;;
    esac
done

# "current" is the on-disk clone of the working repo
declare current_branch
current_branch=$(git branch --current)

declare current_remote
current_remote=$(git config --get "branch.${current_branch}.remote")

# "from" is the where the clone was cloned from (canonical OR fork)
declare from_branch
from_branch=$(git config --get "branch.${current_branch}.${GIT_EXT_META_PREFIX}-from-branch")
## Fallback for a branch created before we started writing the
## ${GIT_EXT_META_PREFIX}-from-branch. Going forward, we always write
## ${GIT_EXT_META_PREFIX}-from-branch, even if it is the default.
if [[ -z $from_branch ]]; then
    cmd-echo --id "$cmd_echo_id" -- "branch.${current_branch}.${GIT_EXT_META_PREFIX}-from-branch not set. Set it in .git/config and re-run."
    false; exit
fi

declare from_remote=$current_remote
if git repo is a fork; then
    from_remote='upstream'
fi

if [[ $current_branch = "$from_branch" ]] && \
       [[ $current_remote = "$from_remote" ]]; then
    cmd-echo --id "$cmd_echo_id" -wc -- "Cannot generate a PR when the source and target org, repo and branch are the same."
    false; exit
fi

# Make sure we realize we are not clean, in case that's unexpected.
declare statusdata
statusdata=$(mktempfile)
rm-on-exit "$statusdata"
git status --porcelain -uno > "$statusdata"
declare linecount
linecount=$(wc -l < "$statusdata")
declare outofdate
outofdate=$(grep '##' "$statusdata" | grep '\[')
if ((linecount > 1)) || [[ -n "$outofdate" ]]; then
    cmd-echo --id "$cmd_echo_id" -wc -- "Current status not clean:"
    git status
fi

declare pr_url
declare do_pr=0
if ((opt_force)); then
    cmd-echo --id "$cmd_echo_id" -- "Not looking for existing PR."
    do_pr=1
elif ! pr_url=$(git repo pr-get --open --remote "$from_remote" ); then
    cmd-echo --id "$cmd_echo_id" -- "No open existing PR found, popping up create URL..."
    do_pr=1
fi

if((do_pr)); then
    declare current_url
    current_url=$(git config --get "remote.${current_remote}.url")

    declare current_svc
    declare current_orgrepo
    declare current_org
    declare current_repo
    if [[ $current_url =~ ^http(s)? ]]; then
        read -r current_svc current_org current_repo < <(git utils decode-http "$current_url")
        current_orgrepo="${current_org}/${current_repo}"
    else
        current_url=${current_url%.git}
        current_svc=${current_url%:*}; current_svc=${current_svc##*@}; current_svc=${current_svc%.*}
        current_orgrepo=${current_url#*:}
        current_org=${current_orgrepo%/*}
        current_repo=${current_orgrepo#*/}
    fi

    declare from_url
    from_url=$(git config --get "remote.${from_remote}.url")

    declare from_svc
    declare from_orgrepo
    declare from_org
    declare from_repo
    if [[ $from_url =~ ^http(s)? ]]; then
        read -r from_svc from_org from_repo < <(git utils decode-http "$from_url")
        from_orgrepo="$from_org/$from_repo"
    else
        from_url=${from_url%.git}
        from_svc=${from_url%:*}; from_svc=${from_svc##*@}; from_svc=${from_svc%.*}
        if [[ ! $from_svc =~ ^http ]]; then
            from_svc=$(git-kv --get browser-urls."${from_svc}")
        fi
        from_orgrepo=${from_url#*:}
        from_org=${from_orgrepo%/*}
    fi

    if [[ "$current_org" != "$from_org" ]]; then
        pr_url="$from_svc/$from_orgrepo/compare/$from_branch...$current_org:$current_branch"
    else
        pr_url="$from_svc/$from_orgrepo/compare/$from_branch...$current_branch"
    fi
else
    cmd-echo --id "$cmd_echo_id" -- "Existing PR found, popping it up..."
fi

git web--browse "$pr_url" &

true; exit

:<<'__PODUSAGE__'
=head1 NAME

git-pr - make a pull request

=head1 SYNOPSIS

 git-pr [--force]

=head1 DESCRIPTION

Using the browser, makes a pull request using the remote of the current repo or loads up an existing pull request against the remote of the local repo.

=head1 OPTIONS

=over 4

=item force

Do not check for an existing PR; just start a browser (via git web--browser) pointing to the URL to create a new pull request using the current repo as the source.

=back

__PODUSAGE__
