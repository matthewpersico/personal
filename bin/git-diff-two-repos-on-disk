#!/usr/bin/env bash

# git-diff-two-repos-on-disk

# shellcheck disable=SC1090
. "$(which script-echo)" -i "$(basename "$0")"

declare OPTSARGS
OPTSARGS=$(getoptp -o h --long nocolor,help,exclude:,side-by-side -n "${FUNCNAME[@]}" -- "$@")
declare status=$?
((status != 0)) && script-usage && exit $status

declare nocolor=0
declare exclude=''
declare side_by_side='-u'
eval set -- "$OPTSARGS"
while true
do
    case "$1" in
        -h|--help)
            script-usage
            exit 0 ;;
        --nocolor)
            nocolor=1 ; shift ;;
        --exclude)
            exclude=$2; shift; shift ;;
        --side-by-side)
            side_by_side='-y --suppress-common-lines'; shift;;
        --)
            shift; break ;; ## end of opts, remaining $*, if any, are args
        *)
            script-echo "Internal error!"; script-usage ; exit 1 ;;
    esac
done

declare -A repo
if [ -n "$2" ]
then
    repo[this]=$(realpath "$1")
    repo[other]=$(realpath "$2")
elif [ -n "$1" ]
then
    repo[this]=$(pwd)
    repo[other]=$(realpath "$1")
else
    script-echo "Need at least one directory"
    script-usage; exit 1 ;
fi

if [ "${repo[this]}" = "${repo[other]}" ]
then
    script-echo Other dir is this dir. Whoops! Bye.
    exit 1
fi

# shellcheck disable=SC1090
source "$BASH_INC_DIR/on_exit.binc"
declare -A list
list[this]=$(mktemp --suffix=.git-diff-two-repos-on-disk.this)
list[other]=$(mktemp  --suffix=.git-diff-two-repos-on-disk.other)
rm_on_exit "${list[this]}" "${list[that]}"

declare -A opposed
opposed[this]=other
opposed[other]=this

declare which
for which in this other
do
    perl -e 'chdir $ARGV[0];
             print qx(git ls-files)' "${repo[$which]}" > "${list[$which]}"
    if [ -n "$exclude" ]
    then
        grep -v "$exclude" "${list[$which]}" > "${list[$which]}.filt"
        mv "${list[$which]}.filt" "${list[$which]}"
    fi
done

declare -A seen
for which in this other
do
    declare line
    while IFS='' read -r line || [[ -n "$line" ]]
    do
        if [ -z "${seen[$line]}" ]
        then
            seen[$line]=$line

            declare output
            output=$(diff -q "${repo[$which]}/$line" "${repo[${opposed[$which]}]}/$line" 2>&1 | grep -v 'Common subdirectories')
            if [[ "$output" =~ 'No such file or directory' ]]
            then
                script-echo "Copying ${repo[$which]}/$line ${repo[${opposed[$which]}]}/$line"
                cp -vf "${repo[$which]}/$line" "${repo[${opposed[$which]}]}/$line"
            elif [ -n "$output" ]
            then
                script-echo -- '-----'
                declare diffcmd
                diffcmd=$(which colordiff 2>/dev/null)
                # shellcheck disable=SC2209 # We don't want to run diff, just
                # prepare the command
                ( [ -z "$diffcmd" ] || ((nocolor)) ) && diffcmd=diff
                script-echo -- "$diffcmd $side_by_side ${repo[$which]}/$line ${repo[${opposed[$which]}]}/$line"
                $diffcmd "$side_by_side" "${repo[$which]}/$line" "${repo[${opposed[$which]}]}/$line"
                echo
            fi
        fi
    done < "${list[$which]}"
done

exit 0

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/. If you want just plain text, get rid of pod tags and the
## 'POD' in __PODUSAGE__.

:<<'__USAGE__'

Usage: git-diff-two-repos-on-disk [--nocolor] [src] tgt
       git-diff-two-repos-on-disk [-h|-help]

       Compare two repos on disk. If only one repo is specified,
       'src' is taken as the current directory, which should be
       a repo root.

__USAGE__
