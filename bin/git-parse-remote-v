#!/usr/bin/env bash

# git-parse-remote-v

if [[ "$1" =~ ^-+h ]]
then
    bash-usage "$0"
    exit 0
fi

declare -A gitfuncs_remotes
declare remotes
remotes=$( git remote -v 2>/dev/null | sed -r -e 's/\(.*//' -e 's/ +$//' -e 's/\t/=/' | sort -ru)
if [ -n "$remotes" ]
then
    for i in $remotes
    do
        key=${i%=*}
        value=${i#*=}
        # shellcheck disable=SC2034 # Set in env for later use.
        gitfuncs_remotes["$key"]="$value"
    done
    declare -p gitfuncs_remotes
fi

if [ "${!gitfuncs_remotes[*]}" = '0' ]
then
    exit 1
else
    exit 0
fi

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/.

:<<'__PODUSAGE__'
=head1 NAME

git-parse-remote-v - parse 'git remote -v' for the remote url of the current repo

=head1 SYNOPSIS

 $ git-parse-remote-v
 declare -A gitfuncs_remotes='([upstream]="bbgithub:dpkg/libbuilddeb-perl" [origin]="bbgithub:mpersico5/libbuilddeb-perl" )'

 $ eval $(git-parse-remote-v)

=head1 DESCRIPTION

Puts a list of remotes keyed on short name into an associative array and prints a declare statement on STDOUT that can be eval'ed by the caller to create the associative array in the current process space.

=cut

__PODUSAGE__
