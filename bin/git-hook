#!/usr/bin/env bash

# git-hook - Functions to manipulate local hooks

declare GITFUNCS_GITHOOK_ROOT
declare GITFUNCS_GITHOOK_DIR

git-hook-find-hook-dir ()
{
    local dotgit
    dotgit=$(git find --git-dir)
    if [[ -n "$dotgit" ]] && [[ -d "$dotgit/hooks" ]]; then
        echo "$dotgit/hooks"
        true; return
    else
        echo
        false; return
    fi
}

git-hook-check ()
{
    local hook_dir
    hook_dir=$(git-hook-find-hook-dir)
    if [[ -z "$hook_dir" ]] || [[ ! -d "$hook_dir" ]]; then
        echo "Cannot find hook directory"
        false; return
    fi
    local i
    for i in "${hook_dir}"/*; do
        if [[ "$i" =~ \.sample$ ]] || [[ "$i" =~ $GITFUNCS_SOURCE_CTRL_LOG_NAME ]]; then
            continue
        fi
        if [[ ! -x "$i" ]]; then
            echo "INFO: git hook $i is not executable. Making it so."
            chmod a+x "$i"
        fi
    done
    true
}

git-hook-dry-run ()
{
    local hook_name=$1; shift
    local hook_dir
    hook_dir=$(git-hook-find-hook-dir)
    if [[ -z "$hook_dir" ]] || [[ ! -d "$hook_dir" ]]; then
        echo "Cannot find hook directory"
        false; return
    fi
    local hook_path=$hook_dir/$hook_name
    if [[ -x "$hook_path" ]]; then
        "$hook_path" "$@"
        return $?
    else
        echo "Executable $hook_path not found."
        false; return
    fi
}

git-hook-pushpull-guts ()
{
    GITFUNCS_GITHOOK_ROOT=$(git config --get init.templatedir)
    GITFUNCS_GITHOOK_REPO=$(basename "$GITFUNCS_GITHOOK_ROOT")
    GITFUNCS_GITHOOK_DIR=$GITFUNCS_GITHOOK_ROOT/hooks

    if [[ ! -d "$GITFUNCS_GITHOOK_ROOT" ]]; then
        echo "Error: Can't find '$GITFUNCS_GITHOOK_ROOT'"
        echo "       Please correct."
        false; return
    fi

    local quiet=0
    [[ $1 == '--quiet' ]] && quiet=1 && shift
    local docopy=1
    [[ $1 == '--nocopy' ]] && docopy=0 && shift
    local hooks
    hooks=$(ls "${GITFUNCS_GITHOOK_DIR}"/*)

    local repo
    for repo in "$@"; do
        ## Skip the template dir.
        [[ $repo == "$GITFUNCS_GITHOOK_REPO" ]] && continue

        (($# > 1)) && ((!quiet)) && echo && echo "== $repo"
        for h in $hooks; do
            local hooktgtdir
            # shellcheck disable=SC2001
            hooktgtdir="${TILDAE:-$HOME}/$(echo "$repo" | sed 's/(repo)//')/.git/hooks"
            if [[ -f "$hooktgtdir" ]]; then
                echo "$hooktgtdir is a file. whoops..."
                ## Fix up accidental directory overwrite
                \rm "$hooktgtdir"
                mkdir "$hooktgtdir"
            fi

            local hooktgtpath
            hooktgtpath="$hooktgtdir/$(basename "$h")"

            local -a diffargs
            local direction

            ## Determine which one is out of date.
            if [[ ! -e "$hooktgtpath" ]]; then
                echo "$hooktgtpath not found."
                direction='to-target'
            elif [[ "$h" -nt "$hooktgtpath" ]]; then
                echo "$hooktgtpath out of date."
                direction='to-target'
                diffargs=("$hooktgtpath" "$h")
            elif [[ "$h" -ot "$hooktgtpath" ]]; then
                echo "$hooktgtpath newer than template."
                diffargs=("$h" "$hooktgtpath")
            else
                # If not out of date, then it doesn't matter; pick one.
                echo "$hooktgtpath same age as template. Skipping."
                continue
            fi

            ## Show the diff
            if ((${#diffargs[@]})); then
                if diff "${diffargs[@]}" > /tmp/git-hook.diff.$$; then
                    echo "$hooktgtpath content matches template"
                    touch "$hooktgtpath" -r "$h"
                elif [[ -s /tmp/git-hook.diff.$$ ]] || ((!quiet)); then
                    echo "diff older to newer (${diffargs[*]})"
                    cat /tmp/git-hook.diff.$$
                fi
            fi

            ## Do the needful
            if ((docopy)); then
                if [[ $direction == 'to-target' ]]; then
                    cp -pv "$h" "$hooktgtpath"
                    chmod +x "$hooktgtpath"
                fi
            fi
        done
    done
}

# The only difference between pull and push is that pull is run against the
# current repo and push is run against all repos. The net effect is to copy the
# template hook to one or more working repos.

git-hook-pull ()
{
   git-hook-pushpull-guts "$(git worktree get-root)"
}

git-hook-push ()
{
    local -a repos
    readarray -t repos < <(git-go-get --nowt | grep -v ".git_template" )
    git-hook-pushpull-guts "${repos[@]}"
}

git-hook-compare ()
{
    local -a repos
    readarray -t repos < <(git-go-get --nowt | grep -v ".git_template" )
    git-hook-pushpull-guts "$@" --nocopy "${repos[@]}"
}

git-hook-comp ()
{
    git-hook-compare "$@"
}

main ()
{
    local action=$1

    if [[ "$action" =~ ^-+h ]]; then
        git-usage "$0"
        true; return
    fi

    action_func_name="git-hook-${action}"
    if declare -F "$action_func_name" >/dev/null; then
        shift ## the $action
        "$action_func_name" "$@"
    else
        git-usage "$0" "Error: unknown git hook action '$action'"
        false; return
    fi
    return $?
}

main "$@"
exit $?

:<<'__PODUSAGE__'
=head1 NAME

git-hook - local hook manipulation functions

=head1 SYNOPSIS

 git-hook check
 git-hook dry-run
 git-hook pull
 git-hook push
 git-hook comp[are] [--quiet]

=head1 DESCRIPTION

Hook manipulation functions.

=head1 EXTENSIONS

=over 4

=item check

Make sure the hooks are executable. Might not be after copying.

=item dry-run

Run the hook without doing the commit.

=item pull

Copy all the hooks from the template repo to the current repo.

=item push

Copy all the hooks from the template repo to the all repos.

=item compare

Compare all the hooks from the template repo against all repos. Use [--quiet]
to suppress output if there are no diffs.

=back

=cut

__PODUSAGE__
