#!/usr/bin/env bash

declare moreopts=1
declare o_verbose=0
declare o_exec=1
declare o_all=''
while [[ "$1" =~ ^- ]] && ((moreopts)); do
    declare original="$1"
    declare option
    option=$(dashstripper "$original")
    shift ## That way you avoid endless loops on invalid options.

    case $option in
        verbose | v )
            o_verbose=1
            ;;
        noexec | n )
            o_exec=0
            o_verbose=1
            ;;
        a ) o_all='a'
            ;;
        --)
            moreopts=0
            ;;
        * )
            echo "$original is an invalid option. See $0 --help";
            ## (return if a func, exit if a script) 1
            ;;
    esac
done

declare lookfor=$1
shift
if [[ "$1" = '' ]]; then
    cmd-echo "Error: Need something to do with $lookfor"
    exit
fi


declare found
declare -a lookfors
readarray -t lookfors < <(type -P"$o_all" "$lookfor")
case ${#lookfors[@]} in
    0 ) cmd-echo --ec -- "$lookfor not found"
        exit 1;;
    1 ) found=${lookfors[0]}
        ;;
    * ) select found in "${lookfors[@]}" "quit"; do
            [[ $found = 'quit' ]] && exit 0
            [[ -n $found ]] && break
        done
esac

declare -a run
declare i=-1
declare r
for r in "$@"; do
    if [[ "$r" = '%' ]]; then
        run[((i+=1))]="$found"
        found=''
    else
        run[((i+=1))]="$r"
    fi
done
((o_verbose)) && echo "${run[*]} $found"
if((o_exec)); then
    "${run[@]}" $found
else
    echo "no-exec mode"
fi
exit $?
