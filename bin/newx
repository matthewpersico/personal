#!/usr/bin/env bash

# newx

declare var
declare more_opts
more_opts=1
declare count
count=1
declare bg
declare lxtermgeo_w
lxtermgeo_w="$XTERMGEO_W"
declare colors
while ((more_opts)) && [[ "$1" =~ ^- ]]
do
    declare option
    option=$(dashstripper "$1")

    case $option in
        h* )
            script-usage
            exit 0 ;;
        w )
            ## wide
            ((lxtermgeo_w*=2)) ; shift ;;
        n )
            ## narrow
            ((lxtermgeo_w/=2)) ; shift ;;
        s )
            ## std
            ((lxtermgeo_w+-0)) ; shift ;;
        [0-9]* )
            ## number of xterms to spawn
            ((count=$1*-1)) ; shift ;;
        scheme )
            tmpfile=/tmp/newx.$$
            echo 'The list of avaliable color schemes is (scheme=foreground,background)'
            env | grep forebackmap | perl -pe 's/forebackmap_([a-z]+)/$1/' | sort > $tmpfile
    	    cat $tmpfile
            example_scheme=$(head -$((RANDOM % $(wc -l < $tmpfile) )) $tmpfile | tail -1 | sed 's/=.*//')
            echo "Re-run using -oneofthoseschemes, i.e.; -$example_scheme"
            \rm -f $tmpfile
	        exit 0 ;;
        * )
            ## Is it a color?
            bg=$(dashstripper "$1")
            var="forebackmap_$bg"
            [ -n "${!var}" ] && colors="$colors ${!var}" && shift || more_opts=0 ;;
    esac
done

## special case
if (($#==1))
then
    bg=$(dashstripper "$1")
    var="forebackmap_$bg"
    [ -n "${!var}" ] && colors="$colors ${!var}" && shift
fi

[ -z "${colors}" ] && var="forebackmap_$(xterm_background)" && colors=${!var}

## Yeah this is a little funky - you could end up creating "count"
## terminals of each color.
declare i=0
declare j=$i
while ((i<count))
do
    for color in $colors
    do
        # shellcheck disable=SC2086 # $XTERMFONTS needs expansion
        RXCmd "$HOSTNAME" -geometry "$XTERMGEO" $XTERMFONTS "$@" -fg "${color%%,*}" -bg "${color##*,}" \
              -geometry "${lxtermgeo_w}x${XTERMGEO_H}+$((XTERMGEO_X+(j*72)))+$((XTERMGEO_Y+(j*72)))"
        sleep .05 ## Just enough to space out the &-ed invocations so that they
        ## do not randomly appear, but rather appear in a nice
        ## cascade.
        ((j+=1))
    done
    ((i+=1))
done
## POD guard
exit 0

## You can add sections with =head1, but stick to =item for section breakdowns,
## not =head2/3/etc/.

:<<'__PODUSAGE__'
=head1 NAME

newx - create a new xterm

=head1 SYNOPSIS

 newx [-w|-n|-s] [-n_terms] [-scheme]

=head1 DESCRIPTION

Creates a new xterm.

=head1 OPTIONS

=over 4

=item -w|-n|-s

Create a wide, narrow or standard width xterm. Default is standard (132). Wide
and narrow are twice and half that, respectively.

=item -n_terms

Opens 'n_terms' number of terms, where 'n_terms' > 0. Default is 1.

=item -scheme

If literally '-scheme', lists the schemes available. To chose a scheme, specify
-oneofthoseschemes, i.e.; -black

=back

=cut

__PODUSAGE__
