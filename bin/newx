# -*- sh -*-
# shellcheck shell=bash

# newx
declare more_opts=1
declare opt_proc_handling=''
declare lxtermgeo_w="$XTERMGEO_W"
declare opt_nogeo=0
declare opt_wh
declare opt_verbose=0
declare opt_fg=0
declare target=$HOSTNAME

declare var
declare scheme
declare colors
declare -a geo

while ((more_opts)) && [[ "$1" =~ ^- ]]; do
    declare original="$1"
    declare option
    option=$(dashstripper "$1")
    shift

    case $option in
        h|help )
            bash-usage "$0"
            true; exit ;;
        host )
            target=$1; shift ;;
        procbg )
            opt_proc_handling='bg' ;;
        procda )
            opt_proc_handling='da' ;;
        w )
            ## wide
            ((lxtermgeo_w*=2)) ;;
        n )
            ## narrow
            ((lxtermgeo_w/=2)) ;;
        s )
            ## std
            ((lxtermgeo_w+-0)) ;;
        nogeo | ng )
            opt_nogeo=1
            ;;
        wh )
            opt_wh=$1; shift ;;
        sc* )
            echo '    scheme=font,background'
            echo '    ------ ---- ----------'
            select scheme in $(env | grep FOREBACKMAP | grep -v _RGB | perl -pe 's/FOREBACKMAP_(.*)=(.*)/\1=\2/;;$_=lc()' | sort ) '(q)uit'; do
                if [[ $REPLY = 'q' ]] || [[ $scheme = '(q)uit' ]]; then
                    false;exit
                fi
                if [[ -n $scheme ]]; then
                    scheme=${scheme%%=*}
                    break
                fi
            done
            ;;
        x )
            set -x;; # OK if you are grepping
        v ) opt_verbose=1 ;;
        'fg' ) opt_fg=1;;
        * )
            echo "Invalid option: $original"
            bash-usage "$0"
            false; exit ;;
    esac
done

if [[ $# == '1' ]]; then
    scheme=$1; shift;
fi

if [[ -n $scheme ]]; then
    var="FOREBACKMAP_${scheme^^}"
    if [[ -n "${!var}" ]]; then
        colors="${!var}"
    fi
fi

if [[ -z "$colors" ]]; then
    if [[ -z $NEWXINITED ]]; then
	    export NEWXINITED=1
	    var="FOREBACKMAP_${NEWXCOLOR}"
    else
	    var="FOREBACKMAP_$(xterm-cli background)"
    fi
    colors=("${!var}")
fi

## Yeah this is a little funky - you could end up creating "count"
## terminals of each color scheme.
declare i=0
declare j=$i
declare delta_x=36
declare delta_y=36
set_geo ()
{
    if (( opt_nogeo )); then
        geo=()
    else
        if [[ -n $opt_wh ]]; then
            geo=('-geometry' "${opt_wh}+$((XTERMGEO_X+(j*delta_x)))+$((XTERMGEO_Y+(j*delta_y)))")
        else
            geo=('-geometry' "${lxtermgeo_w}x${XTERMGEO_H}+$((XTERMGEO_X+(j*delta_x)))+$((XTERMGEO_Y+(j*delta_y)))")
        fi
    fi
}

set_geo
declare -a cmd=(RXCmd)
if ((opt_verbose)) ; then
    cmd+=('-v')
fi
if ((opt_fg)) ; then
    cmd+=('--fg')
fi

cmd+=("$target" "${geo[@]}" "$@" -fg "${colors%%,*}" -bg "${colors##*,}")
if [[ -n $XTERMFONT_NAME ]]; then
    cmd+=('-fa' "$XTERMFONT_NAME")
fi
if [[ -n $XTERMFONT_SIZE ]]; then
    cmd+=('-fs' "$XTERMFONT_SIZE")
fi
# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155
export XTERM=$(which xterm)
case $opt_proc_handling in
    da ) exec "${cmd[@]}" ;;
    bg ) "${cmd[@]}" &
         sleep .05 ## Just enough to space out the &-ed invocations so
         ## that they do not randomly appear, but rather
         ## appear in a nice cascade.
         ;;
    * ) "${cmd[@]}" ;;
esac

true; exit

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
=head1 NAME

newx - create a new xterm

=head1 SYNOPSIS

  newx [-h] [-w|-n|-s|--wh WxH] [-n_terms] [--host host ] [ [--sc[chemes] | scheme-name ]

=head1 DESCRIPTION

Creates a new xterm.

=head1 ARGUMENTS

=over 4

=item scheme-name

Create a new xterm in the color scheme specified. Schemes can be picked by
running this command with the --schemes option. Without a scheme argument, the
new xterm is the same as the xterm from which the command was executed or, if
that cannot be determined, the default scheme 'grey'.

=back

=head1 OPTIONS

=over 4

=item -h

This documentation.

=item -w|-n|-s

Create a wide, narrow or standard width xterm. Default is standard (132). Wide
and narrow are twice and half that, respectively.

=item --wh WxH

Specify the exact width and height.

=item [-n_terms]

Open up 'n' number of xterms.

=item --host

Open terminal on that host, not the current.

=item --sc[hemes]

List the available color schemes in order to pick one.

=item --fg

Start the xterm in the background. Does not apply under [-n_terms].

=back

=cut

__PODUSAGE__
