# -*- sh -*-
# shellcheck shell=bash

# newx

declare var
declare more_opts
more_opts=1
declare count
count=1
declare lxtermgeo_w
lxtermgeo_w="$XTERMGEO_W"
declare -a schemes
declare -a geo
declare proc_handling=''
declare wh
declare nogeo=0
while ((more_opts)) && [[ "$1" =~ ^- ]]; do
    declare original="$1"
    declare option
    option=$(dashstripper "$1")
    shift

    case $option in
        h* )
            bash-usage "$0"
            true; exit ;;
        procbg )
            proc_handling='bg' ;;
        procda )
            proc_handling='da' ;;
        w )
            ## wide
            ((lxtermgeo_w*=2)) ;;
        n )
            ## narrow
            ((lxtermgeo_w/=2)) ;;
        s )
            ## std
            ((lxtermgeo_w+-0)) ;;
        nogeo | ng )
            nogeo=1
            ;;
        wh )
            wh=$1; shift ;;
        [0-9]* )
            ## number of xterms to spawn
            ((count=$1*-1)) ;;
        scheme )
            tmpfile=/tmp/newx.$$
            echo 'The list of avaliable color schemes is (scheme=foreground,background)'
            env | grep FOREBACKMAP | perl -pe 's/FOREBACKMAP_(.*)=(.*)/\1=\2/;$_=lc()' | sort > $tmpfile
    	    cat $tmpfile
            example_scheme=$(head -$((RANDOM % $(wc -l < $tmpfile) )) $tmpfile | tail -1 | sed 's/=.*//')
            echo "Re-run using -oneofthoseschemes, i.e.; -$example_scheme"
            builtin rm -f $tmpfile
	        true; exit ;;
        * )
            echo "Invalid option: $original"
            bash-usage "$0"
            false; exit ;;
    esac
done

## Any args are color schemes.
for scheme in "$@"; do
    var="FOREBACKMAP_${scheme^^}"
    [[ -n "${!var}" ]] && schemes+=("${!var}") && shift
done

[[ -z "${schemes[0]}" ]] && var="FOREBACKMAP_$(xterm-cli background)" && schemes=("${!var}")

## Yeah this is a little funky - you could end up creating "count"
## terminals of each color scheme.
declare i=0
declare j=$i
declare delta_x=36
declare delta_y=36
set_geo ()
{
    if (( nogeo )); then
        geo=()
    else
        if [[ -n $wh ]]; then
            geo=('-geometry' "${wh}+$((XTERMGEO_X+(j*delta_x)))+$((XTERMGEO_Y+(j*delta_y)))")
        else
            geo=('-geometry' "${lxtermgeo_w}x${XTERMGEO_H}+$((XTERMGEO_X+(j*delta_x)))+$((XTERMGEO_Y+(j*delta_y)))")
        fi
    fi
}

while ((i<count)); do
    for scheme in "${schemes[@]}"; do
        set_geo
        declare -a cmd=(RXCmd "$HOSTNAME" "${geo[@]}" '-fa' "$XTERMFONT_NAME" '-fs' "$XTERMFONT_SIZE" "$@" -fg "${scheme%%,*}" -bg "${scheme##*,}")
        case $proc_handling in
            da ) exec "${cmd[@]}" ;;
            bg ) "${cmd[@]}" &
                 sleep .05 ## Just enough to space out the &-ed invocations so
                           ## that they do not randomly appear, but rather
                           ## appear in a nice cascade.
                 ;;
            * ) "${cmd[@]}" ;;
            esac
        ((j+=1))
    done
    ((i+=1))
done

true; exit

:<<'__PODUSAGE__'
=head1 NAME

newx - create a new xterm

=head1 SYNOPSIS

 newx [-w|-n|-s|--wh WxH] [-n_terms] [scheme [scheme ...]]

=head1 DESCRIPTION

Creates a new xterm.

=head1 ARGUMENTS

=over 4

=item scheme

Create a new xterm in the color scheme specified. Schemes can be determined by
running this command with the --schemes option. Without a scheme argument, the
new xterm is the same as the xterm from which the command was executed or, if
that cannot be determined, the default scheme 'grey'.

=back

=head1 OPTIONS

=over 4

=item -w|-n|-s

Create a wide, narrow or standard width xterm. Default is standard (132). Wide
and narrow are twice and half that, respectively.

=item --wh WxH

Specify the exact width and height.

=item -n_terms

Opens 'n_terms' number of terms, where 'n_terms' > 0. Default is 1.

=item -scheme

List the available color schemes.

=back

=cut

__PODUSAGE__
