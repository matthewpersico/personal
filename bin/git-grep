# -*- sh -*-
# shellcheck shell=bash

# git-grep

use on_exit

main ()
{
    local opt_edit=0
    local opt_find=0
    local -a pass_on_args
    local -a found

    for i in $(git config --get "$(basename "$0").opts"); do
        pass_on_args+=("$i")
    done

    while [[ -n "$1" ]]; do
        local original="$1"
        shift
        if [[ "$original" =~ ^- ]]; then
            local option
            option=$(dashstripper "$original")

            ## All of the --foo=bar processing is stripped away because we
            ## don't need it for the limited set of options we are processing.

            case $option in
                help )
                    # Can't use -h because that means "don't print the file and
                    # line number" in real git grep.
                    git-usage "$0"
                    exit 0
                    ;;
                edit )
                    opt_edit=1
                    continue
                    ;;
                find )
                    opt_find=1
                    local -a findargs
                    read -r -a findargs <<< "$1"; shift
                    mapfile -t found < <(git-find "${findargs[@]}")
                    continue
                    ;;
                ## No '*)' case needed; anything else just gets passed on
            esac
        fi

        ## If we are here, pass it on
        pass_on_args+=("$original")
    done

    ## If we did a find to limit the search scope, add those files here, if any
    ## were found.
    if ((opt_find==1)); then
        if ((${#found[@]} == 0 )); then
            cmd-echo --wc -- "No files found with criteria ${findargs[*]}"
            false; return
        fi
        pass_on_args+=("${found[@]}")
    fi

    ## Now, process.
    if ((opt_edit)); then
        local -a files
        readarray -t files < <($REALGIT grep -l "${pass_on_args[@]}")
        if [[ -n "${files[0]}" ]]; then
            $EDITOR "${files[@]}"
        else
            cmd-echo --wc -- "Pattern not found; no files to edit."
            false
        fi
    else
        $REALGIT grep "${pass_on_args[@]}"
    fi
    return $?
}

main "$@"

exit $?

:<<'__PODUSAGE__'
=head1 NAME

git-grep - git extention of git grep

=head1 SYNOPSIS

 git grep --edit

=head1 DESCRIPTION

Extensions to the 'git grep' command. Any action not described here will be passed onto the actual 'git grep' command.

=head1 EXTENSIONS

=over 4

=item --edit

Instead of displaying the results of the grep, edit all the files containing the pattern. Functionally equivilent to

 $EDITOR $(git grep -l pattern)

=item --find "args"

Run git-find with any args all concatinated into one string:

  git-grep --find "--type shell" -E ' \[ '

greps for a single bracket on shell files only. If no files are "found", no
grep is run.

=back

=cut

__PODUSAGE__
