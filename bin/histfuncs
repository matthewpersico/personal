# -*- sh -*-

# histfuncs

HISTFUNCS_FILE=${BASH_SOURCE[0]}

auditfuncs_init $HISTFUNCS_FILE

histfuncs_edit ()
{
    histfuncs_audit "$@"
    xo $HISTFUNCS_FILE
}
#nxport -f histfuncs_edit
alias histfuncs-edit=histfuncs_edit

histfuncs_reload ()
{
    histfuncs_audit "$@"
    . $HISTFUNCS_FILE
}
#nxport -f histfuncs_reload
alias histfuncs-reload=histfuncs_reload

histinit ()
{
    histfuncs_audit "$@"
    if [ -z "$histinited" ] ||  [ "$1" = '--force' ]
    then
        histinited=1
        HISTSIZE=9000
        HISTFILESIZE=$HISTSIZE
        HISTTIMEFORMAT="%m/%d - %H:%M:%S "
        HISTFILE=~/.bash_histories/$(hostname).$(date +%Y_%m_%d_%H_%M_%S).$$
        if [ ! -d ~/.bash_histories ]
        then
            echo "Initializing bash command history setup..."
            mkdir -p ~/.bash_histories
        fi
        cat <<EOF >>$HISTFILE
#$(date +%s)
## pwd => The current directory AFTER the command. 'AFTER' only matters if a cd was involved.
EOF
        if [ "$1" = '--force' ]
        then
           echo "History inited."
        fi
    fi
}
#nxport -f histinit
histinit

_bash_history_sync ()
{
  builtin history -a         #1
  HISTFILESIZE=$HISTSIZE     #2
  builtin history -c         #3
  builtin history -r         #4

  perl -e 'open(IH, "<$ARGV[0]");@lines=<IH>;close(IH);
chomp $lines[-2];$lines[-2]=~s/ ## pwd =>.*//;$lines[-2].= " ## pwd => $ARGV[1]\n";
open(OH, ">$ARGV[0]");print OH @lines;close(OH)' $HISTFILE "$(pwd)"
}
#nxport -f _bash_history_sync

PROMPT_COMMAND=_bash_history_sync

history ()
{
    histfuncs_audit "$@"
    _bash_history_sync
    builtin history "$@"
}
#nxport -f history

stash_history ()
{
    histfuncs_audit "$@"
    cp -v $HISTFILE $(dirname $HISTFILE)/$1
}
#nxport -f stash_history
alias stash_hist='stash_history '
alias stash-hist='stash_history '
alias hist-stash='stash_history '
alias hist_stash='stash_history '

show_history ()
{
    histfuncs_audit "$@"
    local hf=$(basename $HISTFILE)
    ls -lrt $(dirname $HISTFILE) | sed "s|$hf|$hf <= current|"
}
#nxport -f show_history

alias show_hist='show_history '
alias show-hist='show_history '
alias show_hist='show_history '
alias showhist='show_history '
alias hist-show='show_history '
alias hist_show='show_history '
alias histshow='show_history '
alias list_hist='show_history '
alias list-hist='show_history '
alias listhist='show_history '
alias hist-list='show_history '
alias hist_list='show_history '
alias histlist='show_history '

show_current_history ()
{
    histfuncs_audit "$@"
    ls -la $HISTFILE
}
#nxport -f show_current_history

alias show_current_hist='show_current_history '
alias show_current-hist='show_current_history '
alias show_current_hist='show_current_history '
alias show_currenthist='show_current_history '
alias current_hist='show_current_history '
alias current-hist='show_current_history '
alias current_hist='show_current_history '
alias currenthist='show_current_history '

grep_history ()
{
    histfuncs_audit "$@"
    local hostfilt=''
    local grepopt=''
    local days_ago=''
    local day=''
    local endofopts=''
    local exclude_pwd=1
    while [[ "$1" =~ ^- ]] && [ -z "$endofopts" ]
    do
        case "$1" in
            -h ) hostfilt=$2
                 shift;shift ;;
            -l ) grepopt='-l'
                 shift ;;
            -n ) grepopt='-n'
                 shift ;;
            -[0-9] )
                days_ago=$(echo "$1" | sed 's/^-//')
                shift ;;
            -d )
                day=$(echo $2 | tr '-' '_')
                shift; shift ;;
            -pwd )
                exclude_pwd=0
                shift ;;
            -- )
                endofopts=$1
                shift ;;
            * )
                echo invalid option "$1"
                return 1
        esac
    done

    if [ -n "$days_ago" ]
    then
        ## Thank you gnu date
        day=$(date -d "today - $days_ago day" +'%Y_%m_%d')
    fi
    if [ -n "$day" ]
    then
        hostfilt="$hostfilt.$day"
    fi

    local histfilt="$(dirname $HISTFILE)/$hostfilt"
    local histfs=$(ls -rt ${histfilt}* 2>/dev/null;return $?)
    if [ -z "$histfs" ]
    then
        echo "No history files found matching ${histfilt}*"
    elif (( exclude_pwd ))
    then
        grep $grepopt -- "$1" $histfilt \
            | grep -v '## pwd =' \
            | grep $grepopt -- "$1"
    else
        grep $grepopt -- "$1" $histfilt
    fi
}
#nxport -f grep_history
alias grep_hist='grep_history '
alias grep-hist='grep_history '
alias grephist='grep_history '
alias hist-grep='grep_history '
alias hist_grep='grep_history '
alias histgrep='grep_history '

cat_history ()
{
    histfuncs_audit "$@"
    local cathist=$1
    if [ -z "$1" ]
    then
        select cathist in $(ls -rt $(dirname $HISTFILE)/*)
        do
            if [ -n "$cathist" ]
            then
                break
            fi
        done
    fi
    if [ -n "$cathist" ]
    then
        cathist=$(dirname $HISTFILE)/$(basename $cathist)
        cat $cathist
    fi
}
#nxport -f cat_history

alias cat_hist='cat_history '
alias cat-hist='cat_history '
alias cathist='cat_history '
alias hist-cat='cat_history '
alias hist_cat='cat_history '
alias histcat='cat_history '

rename_history ()
{
    histfuncs_audit "$@"
    if [ -z "$1" ]
    then
        echo usage: rename_history suffix
    else
        cp $HISTFILE "${HISTFILE}.$1"
        HISTFILE="${HISTFILE}.$1"
    fi
    echo "Done"
}
#nxport -f rename_history

alias rename_hist='rename_history '
alias rename-hist='rename_history '
alias renamehist='rename_history '
alias hist-rename='rename_history '
alias hist_rename='rename_history '
alias histrename='rename_history '

new_history ()
{
    histfuncs_audit "$@"
    histdir=$(dirname $HISTFILE)
    if [ -z "$1" ]
    then
        echo "usage: new_history name"
        echo "       name should be just a filename."
        echo "       basename will be applied to it."
        echo "       It will be written in '$histdir'."
        return
    else
        HISTFILE="${histdir}/$(basename $1)"
    fi
    echo "Done"
}
#nxport -f new_history

alias new_hist='new_history '
alias new-hist='new_history '
alias newhist='new_history '
alias hist-new='new_history '
alias hist_new='new_history '
alias histnew='new_history '

## Legacy defs
alias hist='history '
alias histg='history | grep '
alias histgf='grep_history -h $(hostname) '
alias histgfa='grep_history '

hist_with_pwd ()
{
    perl -ane 'BEGIN{@out=()};
if( $_ =~ m/^#([0-9]+)( ## pwd => (.*))*/ ) {
push @out, {time=$1, pwd=$3};
} else {
$out[-1]->{cmd} = $_;
}
END {
$idxfmt="%" . scalar(split(//,scalar(@out))) . "d";

@out
printf($idxfmt . ": %s %s %s",
        $., $_);' $HISTFILE
}

load_history ()
{
    histfuncs_audit "$@"
    local loadhist=$1
    if [ -z "$1" ]
    then
        select loadhist in $(ls -rt $(dirname $HISTFILE)/*)
        do
            if [ -n "$loadhist" ]
            then
                break
            fi
        done
    fi
    if [ -n "$loadhist" ]
    then
        loadhist=$(dirname $HISTFILE)/$(basename $loadhist)
        cat $loadhist >> $HISTFILE
    fi
}
#nxport -f load_history

alias load_hist='load_history '
alias load-hist='load_history '
alias loadhist='load_history '
alias hist-load='load_history '
alias hist_load='load_history '
alias histload='load_history '
