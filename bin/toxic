#!/usr/bin/env bash

# toxic

[[ $1 =~ -h ]] && bash-usage "$0" && exit 0

if [[ -n $VIRTUAL_ENV ]]; then
    cmd-echo --ec -- "Cannot run toxic while in VIRTUAL_ENV ($VIRTUAL_ENV)" "Run 'deactivate' first."
    exit 1
fi


start_action ()
{
    echo "$1" > "$rc"
    [[ -n "$2" ]] && cmd-echo -- "$2..."

}

end_action ()
{
    echo "${1}ok" > "$rc"
    idx="${actions[$action]}"
    ((idx+=1))
    action="${actions_list[$idx]}"
    if [[ $stop_here == '1' ]] \
           || [[ $stop_here == "$action" ]]; then
        exit 1
    fi
}

ok_action ()
{
    idx="${actions[$action]}"
    action="${actions_list[$idx]}"
}

uflog ()
{
    perl -e '
$| = 1;
while (<>) {
    if ($ENV{uflogenv}
        and
        /^((?:flake8|black|mypy|py[0-9]+) installed: )/) {
        print join(sprintf(qq(,\n%*s), length($1), q( )), split(/,/));
    } else {
        print $_
    }
}
'
}

option_dne_action ()
{
    cmd-echo --ec -- "$1 does not apply with action $2"
}

##
## Main
##

## Globals
declare root_dir
root_dir=$(git root)

## The two digit version number for the correct tox subdir for python (i.e.; py38
declare py_short_ver
py_short_ver=$(python --version | sed -e 's/Python //' -e 's/..$//' -e 's/\.//')

## Actions setup
declare -a actions_list=(clean flake black mypy test doc end)
declare -a single_actions_list=(pytest pytestdb pytestdbe pytestdbu activate)
single_actions_list+=(pyrun pyrundb pyrundbe pyrundbu)
declare actions_re
ajoin actions_re -s '|' "${actions_list[@]}" restart
declare single_actions_re
ajoin single_actions_re -s '|' "${single_actions_list[@]}"
declare draacc='flake' # default_restart_action_after_code_change

## Actions comp values setup
declare -A actions
declare action_idx=0
declare action
for action in "${actions_list[@]}"; do
    key="$action"
    actions[$key]=$action_idx
    ((action_idx+=1))
    key="${action}ok"
    actions[$key]=$action_idx
done
action=""
## Default actions
declare last_action=$draacc
declare override_action

## Read the last thing we were doing or set up the default
declare rc
rc="$root_dir"/.toxic
[[ ! -e "$rc" ]] && start_action "$draacc"
last_action=$(cat "$rc")

##
## Options and argument processing
##

declare OPTSARGS
declare shortopts='v'
declare longopts='only,stop-at:,uflog,repeat,verbose'

declare stop_here
declare uflogenv
declare repeat=1
declare verbose=0

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") ## "${FUNCNAME[0]}" -- "$@") ## in functions
declare status=$?
((status != 0)) && exit $status ## return $status ## in functions

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while ftrue; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
        only )
            stop_here=1
            ;;
        stop-at )
            stop_here="$1"
            shift
            ;;
        uflog )
            export uflogenv='1'
            ;;
        "repeat" )
            repeat=$1
            shift
            ;;
        v | verbose)
            verbose=1
            ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -ec -- "$option is an invalid option. See $0 --help"
            exit 1 ## return 1 in functions
            ;;
    esac
done

declare action_type=''
if [[ -n $1 ]]; then
    action=$1; shift
    if [[ $action =~ $actions_re ]]; then
        action_type=step
    elif [[ $action =~ $single_actions_re ]]; then
        # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
        action_type=single
    elif [[ $action =~ ^- ]]; then
        ## No action, just options
        echo noop > /dev/null
    else
        cmd-echo --ec -- "'$action' is not one of ${actions_list[*]} ${single_actions_list[*]}"
        exit 1
    fi
fi

if [[ $action ]]; then
    (( repeat > 1 )) && [[ $action != 'pytest' ]] && cmd-echo --wc -- "'--repeat' is ignored for '$action'"
    if [[ $action =~ ^($single_actions_re)$ ]]; then
        [[ -n $stop_here ]] && cmd-echo --wc -- "'--only' and '--stop-at' are ignored for '$action'"
    elif [[ $action =~ ^($actions_re)$ ]]; then
        ## Override check
        override_action=$action
        [[ $override_action == 'restart' ]] && override_action=$draacc
        override_action_int=${actions[$override_action]}
        last_action_int=${actions[$last_action]}
        if ((override_action_int > last_action_int )) \
               && [[ $action != "$draacc" ]] \
               && [[ $action != "clean" ]] \
               && [[ $stop_here = '0' ]]; then
            cmd-echo -ec -- "$override_action cannot be executed; last phase executed was '$last_action'."
            exit 1
        else
            action=$override_action
        fi
    fi
else
    ## Code restart check
    action=$last_action
    declare -a newer
    mapfile -t newer < <(cd "$(git root)" && git find --abspath --newer "$rc")
    if [[ -n "${newer[0]}" ]] \
           && [[ $action != "$draacc" ]] \
           && [[ $action != 'clean' ]] \
           && [[ $action != 'end' ]]; then
        cmd-echo --wc -- "The following files have changed since the last toxic run:"
        ls -lat "${newer[@]}"
        declare use_draacc=1
        declare newer_entry
        for newer_entry in "${newer[@]}"; do
            if [[ $(basename "$newer_entry") =~ ^requirements ]]; then
                cmd-echo --wc -- "Resuming at 'clean' instead of default resume action of '$draacc' because '$newer_entry' has changed and is a requirements file."
                action=clean
                use_draacc=0
                break
            fi
        done
        if ((use_draacc)); then
            cmd-echo --wc -- "Resuming at  default resume action of '$draacc' instead of '$action' due to changed files."
            action="$draacc"
        fi
    fi
fi

while [[ -n $action ]]; do
    if [[ -z $override_action ]] || [[ $override_action != 'clean' ]]; then
        rm -rf .toxic.clean
    fi

    case $action in
        clean )
            if [[ -e .toxic.clean ]]; then
                if ! cmd-yesno "It appears that you just cleaned. Do you really want to clean again?"; then
                    cmd-echo 'Re-run without the "clean" action'
                    exit 1
                fi
            fi

            start_action "$action" "cleaning"

            cmd-echo --color BLUE -- 'git dorealclean'
            git dorealclean -e requirements-local.txt -e '*logit*' || exit $?
            touch .toxic.clean

            end_action "$action"
            ;;

        test )
            args=("$@")
            declare -a add_args
            start_action "$action" "testing"

            [[ -e ./wt ]] && add_args+=('--ignore=wt')
            ((verbose)) && add_args+=('--log-cli-level=INFO')
            (( ${#add_args[@]} )) && add_args=('--' "${add_args[@]}")

            cmd-echo --color BLUE -- "tox ${args[*]} ${add_args[*]}"
            tox "${args[@]}" "${add_args[@]}" | uflog
            pipe-check

            end_action "$action"
            ;;

        pytest* )
            args=("$@")

            cmd-echo --color BLUE -- "source .tox/py${py_short_ver}/bin/activate"
            # shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090
            source .tox/py"${py_short_ver}"/bin/activate

            # shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090
            if [[ $action == pytest ]]; then
                cmd-echo --color BLUE -- "pytest ${args[*]}"
                pytest "${args[@]}" || exit 1
            elif [[ $action == pytestdb ]]; then
                cmd-echo --color BLUE -- "pytest --pdb $*"
                pytest --pdb "$@"
            elif [[ $action == pytestdbe ]]; then
                cmd-echo --color BLUE -- "xo --nobg --geo-only --eval \"(pdb \\\"pytest --pdb $*\\\")\""
                xo --nobg --geo-only --eval "(pdb \"pytest --pdb $*\")"
            elif [[ $action == pytestdbu ]]; then
                cmd-echo --color BLUE -- "pytest --pdbcls pudb.debugger:Debugger --pdb -s $*"
                pytest --pdbcls pudb.debugger:Debugger --pdb -s "$@"
            else
                cmd-echo --ec -- "$action not a valid test action"
                exit 1
            fi
            action=single_action_end
            ;;

        pyrun* )
            args=("$@")

            cmd-echo --color BLUE -- "source .tox/py${py_short_ver}/bin/activate"
            # shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090
            source .tox/py"${py_short_ver}"/bin/activate

            cmd-echo --color BLUE -- "cd .tox/py${py_short_ver} (refroot)"
            (
                cd ".tox/py${py_short_ver}" || exit 1
                # shellcheck disable=SC1090 #https://github.com/koalaman/shellcheck/wiki/SC1090
                if [[ $action == pyrun ]]; then
                    cmd-echo --color BLUE -- "python ${args[*]}"
                    python "${args[@]}" || exit 1
                elif [[ $action == pyrundb ]]; then
                    cmd-echo --color BLUE -- "python --pdb $*"
                    python -m pdb "$@"
                elif [[ $action == pyrundbe ]]; then
                    cmd-echo --color BLUE -- "xo --nobg --geo-only --eval \"(pdb \\\"python --pdb $*\\\")\""
                    xo --nobg --geo-only --eval "(pdb \"python --pdb $*\")"
                elif [[ $action == pyrundbu ]]; then
                    cmd-echo --color BLUE -- "python --pdbcls pudb.debugger:Debugger --pdb -s $*"
                    python --pdbcls pudb.debugger:Debugger -m pdb -s "$@"
                else
                    cmd-echo --ec -- "$action not a valid run action"
                    exit 1
                fi
            ) || exit "$?"
            action=single_action_end
            ;;

        activate )
            args=("$@")

            cmd-echo --color ORANGE -- "You cannot activate with toxic because" \
                     "the environment will not survive the exit from the toxic subproc."\
                     "Run this command instead:"
            cmd-echo --color BLUE -- "source .tox/py${py_short_ver}/bin/activate"

            action=single_action_end
            ;;

        flake )
            start_action "$action" "flaking"

            cmd-echo --color BLUE -- 'tox -e flake8'
            tox -e flake8 | uflog
            pipe-check

            end_action "$action"
            ;;

        mypy )
            start_action "$action" "mypying"

            declare -a mypyarg
            mapfile -t mypyarg < <(for f in $(git find __init__.py | sort -u | xargs dirname); do
                                       [[ $f =~ ^test ]] && continue
                                       if [[ -z $last ]] || [[ ! $f =~ $last ]]; then
                                           last=$f; echo "$last";
                                       fi
                                   done)
            cmd-echo --color BLUE -- "tox -e mypy -- ${mypyarg[*]}"
            tox -e mypy -- "${mypyarg[@]}" | uflog
            pipe-check

            end_action "$action"
            ;;

        black )
            start_action "$action" "blacking"

            cmd-echo --color BLUE -- 'tox -e black'
            if ! tox -e black; then
                cmd-echo -wc -- 're-blacking to fix...'
                cmd-echo --color BLUE -- '.tox/black/bin/python -m black .'
                "$root_dir"/.tox/black/bin/python -m black .
            fi

            end_action "$action"
            ;;

        doc )
            start_action "$action" "doc'ing"

            cmd-echo --color BLUE -- 'tox -e docs'
            tox -e docs || exit 1

            end_action "$action"
            ;;

        end )
            start_action "$action" "end'ing..."

            #if ((!restart))
            #then
            #    declare -a newer
            #    mapfile -t newer < <(cd "$(git root)" && git find --abspath --newer "$rc")
            #    if [[ -n "${newer[0]}" ]]
            #    then
            #        cmd-echo -- "The following files have changed since the last complete, successful toxic run:"
            #        ls -lat "${newer[@]}"
            #        action='restart'
            #    fi
            #fi

            end_action "$action"
            ;;

        cleanok |\
        restartok  |\
        testok  |\
        flakeok |\
        mypyok  |\
        blackok |\
        docok   |\
        endok )
            ok_action "$action"
            ;;

        single_action_end )
            exit 0
            ;;

        * ) cmd-echo -ec -- "Invalid action '$action'" \
                     "Valid actions are: ${actions_list[*]}"
            exit 1
            ;;
    esac
done

declare activate_cmd
activate_cmd=$(ls .tox/py*/bin/activate)
cmd-echo -- \
         "All stages complete."\
         "For testing, source in '$activate_cmd'." \
         "To restart, use 'toxic restart'."
exit 0

:<<'__PODUSAGE__'
=head1 NAME

toxic - run python lint/format/test/doc suite

=head1 SYNOPSIS

 toxic [--only | --stop-at action] [--uflog] [--v|verbose] [clean|flake|black|mypy|test|doc]

 toxic [--repeat N] pytest [args...]

 toxic pytestdb[eu] [args...]

=head1 DESCRIPTION

Run a python tox setup.

=head1 ACTIONS

=over 4

=item py[test|run]

Runs 'pytest'/'python' with any arguments supplied. Sources in the activate
script (which doesn't stick on exit because of UNIX subprocessing) so that you
don't have to remember to do so. 'pytest' is used for running tests. 'pyrun' is
used for running scripts in the virtualenv, so it first does a cd into the root
of the virtualenv directory, so if, for example, you want to run 'bin/foo',
,you don't need to supply the full virtualenv path to foo, just 'bin/foo'.

=item py[test|run]db*

Runs 'pytest' or 'python' in one of three debug modes

=over 4

=item py[test|run]db

Runs 'py[test|thon] -pdb', which uses the line-oriented builtin Python debugger.

=item py[test|run]dbe

Runs 'py[test|thon] --pdb' in an emacs debugger session with any arguments
supplied.

=item py[test|run]dbu

Runs 'py[test|thon]' with the 'pudb' test-graphical debugger.

=back

=item clean|flake|black|mypy|test|doc

Start at the specifed phase. Continue to the next phase in the order stated in
the SYNOPSIS.  Will restart from 'flake' on any file changes, from 'clean'
whenever specified. Will try not to let you run 'clean' twice in a row; that is
usually an up-arrow repeat-last-command mistake.

=back

=head1 OPTIONS

=over 4

=item --only

Perform the current action and do not go onto the next one. Usually used with
action 'clean' so that you can clean before running with logging so that
'clean' does not blow away your logging.

=item --stop-at action

Do not execute actions in the list beyond this action.

=item --uflog

Monitor stdout and change the 'installed: ' statement from a comma-delimted,
barely readable blob into a nicely indented, one-module-per-line list.

=item --verbose

During testing, print logger output.

=item --repeat

Allows you to repeat 'pytest' any number of times. Useful for stress testing.

=back

=head1 DEBUGGING

In addition to using '--pytestdb*', adding this to your code:

  import pdb
  ...
  pdb.set_trace()

will stop the execution at the line following the 'pdb.set_trace()' statement
and drop you into whichever debugger you are using.

=head1 SAMPLE TOX

  [tox]
  envlist = py37
  indexserver =
      default = https://artprod.dev.foo.com/artifactory/api/pypi/foo-pypi/simple

  [flake8]
  exclude = foo/dpkg/builddeb/__init__.py

  [testenv]
  skipsdist = True
  usedevelop = True
  setenv =
      UNITEST_XML = {toxinidir}/.unitests.{envname}.xml
  install_command = python -m pip install --no-use-pep517 {opts} {packages}
  whitelist_externals = rm
  commands =
      rm -fv {toxinidir}/.coverage.{envname}.xml
      rm -fv {toxinidir}/.unitests.{envname}.xml
      python -m pytest \
          --cov-report xml:{toxinidir}/.coverage.{envname}.xml  \
          --cov-report term --cov=foo.dpkg.builddeb \
          --junitxml={toxinidir}/.unitests.{envname}.xml \
          --cov-config={toxinidir}/tox.ini \
          {posargs}
  deps =
      -e file:///full/path/to/another/repo#egg=the.import.name
      -rrequirements-dev.txt

  ;; Using -e and tox:

  ;; - You cannot put a -e spec in a -r file.

  ;; - A -e spec must appear on the command line before any -r file that
       contains the same module spec.

  ;; - There cannot be any version spec for that module in the -r file or else
       the pypi version will be grabbed instead of the -e spec.

  ;; - There must be an egg name and it must match the import spec of the
       module you are pulling from the repo.

  ;; - The files are not copied into your environment, but linked to their
       original locations.

  ;; - The -e spec should be used for 'flake8', 'mypy', and 'testenv'. It is
       not needed for 'doc' or 'black'.

  [testenv:black]
  whitelist_externals = black
  skipsdist = True
  usedevelop = True
  basepython = python3.7
  commands =
      black --check .
  deps =
      black

  [testenv:flake8]
  whitelist_externals = flake8
  skipsdist = true
  basepython = python3.7
  commands = flake8 foo/ tests/ --output-file=.flake8.out --tee
  changedir = {toxinidir}
  deps =
      -e file:///full/path/to/another/repo#egg=the.import.name
      -rrequirements-dev.txt

  [testenv:docs]
  basepython = python3.7
  commands = python setup.py build_sphinx
  deps =
      -rrequirements-dev.txt

  [testenv:mypy]
  whitelist_externals = mypy
  basepython = python3.7
  commands =
      python -m pip install --index-url https://artprod.dev.foo.com/artifactory/api/pypi/foo-pypi/simple --trusted-host artprod.dev.foo.com --force-reinstall --upgrade --no-dependencies foo.dpkg.client
      python -m pip install --index-url https://artprod.dev.foo.com/artifactory/api/pypi/foo-pypi/simple --trusted-host artprod.dev.foo.com --force-reinstall --upgrade --no-dependencies foo.dpkg.core
      mypy --strict {posargs}
  deps =
      -e file:///full/path/to/another/repo#egg=the.import.name
      -rrequirements-dev.txt

=cut

__PODUSAGE__
