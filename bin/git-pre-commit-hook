# -*- sh -*-
# shellcheck shell=bash

## git-pre-commit-hook

##
## Various checks, pre-commit, bail early.
##

## Don't do my checks if I say not to.
if [[ "$GIT_COMMIT_NO_VERIFY" = '1' ]]; then
    echo "****** GIT_COMMIT_NO_VERIFY='1'. Skipping hook. ******" >&2
    true; exit
fi

## Don't do my checks if Perl testing involves git commands.
[ "$HARNESS_ACTIVE" = '1' ] && { true; exit; }

##
## Globals and inits
##

## We use a temp file to process output instead of $() capturing so we don't
## lose the newlines...
declare G_tfile
G_tfile=$(mktemp)

## ...and we set up a trap for cleanup.
trap finish EXIT SIGINT

true; declare G_exitval=$? ## Assume correctness.

declare G_gitroot
G_gitroot=$(git rev-parse --show-toplevel)

declare G_skip_by_request=1
declare G_skip_by_missing=2

declare -a G_skip_messages=(
    "not skipping"
    "by request"
    "because of missing program"
)

##
## Functions
##
finish ()
{
    if [[ -e "$G_tfile" ]]; then
        rm -rf "$G_tfile"
    fi
}

get_status ()
{
    wc -l "$1" | sed 's/ .*//'
}

check ()
{
    local G_tfile=$1; shift
    local errmsg=$1; shift
    local status=$1; shift
    local postmsg=$1; shift

    if [[ -z "$status" ]]; then
        status=$(get_status "$G_tfile")
    fi
    if [[ "$status" != 0 ]]; then
        ## This is the error message.
        echo
        pre_commit_error_echo "$errmsg"
        cat "$G_tfile"
        false; G_exitval=$?
        if [[ -n $postmsg ]]; then
            echo
            echo "$postmsg"
        fi
        false; return
    else
        true; return
    fi
}

notify ()
{
    if [[ $# = '2' ]]; then
        check "$@" '' info
    else
        check "$@" info
    fi
}

pre_commit_echo ()
{
    declare prefix
    prefix=">>> [pre-commit hook] $1: "
    shift

    declare continue=0
    if [[ $1 == '-c' ]]; then
        shift;
        continue=1
    fi

    if [[ $continue == 1 ]]; then
        echo -n "$(echo "$prefix" | tr '[:graph:]' ' ')"
    else
        echo -n "$prefix"
    fi
    echo "$*"
}

pre_commit_error_echo ()
{
    pre_commit_echo ERROR "$@"
}

pre_commit_warning_echo ()
{
    pre_commit_echo WARNING "$@"
}

pre_commit_info_echo ()
{
    pre_commit_echo INFO "$@"
}

pre_commit_ok_echo ()
{
    pre_commit_echo INFO "$@"
}

do_gcs_check ()
{
    ## As a last resort, we allow the text string <\GCS>, (without the
    ## backslash) in the given language to be used to stop the commit of code
    ## that we know we need to clean up before committing. There are a number
    ## of ways to strictly enforce or bypass this (utilities that process GCS
    ## markers are an example.)
    declare gcsfile="$G_gitroot/.gcs"

    declare -a gcs_messages
    gcs_messages[0]="One or more files has an explicit commit stop. Please address."
    gcs_messages[1]="One or more files has an implicit commit stop in $gcsfile. Please address."
    gcs_messages[2]="One or more files has an implicit commit stop *ignore* in $gcsfile. Continuing."

    declare -a gcs_files
    declare file
    for file in "${files[@]}"; do
        ## First of all, exclude gcs files; let's just decide you can't put a
        ## GCS marker in them and move on.
        [[ $file =~ \.gcs$ ]] && continue

        declare gcs_marker=''
        ## First, is there a GCS marker that is not countermanded with
        ## <GCSLITERAL> on the same line.
        gcs_marker=$(grep -H -n -E '<GCS>' "$file" | grep -v '<GCSLITERAL>')

        ## Next check the gcs file for matches. The file must have an action
        ## attribute, either ':stop' or ':ignore'.
        declare gcsfile_match=''
        [[ -r $gcsfile ]] && gcsfile_match=$(grep "${file}:" "$gcsfile")
        declare gcsfile_ignore=''
        if [[ -n $gcsfile_match ]]; then
            gcsfile_stop=$(grep ":stop" <<< "$gcsfile_match")
            gcsfile_ignore=$(grep ":ignore" <<< "$gcsfile_match")
        fi

        ## Analysis.
        if [[ -n $gcsfile_ignore ]]; then
            gcs_files[2]="$file ${gcs_files[2]}"
        elif [[ -n $gcsfile_stop ]]; then
            gcs_files[1]="$file ${gcs_files[1]}"
        elif [[ -n $gcs_marker ]]; then
            gcs_files[0]="$file ${gcs_files[0]}"
        fi
    done

    ## Summary.
    if [[ -n ${gcs_files[0]} ]]; then
        echo
        pre_commit_error_echo "${gcs_messages[0]}"
        pre_commit_error_echo -c "${gcs_files[0]}"
        false; G_exitval=$?
    fi
    if [[ -n ${gcs_files[1]} ]]; then
        echo
        pre_commit_error_echo "${gcs_messages[1]}"
        pre_commit_error_echo -c "${gcs_files[1]}"
        false; G_exitval=$?
    fi
    if [[ -n ${gcs_files[2]} ]]; then
        echo
        pre_commit_info_echo "${gcs_messages[2]}"
        pre_commit_info_echo -c "${gcs_files[2]}"
    fi

    true; return
}

main ()
{
    ##
    ## args and opts
    ##
    declare -A skips
    declare opt_verbose=1
    declare opt_nocommit=0
    declare helpnotallowed=0
    declare moreopts=1

    [[ -n $1 ]] && pre_commit_ok_echo "Args to hook: $*"

    if [[ -n "$GIT_PRE_COMMIT_HOOK_ARGS" ]] \
           || [[ -n "$GPCHA" ]]; then
        eval set -- "$GIT_PRE_COMMIT_HOOK_ARGS" "$GPCHA" "$*"
        helpnotallowed=1
    fi

    while [[ "$1" =~ ^- ]] && ((moreopts)); do
        ## Strip all leading dashes here so that -foo and --foo can both
        ## be processed as 'foo'.
        declare original="$1"
        declare option
        option=$(dashstripper "$original")
        shift ## That way you avoid endless loops on invalid options.

        case $option in
            show-skips | skip-show)
                cat <<EOF
The following are sections and subsections of this git-pre-commit-hook
that you can skip with:

* a --skip option to a direct invocation of this hook

* a -[-skip option set in either of the
  GIT_PRE_COMMIT_HOOK_ARGS or GPCHA envvars

* a--skip-hook option to 'git-commit'

Skips: $GIT_HOOK_SKIP_TAGS
EOF
                true; exit 0
                ;;
            s|skip)
                if [[ "$GIT_HOOK_SKIP_TAGS" == *" $1 "* ]]; then
                    skips[$1]=$G_skip_by_request;
                else
                    pre_commit_error_echo "'$1' is not a valid skip hook tag. Valid skip hook tags are $GIT_HOOK_SKIP_TAGS"
                fi
                shift ;;
            q|quiet)
                opt_verbose=0 ;;
            v|verbose)
                opt_verbose=1 ;;
            nocommit)
                opt_nocommit=1 ;;
            x)
                set -x
                trap "set +x" EXIT
                ;;
            h|help)
                if((helpnotallowed)); then
                    pre_commit_ok_echo "--help not allowed in GIT_PRE_COMMIT_HOOK_ARGS. Ignoring."
                else
                    pod2text "$0" | ${PAGER:cat}
                    true; exit
                fi
                ;;
            --) shift; break ;; ## end of opts, remaining $*, if any, are args.
            *) echo "Internal error!"; pod2text "$0" | ${PAGER:cat}; false; exit ;;
        esac
    done

    ##
    ## Main
    ##

    ##
    ## Get the list of objects being committed.
    ##
    declare -a gitobjs
    if (( $# )); then
        pre_commit_ok_echo "Using command line arguments as git files to process,"\
                           "assuming all are status 'M' unless you specify"\
                           "otherwise (file:[DA])"
        readarray -t gitobjs < <(perl -e '
for (@ARGV){
    @F=(split(/:/, $_), q(M));
    print "$F[0]=>$F[1]\n";
}' "$@")
    else
        readarray -t gitobjs < <(git diff-index --cached HEAD | perl -ane 'print "$F[-1]=>$F[-2]\n"')
    fi

    ##
    ## Split the list into files, nonfiles and deletes.
    ##
    declare -a files
    declare -a nonfiles
    declare -a delgitobjs

    ((opt_verbose)) && pre_commit_ok_echo Current status:
    for obj in "${gitobjs[@]}"; do
        declare file=${obj%%=>*}
        declare gitstat=${obj##*=>}
        if [[ $gitstat == 'D' ]]; then
            delgitobjs+=("$file")
            continue
        elif [[ -f $file ]]; then
            files+=("$file")
        else
            nonfiles+=("$file")
        fi
        ((opt_verbose)) && pre_commit_info_echo -c "$obj"
    done

    if ((opt_verbose)); then
        declare fcount
        declare text

        fcount=${#files[@]}
        text='file'
        (( fcount != 1 )) && text="${text}s"
        text="${text} to validate"
        pre_commit_ok_echo "$fcount" "$text"

        fcount=${#nonfiles[@]}
        if (( fcount > 0 )); then
            text='non-file'
            (( fcount != 1 )) && text="${text}s"
            text="${text} to validate"
            pre_commit_ok_echo "$fcount" "$text"
        fi

        fcount=${#delgitobjs[@]}
        if (( fcount > 0 )); then
            declare plural='it is'
            text='git object'
            (( fcount != 1 )) && text="${text}s" && plural='they are'
            text="${text} will skip validation because ${plural} being deleted"
            pre_commit_ok_echo "$fcount" "$text"
        fi
    fi

    ##
    ## Do filtering.
    ##
    declare -A fileskips
    declare ignore_file="$G_gitroot/.pre-commit-ignore"
    if [[ -r "$ignore_file" ]]; then
        while read -r fs; do
            fileskips[$fs]=1
        done < <(cat "$ignore_file")

        declare -a filtered_files
        declare file
        for file in "${files[@]}"; do
            if [[ -z "${fileskips[$file]}" ]]; then
                filtered_files+=("$file")
            fi
        done
        files=("${filtered_files[@]}")
    fi

    ##
    ## Isolate specific groups of files.
    ##
    declare -a perlfiles
    declare -a shellfiles
    declare -a pythonfiles
    declare file

    ## Make sure the check programs are installed if we are not skipping that
    ## particular check.
    if [[ -z ${skips[perl]} ]] \
           && perl -V 1>/dev/null 2>&1; then
        :
    else
        skips[perl]=$G_skip_by_missing
    fi

    if [[ -z ${skips[perl]} ]] \
           && [[ -z ${skips[perltidy]} ]] \
           && perltidy -v 1>/dev/null 2>&1; then
        :
    else
        skips[perltidy]=$G_skip_by_missing
    fi

    if [[ -z ${skips[shell]} ]] \
           && [[ -z ${skips[shellcheck]} ]] \
           && shellcheck -V 1>/dev/null 2>&1; then
        :
    else
        skips[shellcheck]=$G_skip_by_missing
    fi

    if [[ -z ${skips[python]} ]]; then
        if ! python -V 1>/dev/null 2>&1; then
            skips[python]=$G_skip_by_missing
        else
            black --version 1>/dev/null 2>&1 || skips[black]=$G_skip_by_missing
            isort --version 1>/dev/null 2>&1 || skips[isort]=$G_skip_by_missing
            pylint --version 1>/dev/null 2>&1 || skips[pylint]=$G_skip_by_missing
        fi
    fi

    ## Now group them.
    for file in "${files[@]}"; do
        if head -1 "$file" | grep perl | grep -E '^#!' > /dev/null \
                ||
                echo "$file" | grep -iE '\.(p[ml]|t|sgi)$' > /dev/null; then
            perlfiles+=("$file")
        elif head -1 "$file" | grep -E -- '(-\*- |#!.*/|#!.*env )(sh|ksh|bash)' 1>/dev/null 2>&1; then
            shellfiles+=("$file")
        elif head -1 "$file" | grep python | grep -E '^#!' > /dev/null \
                ||
                echo "$file" | grep -iE '\.py$' > /dev/null; then
            pythonfiles+=("$file")
        fi
    done

    ##
    ## The tests...
    ##

    if ((${#files[@]})); then
        touch "$G_tfile"

        for i in "${files[@]}"; do
            ##
            ## check: files being edited, not saved
            ##
            emacsfile="$(dirname "$(realpath "$i")")/.#$(basename "$i")"
            if [[ -h "$emacsfile" ]]; then
                echo "$i" >> "$G_tfile"
            fi
            ##
            ## check: chmod - warning only
            ##
            if ( git diff "$i" | grep -q -E '^old mode' ); then
                pre_commit_warning_echo "$i has changed permissions"
                git diff "$i" | grep --color=never -E '^(old|new) mode'
            fi
        done
        check "$G_tfile" \
              "Write your emacs buffers for these files:"

        ##
        ## check: constructs for bypassed or dead code
        ##

        ## These two are Perl constructs, but we could use them temporarily in any
        ## file type, if commented out in the non-Perl language.
        grep -H -n -E -i '=for (later|comparison|commentout|review)' "${files[@]}" 1>"$G_tfile" 2>&1
        check "$G_tfile" \
              "One or more files contain suspicious Perl commenting. Delete old code, do not just comment it out. Don't add inactive code until you are ready to use it."

        grep -H -n -E -i '=for (remove|restore)_before_commit' "${files[@]}" 1>"$G_tfile" 2>&1
        check "$G_tfile" \
              "One or more files contain suspicious Perl commenting. Put back original code; remove your short term test changes."

        if ((${#perlfiles[@]})); then
            if [[ -n ${skips[perl]} ]]; then
                ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl checks, ${G_skip_messages[${skips[perl]}]}."
            else
                ##
                ## check: Perl debug statements
                ##
                # shellcheck disable=2016
                grep -H -n -E '\$DB::s(ingle|tep)' "${perlfiles[@]}" 1>"$G_tfile" 2>&1
                check "$G_tfile" \
                      "One or more files has Perl-debugger-related statements. Please remove instrumentation."

                ##
                ## check: testing utilities left in the code
                ## BB SPECIFIC
                ##
                grep -H -n -E 'TestingUtils' "${perlfiles[@]}" | grep -v TestingUtils.pm  1>"$G_tfile" 2>&1
                check "$G_tfile" \
                      "One or more files is using the TestingUtils module. Please remove it."

                ##
                ## check: compile tests
                ##
                if [[ -n "${skips[perlcompile]}" ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl compile check, ${G_skip_messages[${skips[perlcompile]}]}."
                else
                    declare remediation
                    declare checkcmd
                    declare runcheck=0
                    if [[ -e "$G_gitroot/t/bin/apply-compile-check-everywhere" ]]; then
                        cartonexec=''
                        if [[ -e "$G_gitroot/runtests.local" ]]; then
                            pre_commit_ok_echo "Sourcing $G_gitroot/runtests.local for perl compile tests."
                            # shellcheck disable=SC1090
                            . "/$G_gitroot/runtests.local"
                            if [[ "$RUNTESTS_USE_CARTON" = '1' ]]; then
                                cartonexec='carton exec'
                            fi
                        fi
                        checkcmd="$cartonexec $G_gitroot/t/bin/apply-compile-check-everywhere"
                        $checkcmd "${perlfiles[@]}" 1>"$G_tfile" 2>&1
                        runcheck=1
                        remediation="To review, run: (cd $(pwd); $checkcmd ${perlfiles[*]})"
                    elif [[ -e "${TILDAE:-$HOME}/personal/bin/perlcheck-bulk" ]]; then
                        declare -a libs
                        readarray                -t libs < <(find "$G_gitroot" -type d -name lib  -printf '-I\n%p\n')
                        readarray -O ${#libs[@]} -t libs < <(find "$G_gitroot" -type d -name perl -printf '-I\n%p\n')
                        checkcmd="${TILDAE:-$HOME}/personal/bin/perlcheck-bulk --no-progress ${libs[*]}"
                        $checkcmd "${perlfiles[@]}" 1>"$G_tfile" 2>&1
                        runcheck=1
                        remediation="To review, run: (cd $(pwd); $checkcmd ${perlfiles[*]})"
                    else
                        ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl compile check, no perl compile check helpers found."
                    fi
                    ((runcheck==1)) && check "$G_tfile" \
                                             "One or more files has syntax errors. Please review. $remediation"
                fi

                ##
                ## check: tidy tests
                ##
                if [[ -n "${skips[perltidy]}" ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl perltidy check, ${G_skip_messages[${skips[perltidy]}]}."
                else
                    declare remediation
                    declare tidycmd
                    declare runcheck=0
                    declare tidyrc=0
                    for tidycmd in \
                        "$G_gitroot/t/bin/apply-perltidy-everywhere" \
                            "${TILDAE:-$HOME}/personal/bin/perltidy-bulk"; do
                        if [[ -e "$tidycmd" ]]; then
                            "$tidycmd" "${perlfiles[@]}" 1>"$G_tfile" 2>&1
                            tidyrc=$?
                            runcheck=1
                            remediation="To correct, run: (cd $(pwd); $tidycmd --update ${perlfiles[*]})"
                            break
                        fi
                    done
                    if ((runcheck==1)); then
                        check "$G_tfile" \
                              "One or more files has formatting errors. Please review." \
                              "$tidyrc" \
                              "$remediation"
                    else
                        ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl perltidy, no perl perltidy helpers found."
                    fi
                fi
            fi
        fi

        if ((${#shellfiles[@]})); then
            if [[ -n ${skips[shell]} ]]; then
                ((opt_verbose)) && pre_commit_ok_echo "Skipping shell checks, ${G_skip_messages[${skips[shell]}]}."
            else
                if [[ -n ${skips[shebang]} ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping shebang check, ${G_skip_messages[${skips[shebang]}]}."
                else
                    declare shellfile
                    declare shebang_text
                    declare shellcheck_shell_text
                    rm -f "$G_tfile"
                    touch "$G_tfile"
                    for shellfile in "${shellfiles[@]}"; do
                        shebang_text=$(head -1 "$shellfile" | grep '^#!')
                        if [[ -n $shebang_text ]]; then
                            if grep '<<<git-commit' "$shellfile" | grep -q ALLOW_SHEBANG; then
                                : # shebang was locally allowed.
                            else
                                echo "$shellfile has a shebang line ($shebang_text)" >> "$G_tfile"
                            fi
                        fi
                        shellcheck_shell_text=$(head -2 "$shellfile" | tail  -1 | grep '^# shellcheck shell=')
                        if [[ -z $shellcheck_shell_text ]]; then
                            if grep '<<<git-commit' "$shellfile" | grep -q ALLOW_MISSING_SHELLCHECK_SHELL; then
                                : # missing shellcheck shell directive was locally allowed.
                            else
                                echo "$shellfile is missing a 'shellcheck shell=' definition line" >> "$G_tfile"
                            fi
                        fi
                    done
                    check "$G_tfile" \
                          "One or more files has failed shebang checks. Please review."
                fi
                if [[ -n ${skips[shellcheck]} ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping shellcheck, ${G_skip_messages[${skips[shellcheck]}]}."
                else
                    shellcheck "${shellfiles[@]}" 1>"$G_tfile" 2>&1
                    check "$G_tfile" \
                          "One or more files has failed shellcheck checks. Please review."
                fi
            fi
        fi

        if ((${#pythonfiles[@]})); then
            if [[ -n ${skips[python]} ]]; then
                ((opt_verbose)) && pre_commit_ok_echo "Skipping python checks, ${G_skip_messages[${skips[python]}]}."
            else
                if [[ -n ${skips[black]} ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping black checks, ${G_skip_messages[${skips[black]}]}."
                else
                    black --check "${pythonfiles[@]}" 1>"$G_tfile" 2>&1
                    declare pyrc=$?
                    check "$G_tfile" \
                          "One of more files has failed python black checks. Please review. You can run 'black' on the failed files to fix them." \
                          "$pyrc"
                fi

                if [[ -n ${skips[isort]} ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping isort checks, ${G_skip_messages[${skips[isort]}]}."
                else
                    isort --check "${pythonfiles[@]}" 1>"$G_tfile" 2>&1
                    pyrc=$?
                    check "$G_tfile" \
                          "One of more files has failed python isort checks. Please review. You can run 'isort --overwrite-in-place' on the failed files to fix them." \
                          "$pyrc"
                fi

                if [[ -n ${skips[pylint]} ]]; then
                    ((opt_verbose)) && pre_commit_ok_echo "Skipping pylint checks, ${G_skip_messages[${skips[pylint]}]}."
                else
                    isort "${pythonfiles[@]}" 1>"$G_tfile" 2>&1
                    pyrc=$?
                    check "$G_tfile" \
                          "One of more files has failed python pylint checks. Please review." \
                          "$pyrc"
                fi

            fi
        fi

        ##
        ## check: git conflict markers
        ##
        grep -H -n -E '^<<<<<<<|>>>>>>>$' "${files[@]}" 1>"$G_tfile" 2>&1
        check "$G_tfile" \
              "One or more files contains a git conflict marker. Please address."

        ##
        ## check: git commit stop check
        ##
        do_gcs_check
    fi

    ##
    ## Done.
    ##
    true; if ((G_exitval==$?)); then
        if((opt_nocommit)); then
            pre_commit_ok_echo 'No errors, but --nocommit specified. Commit will be aborted.'
            false; G_exitval=$?
        else
            pre_commit_ok_echo 'Commit will proceed.'
        fi
    else
        pre_commit_error_echo 'Commit will abort.'
    fi
    exit $G_exitval
}

main "$@"
exit $G_exitval

:<<'__PODUSAGE__'
=head1 NAME

git-pre-commit-hook - a script for the pre-commit hook in git

=head1 SYNOPSIS

   git-pre-commit-hook [--nocommit] [--quiet] [--skip ... [ --skip ... ] ]
   git-pre-commit-hook --help
   git-pre-commit-hook --show-skips

=head1 DESCRIPTION

This script is not executed directly, but rather by git during a commit. It can be installed in either of three ways:

1) Place a copy of it in the '.git/hooks' directory of your local repo, renamed to 'pre-commit'.

2) Create a file .git/hooks/pre-commit in your local repo with the command

  git-pre-commit-hook "$@"

in it, assuming that this script is in PATH.

3) Create that same file in your 'git-template' directory, so that it is copied into every repo you clone.

You can test it by running '.git/hooks/pre-commit' in your current repo; the commit will not
run in this mode, obviously.

You can also run it with --help to get this man page.

This hook performs the following checks and will abort the commit if any fail:

=over 4

=item o emacs backup files

Files matching the format '.#*' and matching a file about to be committed. This
means you haven't saved the file, so you're about to commit something out of
date.

=item o Perl multiline comments.

These are used to temporarily comment out code, usually for testing, should not
be committed.

    =for (later|comparison|comment|review)
    =for (remove|restore)_before_commit

=item o Perl debugger statements.

Don't leave debugger statements of the form

    $DB::s(ingle|tep)

in production code.

=item o The presence of the testing module TestingUtils.

Not available in production, will cause load failure.

     use TestingUtils

=item o Explicit (G)it (C)ommit (S)top.

These will stop a git commit. Use this marker to mark code that you do not want
to get into your repo. Examples would be code changed for
testing/diagnostics. Add as a comment in the language of the file. Perl
examples:

     $foo=bar; ## <GCS> dev only

The part in the <> is what is checked; any text after is ignored.

For situations where the <GCS> marker appears but you want to commit it anyway
(utilities like this hook script, for example), look inside this script for the
section where we process the marker. Extensive comments there should explain
how to get around the issue.

=item o t/bin/apply-[compile-check|perltidy]-everywhere

If these files are found, we run them in case they were not run during
testing. If they fail, the commit is aborted. Skippable with --skip perl (for
both) or --skip perlcompile and --skip perltidy.

=item o shellcheck

If shellcheck is available (and --skip shellcheck not specified), runs
shellcheck against any file being checked in where the first line looks like a
shell shebang or an emacs shell file marker.

=item o git merge conflict markers

We don't let you commit code with conflict markers.

=item o python

Currently runs just black and isort, but consider this section under
construction. I want to use local tox.ini settings if I can but I do NOT want
to apply them to the entire repo, just the changed files. It appears that using
tox instead of the raw utilities makes that difficult. Stay tuned.

=back

=head1 ARGUMENTS

None

<soapbox> You'd think that git would pass us the files it's about to commit,
but no; we have to run 'git diff-index --porcelain HEAD' and parse the output
determine what files are about to be committed. </soapbox>

If you want to test the hook, you can pass file paths relative to the repo
root. Their status will be assumed 'M' unless you pass in another one; the only
one that matters is 'D' for delete:

 pre-commit bin/foo bin/buzz:M bin/bar:D

The status for 'bin/foo' is assumed to be 'M'.

=over 4

=back

=head1 OPTIONS

When running during a real commit, options must be passed in the envvar
GIT_PRE_COMMIT_HOOK_ARGS (or the shorter GPCHA) as a single string before the
git command:

    GIT_PRE_COMMIT_HOOK_ARGS="--quiet --skip perltidy" git commit ...

'--skip' options alone can be specified with '--skip-hook' options to 'git
commit' if you are using the 'git-commit' wrapper that comes with this repo.

Note that we filter out '--help' and '--show-skips' if you specify either of
them; they do not apply when using the hook in a real commit. They are only
provided for use when you are running the hook itself as a script.

=item --nocommit

Does everything except the commit. Used for testing the hook.

=item --quiet

Do not print the progress messages from the hook.

=item --x

Does a C<set -x>

=item --skip

Skip one or more validations:

  perlcompile
  perltidy
  perl (both compile and tidy)

  shellcheck
  shell (short for shellcheck)
  shebang (shells only)

  python (black, isort and pylint format checks)
  black
  isort
  pylint

  all - use this to just skip the whole hook. If using a git commit command,
  you could just specify '--no-verify' to 'git commit' to skip the hook, but if
  the commit is called from within some other code, you'll need some other way
  to skip the hook; this is it.

  Specify the option multiple times for multiple skips.

=item --help

Show this help

=item --show-skips

Print the list of possible arguments to '--skip'.

=back

=head1 FILES

=over 4

=item .pre-commit-ignore file

Like .gitignore, if there are files you do not want to be checked in the hook,
add them to .pre-commit-ignore. At this time, no wildcards or plain directories
are accepted. Each line must be a full file path relative to the root of the
git repo. Make sure the last line ends in a newline or you'll miss the last
entry in the file.

=back

=cut

__PODUSAGE__
