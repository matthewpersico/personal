#!/usr/bin/env bash

# git-add-remote

if [[ "$#" != '2' ]]; then
    git-usage "$0"; false; exit 1
fi
if [[ "$1" =~ ^-+h ]]; then
    git-usage "$0"; tur; exit
fi

declare githost=$1; shift
declare org=$1; shift

declare repo=$1;
if [[ -z "$repo" ]]; then
    repo=$(git repo name .)
else
    shift
fi

declare remote=$1;
if [[ -z "$remote" ]]; then
    remote="$org"
else
    shift
fi

declare status
git remote add "$remote" "$githost:$remote/$repo"
status=$?
if ((status == 0)); then
    git remote -v | grep "$remote"
    status=$?
fi
exit $status

:<<'__PODUSAGE__'
=head1 NAME

git-add-remote - add a remote reference to your repo

=head1 SYNOPSIS

  git-add-remote githost org [repo] [remotename]

=head1 DESCRIPTION

The point of this wrapper (besides providing an easy way to remember arguments
are needed to create remote), is that if you have forked B<foo/bar> on github to
B<me/bar> and bob has forked B<foo/bar> on github to B<bob/bar>, then the shortcut
of

  git-add-remote github bob

while in your clone of B<github:foo/bar> will add a remote B<bob> as
B<github:bob/bar> to your local repo.

=head1 ARGUMENTS

=over 4

=item githost

How to get to the repo.

=item org

The organization of the repo.

=item repo

The repo of the remote. Optional; uses the current repo name if not specified

=item remotename

What to call the remote. Optional; uses the org if not specified.

=back

=cut

__PODUSAGE__
