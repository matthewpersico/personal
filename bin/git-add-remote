#!/usr/bin/env bash

# git-add-remote

##@@ 0001||group||git-add-remote||

if [ "$#" != '2' ]
then
    script-usage "$0" && exit 1
fi
if [[ "$1" =~ ^-+h ]]
then
    script-usage "$0" && exit 0
fi

declare githost=$1; shift
declare org=$1; shift

declare repo=$1;
if [ -z "$repo" ]
then
    repo=$(git repo name .)
else
    shift
fi

declare remote=$1;
if [ -z "$remote" ]
then
    remote="$org"
else
    shift
fi

declare status
git remote add "$remote" "$githost:$remote/$repo"
status=$?
if ((status == 0))
then
    git remote -v | grep "$remote"
    status=$?
fi
exit $status

:<<'__USAGE__'
NAME
    git-add-remote - add a remote reference to your repo

SYNOPSIS
    git-add-remote githost org [repo] [remotename]

DESCRIPTION
    The point of this wrapper (besides providing an easy way to remember
    arguments are needed to create remote), is that if you have forked
    'foo/bar' on github to 'me/bar' and bob has forked foo/bar on github to
    'bob/bar', then the shortcut of

    git-add-remote github bob

    while in your clone of 'github:foo/bar' will add a remote 'bob' as
    'github:bob/bar' to your local repo.

ARGUMENTS
    githost
        how to get to the repo

    org
        the organization of the repo

    repo
        the repo of the remote
        optional; uses the current repo name if not specified

    remotename
        what to call the remote
        optional; uses the org is not specified

__USAGE__
