# -*- sh -*-
# shellcheck shell=bash

# bash-history-grep

declare OPTSARGS
declare shortopts='ilm:fhd:A:B:C:'
declare longopts='host:,local,localhost,dirs,days:,matchdir:,match-dir:file,help'

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
declare -a grepopts
declare -a hostfilt
hostfilt=('--hostname' "$(hostname)")
declare -a epoch_ago
declare -a matchdir
declare -a include_args
declare daysago
while true
do
    declare option=$1
    shift
    [ "$option" != '--' ] && option=${option##-} && option=${option##-}
    case "$option" in
        host )
            if [[ $1 = 'all' ]]; then
                hostfilt=('--hostname' '.*')
            else
                hostfilt=('--hostname' "$1")
            fi
            shift
            ;;
        local | localhost )
            hostfilt=('--hostname' "$(hostname)")
            shift
            ;;
        d | days )
            if [[ $1 =~ ^a ]]; then
                daysago=10000
            else
                daysago=$(($1 - 1));
            fi
            shift;
            epoch_ago=('--epoch-ago' "$(( $(date --date='00:00' +%s) - (daysago*86400) ))")
            ;;
        i | l )
            grepopts+=("-$option")
            ;;
        dirs )
            include_args+=('--include-dir')
            ;;
        m | matchdir | match-dir)
            matchdir=('--match-dir' "$1")
            shift
            ;;
        f | file )
            include_args+=('--include-file')
            ;;
        A|B|C )
            grepopts+=("-$option" "$1")
            shift
            ;;
        h | help )
            bash-usage bash-history-grep
            true; exit
            ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo --id bash-history-grep -e -- "$option is an invalid option. See $0 --help"
            false; exit
            ;;
    esac
done

pattern_to_match="${1:-.*}"
## no-ptkdb-issue : perl -d:ptkdb -S \
bash-history-parse "${epoch_ago[@]}" "${hostfilt[@]}" "${include_args[@]}" "${matchdir[@]}" "${grepopts[@]}" -- "$pattern_to_match"

:<<'__PODUSAGE__'
=head1 NAME

bash-history-grep - enhancements to the display functionality of the 'history' command

=head1 SYNOPSIS

 bash-history-grep [--da[ys] n] [--di[rs] | -m matchdir] [--host hostname | --local ] [-f|-l] [-i] ['regex to grep for']
 bash-history-grep [-h|--help]

=head1 DESCRIPTION

Use this command to search for previously submitted commands, possibly across
multiple processes, from prior days.

Use of this command implies the following two conditions:

=over 4

=item PROMPT_COMMAND=bash-history-sync

C<bash-history-sync> is a command in this repo that primarily adds C<pwd>
information for each command. That information can be displayed by this
command.

=item C<bash-history-init> is executed each time a new shell is started

C<bash-history-init> is a function in this repo that sets up how we handle
history. Primarily, it sets up a new history file for every interactive
session.

=back

=head1 ARGUMENTS

=over 4

=item 'regex to grep for'

If you want to search for a particular command, quote a regex to search
for. Strings without any regex metacharacters will have C<.*> pre and
post-pended to them to turn them into a regex that will find the string at any
position in the command. Supplying an anchoring metacharacter such as C<^> or
C<$> overrides that.

Unless you are searching for a string with no metacharacters and no spaces, you
should always single quote the search string so that the shell does not eat any
metacharacters before the make it to this command.

=back

=head1 OPTIONS

=over 4

=item -d n|--days n

Include commands as far back as C<n> days ago in the search. If <n> is 'a', we
include all available commands as far back as we have. Otherwise, C<n> must be
greater than 0. We count C<n> using midnight so C<n == 1> means today, C<n ==
2> means today and yesterday, etc.> This is opposed to using rolling 24 hour
periods.

Using this option implies that we will be searching in history from multiple
sessions. Without --days, searches will be limited to commands in only the
current session's history file.

=item --dirs

Show the current working directory for each command at the time it was
issued. (Detail what happens for C<cd> and ilk).

=item -m matchdir

Use this to limit the search to those commands executed while the current
working directory matches the regex 'matchdir'.

=item --host hostname

The commands are stored in history files whose name contains the value of
C<hostname>. By default, we search only history files that match the current
hostname. Use this option to match a specific machine, or 'all' for all
machines. This option is really only useful for an NFS mounted home directory
across multiple machines. The C<hostname> can be a regular expression.

=item --local

The commands are stored in history files whose name contains the value of
C<hostname>. By default, we search all history files nomatter what the host
when we search multiple history files. Use this option to match only the
current machine.

=item -f

Include the name of the history file in which the commands are located.

=item -l

Print only the name of the history file in which the commands are located.

=item -i

Make the command search is case insensitive.

=item A|B|C n

Show 'n' number of lines before (B), after (A), or on each side (C) of each
matching line.

=item -h|--help

Print this help.

=back

__PODUSAGE__
