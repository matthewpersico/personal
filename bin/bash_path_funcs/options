###############################################################################
#
# Name:         options
#
# Description:
#
# options is a wrapper function to simplify the use of getopts.
# It is similar to the Perl getopts function, in that it sets
# variables of the form opt_<argname> in the calling shell when passed
# a getopts argument description string and the command line arguments
# to process.
#
# If a required option argument is missing, opt_missing_arg stores the name
# of the option whose argument is missing.
# If an unknown option is passed, opt_unknown_option stores the name
# of the unknown option.
# On any of these errors, the function will return 1
# The caller must do a "shift $options_shift_val" to shift away the
# processed arguments.
#
# Usage: options <getopts string> <arguments>
#
#   e.g. options abc: -a -b -c fred bill pete
#        shift $options_shift_val
#
#        sets opt_a=1, opt_b=1, opt_c=fred
#        leaves "bill pete" in $@
#        and sets options_num_args_left = 2
#
#   e.g. options ab -a -c fred bill pete
#        shift $options_shift_val
#
#        sets opt_a=1, options_unknown_option=c
#        leaves "fred bill pete" in $@
#        and sets options_num_args_left = 3
#
#   e.g. options ab:
#        shift $options_shift_val
#
#        sets options_missing_arg=b
#        and sets options_num_args_left = 0
#
# Author:      Stephen Collyer (scollyer@netspinner.co.uk)
#
# Copyright:   Netspinner Ltd 2000-2003
#
###############################################################################

options ()
{
    ###########################################################################
    # return values
    ###########################################################################

    typeset OPTIONS_WRONG_ARGS=1

    ###########################################################################
    # Initialisation
    ###########################################################################

    typeset opts argname num
    options_unknown_option=
    options_missing_arg=
    options_shift_val=0
    options_num_args_left=0
    options_exit_on_error=0

    # ensure we have at least 2 arguments (getopts spec and at least one other)

    [ $# -gt 1 ] || return $OPTIONS_WRONG_ARGS

    opts=":$1"      # get the getopts option argument and add a leading
    shift           # colon to stop getopts printing error messages

    ###########################################################################
    # main
    #
    # we loop over the arguments, setting an opt_<argname> variable for
    # each argument we see, and storing the corresponding value in it if it
    # has one. Any unknown option (i.e. one not in $opts) is put into
    # options_unknown_option and an argument with a missing value is put into
    # options_missing_arg. The caller can examine all these variables to
    # modify its behaviour.
    #
    ###########################################################################

    # bash getopts seems to have a bug - if an options requires an arg,
    # but the arg is missing, getopts should set argname to : (when silent)
    # and put the offending option in OPTARG - however, it always puts ?
    # in argname, so we cant distinguish unknown options and options with
    # missing required args. !!

    # NB bash requires OPTIND to be reset between calls to getopts even
    # in function calls - this differs from ksh

    status=0
    OPTERR=0
    OPTIND=1
    while getopts $opts argname
    do
        if [ "$argname" = "?" ]
        then                                # code handles bash getopts bug
	    status=1
            if echo $opts | grep $OPTARG >/dev/null 2>&1
            then                            # option is really known so it must
                options_missing_arg="$options_missing_arg $OPTARG" # have a missing arg
            else
                options_unknown_option="$options_unknown_option $OPTARG"
            fi
            continue
        fi
        if [ "$argname" = ":" ]
        then
	    status=1
            options_missing_arg="$options_missing_arg $OPTARG"
            continue
        fi
        if [ "$OPTARG" != "" ]
        then
            eval opt_$argname=$OPTARG  # set option name to value
        else
            eval opt_$argname=1        # set option name to 1
        fi
    done

    # now set options_shift_val so that the caller can do
    # "shift $options_shift_val" to get rid of the arguments we have
    # processed for it.

    let num=$OPTIND-1
    options_shift_val=$num

    # options_num_args_left tells the caller how many unprocessed
    # arguments there are

    let options_num_args_left=$#-$num

    return $status
}
safe_func_export --this

# emacs
# Local Variables:
# mode: sh
# End:
