# -*- sh -*-
# shellcheck shell=bash
# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317

# sedinplace

use mktemp
##
## Declarations
##

## Cleanup out tempfiles
declare sedcmdfile; sedcmdfile=$(mktempfile)
finish ()
{
    if [[ -e "$sedcmdfile" ]]; then
        rm -rf "$sedcmdfile"
    fi
}

declare -a sedopts	        ## Options to the sed command
declare sedopt_inplace='-i'	## Particular option declare sedopts
declare opt_confirm=0
declare opt_verbose=0
declare opt_new=''
declare opt_keepscript=0
declare status
declare arg
declare exitstatus=0
declare -a files
declare f

##
## OPTS and ARGS
##

declare OPTSARGS
declare shortopts='kcbvn:'
declare longopts='keepscript,confirm,backup,verbose,new:'

# Process the command line.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@") || exit

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true; do
    declare option=$1
    shift
    [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
    case "$option" in
	    c|confirm)
	        opt_confirm=1
	        sedopt_inplace='-i.sip'
	        ;;
	    b|backup)
	        sedopt_inplace='-i.sip'
	        cmd-echo --id sedinplace -- "Backups in .sip files"
	        ;;
	    v|verbose)
	        opt_verbose=1
	        ;;
        n|new)
	        sedopt_inplace='-i.sip'
	        opt_new=$1
            shift
            ;;
        k|keepscript)
            opt_keepscript=1
            ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo --id sedinplace -ec -- "$option is an invalid option. See $0 --help"
            false; exit
            ;;
    esac
done

if ((opt_keepscript==0)); then
    trap finish EXIT SIGINT
else
    print The sed command script is "$sedcmdfile"
fi

## process args
for arg in "$@"; do
    ## Need -e and -f. -e makes it a file system object. -f alone
    ## could confuse a directory with a sed command.
    ## Pathological? Yes. But that's how I roll.
    ## And then we need to deal with links so that we don't overwrite them with
    ## file contents, losing the link.
    if [[ -e "$arg" ]]; then
        [[ -h "$arg" ]] && arg=$(realpath "$arg") ## Follow links
        [[ -f "$arg" ]] && files+=("$arg")
        ## We skip directories.
    else
        ### TODO - NEED A WAY TO GET ARGS WITH SPACES IN HERE!!!!!!!!
	    echo "$arg" >> "$sedcmdfile"
    fi
done

if [[ $opt_verbose = 1 ]]; then
    cmd-echo --id sedinplace -- "Processing these files: ${files[*]}"
fi

sedopts=(-E)
if [[ -n "$sedopt_inplace" ]]; then
    sedopts+=("$sedopt_inplace")
fi
if ! sed "${sedopts[@]}" -f "$sedcmdfile" "${files[@]}"; then
    exitstatus=$?
    cmd-echo --id sedinplace -- "Sed editor. Status $exitstatus." \
             "The directory where the files live must be writable" \
             "for sed's temporaries and the final product."
fi

for f in "${files[@]}"; do
    if [[ -e "${f}.sip" ]]; then
	    diff --text "${f}.sip" "$f" 1>/tmp/sedinplace.diff.$$
	    status=$?
	    if [[ $status = 0 ]]; then
            if ((opt_verbose)); then
		        cmd-echo --id sedinplace -- "No changes in $f"
            fi
		    command rm "${f}.sip"
        elif ((opt_new)); then
            \mv "${f}" "${f}.${opt_new}";status=$?;((status)) && cmd-echo --id sedinplace -- "Rename ${f} ${f}.${opt_new} error. Exiting." && { false; exit; }
            \mv "${f}.sip" "${f}";status=$?;((status)) && cmd-echo --id sedinplace -- "Rename ${f}.sip ${f} error. Exiting." &&  { false; exit; }
            ((opt_verbose)) && cmd-echo --id sedinplace -- "${f}.${opt_new}"
        elif ((opt_confirm)); then
            cmd-echo --id sedinplace
            cmd-echo --id sedinplace -- "diff --text ${f}.sip $f"
            cat /tmp/sedinplace.diff.$$
		    resp=$(yesno "Keep edits? ('n' reverts the edits)")
		    if [[ "$resp" = 'n' ]]; then
		        mv -v "${f}.sip" "$f"
		    else
		        command rm "${f}.sip"
	        fi
        fi
    fi
done

exit $exitstatus
