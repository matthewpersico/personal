#!/usr/bin/env bash
set -x
declare o_width=1056
declare o_height=500
declare do_join=0

# Define the options. ':' suffix for a mandatory value to an option, '::' for
# an optional one. Note that the long and short don't have to match up.
declare OPTSARGS
declare shortopts='w:h:nj'
declare longopts='width:,height:,help,join'

# Parse args.
OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")
declare status=$?
((status != 0)) && exit $status

# Reset the command line ($@).
eval set -- "$OPTSARGS"

# Reprocess the command line, extracting options and their arguments into
# variables.
while true && [[ $1 =~ ^- ]]
do
    declare option=$1
    shift
    [ "$option" != '--' ] && option=${option##-} && option=${option##-}
    case "$option" in
        help )
            bash-usage "$0"
            exit 0
            ;;
        w | width )
            o_width=$1
            shift
            ;;
        h | height )
            o_height=$1
            shift
            ;;
        j | join)
            do_join=1
            ;;
        --) break ;; ## VITAL!!! Exits the while loop, no more options,
                     ## remaining $*, if any, are args
        *)
            cmd-echo -ec -- "$option is an invalid option."
            cat "$0"
            exit 1
            ;;
    esac
done

declare -a zenargs
zenargs=(--text-info --title="$*")

declare do_filt=cat
declare -a cmd
case $1 in
    perldoc)
        shift
        cmd=('perldoc' "$@")
        do_filt=uncolor
        ;;
    man)
        cmd=("$@")
        do_filt=uncolor
        ;;
    tail )
        cmd=("$@")
        zenargs+=(--auto-scroll)
        ;;
    * )
        cmd=("$@")
        ;;
esac

zenargs+=(--width="$o_width" --height="$o_height")

if ((do_join))
then
    "${cmd[@]}" 2>&1 | $do_filt | zenity "${zenargs[@]}" &
else
    "${cmd[@]}" | $do_filt  | zenity "${zenargs[@]}" &
fi

:<<'__PODUSAGE__'
=head1 NAME

zen - Run a command and pipe the stdout to a zenity text box

=head1 SYNOPSIS

 zen [-w|-width] pixels] [-h|--height] pixels] [-j|--join] some command here
 zen --help

=head1 DESCRIPTION

Any command that prints to stdout can have its output routed to a zenity text
box using zen. This is good for long outputs that you would either have to page
or scroll in a terminal.

=head1 ARGUMENTS

All arguments except for the options below are run as the command and its
arguments. stdout is piped to a zenity text box whose scrollbar is left at the
top of the box.

There are three commands currently that have specific processing:

=over 4

=item perldoc

'perldoc' is recognized and called with the '-u' option to strip control
characters that won't render nicely in the text box.

=item man

'man' is recognized and the output is filtered through 'col -b' strip control
characters that won't render nicely in the text box.

=item tail

'tail' is recognized and the text box is set to --auto-scroll so that you are
brought to the end of the output and kept there if using 'tail -f'.

=back

=head1 OPTIONS

Notes:

- Your options to zen should come before the command.

- If your command has options, you need to add a '--' end-of-options marker, or
  else the option will be reported as unrecognized by zen:

  zen -- command --opt --op2 arg arg

=over 4

=item --width/--height

Specify a starting size for the text box.

=item --join

Route stderr to the text box also.

=item --help

This text. And no, you cannot 'zen zen --help'. :-)

=back

=cut

__PODUSAGE__
