# -*- sh -*-
# shellcheck shell=bash

# git-go-set

if [[ $1 =~ -h ]]; then
    git-usage "$0"
    true; exit
fi

# Grab all the paths were we keep repos. The keys have numeric suffixes to
# produce a specific sort order.
declare -a repo_paths
mapfile -t repo_paths < <(git config --value-only --expand --get-regexp ext.git-repo-paths.path)
declare -a repos
for repo_path in "${repo_paths[@]}"; do
    # We do not want to use symbolic links; they cause more trouble than they
    # are worth.
    if [[ -h $repo_path ]]; then
        cmd-echo --wc -- "'$repo_path' is a soflink. Skipping due to the issues it creates."
        continue
    fi

    # Ignore
    #    non-existent paths, they might show up later
    #    random files that are in what should be a list of directories only
    { [[ ! -e $repo_path ]] || [[ -f $repo_path ]]; } && continue

    # Search the paths for repos and work trees by finding '.git' files and
    # directories. Strip the '.git', order asciibetically, leaving the repo and
    # worktree root dirs. Filter out some known exceptions (local repos for
    # testing for starters).
    mapfile -O "${#repos[@]}" -t repos \
            < <(find "$repo_path" -name .git \
                    | grep -v /t/data/ \
                    | grep -v /elpa/ \
                    | sed 's/\/.git$//g'\
                    | sort -u \
               )
done

if [[ $1 != -p ]]; then
    # Write the list.
    declare gitfuncs_git_go_file
    gitfuncs_git_go_file="${TILDAE:-$HOME}/gits/.git-go.$(date +%Y%m%d)"
    echo "${repos[@]}" | tr ' ' '\n' | sed "s|${TILDAE:-$HOME}/||" > "$gitfuncs_git_go_file"

    # Trim prior days' files
    find ~/gits -maxdepth 1 -name .git-go\* | grep -v "$gitfuncs_git_go_file"  | xargs rm -f
else
    echo "${repos[@]}" | tr ' ' '\n' | sed "s|${TILDAE:-$HOME}/||"
fi

true

:<<'__PODUSAGE__'
=head1 NAME

git-go-set - find and write the list of tracked repos

=head1 SYNOPSIS

 git-go-set

=head1 DESCRIPTION

Pull a list of locations from ext.git-repo-paths.path\.* entries in git configs,
which define where we store repos that we want to track. In those locations
(which can have filesystem wildcards), find all the repos and write them to
${TILDAE:-$HOME}/gits/.git-go.$(date +%Y%m%d), cleaning up files from yesterday
and earlier.

=cut

__PODUSAGE__

#  LocalWords:  mapfile
