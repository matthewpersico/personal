#!/usr/bin/python

import httplib, urllib,urllib2
import getpass
import sys
import time
import os

def get_answer(prompt):
    while True:
        line = raw_input('%s: ' % prompt)
        if len(line) > 2:
            break
    return line

def get_pk(user,pwd,token,fname):
    params = urllib.urlencode({'username': user, 'password': pwd, 'token': str(token),'filetype':'openssh'})
    proxy_support = urllib2.ProxyHandler({})
    opener = urllib2.build_opener(proxy_support)
    urllib2.install_opener(opener)
    response = urllib2.urlopen("https://toolkitsvc.bdns.bloomberg.com/",params)
    if (response.info().getheader('X-BBG-KEY-EXPIRES')):
        expire_epoch_string=response.info().getheader('X-BBG-KEY-EXPIRES')
        expire_epoch=float(expire_epoch_string)
        time_tuple=time.localtime(expire_epoch)
        expire_time=time.strftime("%Y-%m-%d %H:%M:%S",time_tuple)
        print "Successfully authenticated to the Toolkit Service\nSSH key expires on ",expire_time,"\n"

        myAuthToken=response.info().getheader('x-toolkit-token')
        reoccurParams = urllib.urlencode({'username': user, 'auth_token': str(myAuthToken)})
        data = response.read()
        fn = open(fname,"w")
        os.chmod(fname,0600)
        fn.write(data)
        fn.close()
        print "Wrote key to",fname

        fname_exp = fname + '.expires'
        fn = open(fname_exp,"w")
        fn.write(expire_epoch_string + "\n")
        fn.write("## " + expire_time)
        fn.close()
        print "Wrote expiry info to",fname_exp
        print "\n.Now run\n  python /usr/local/bin/vendordata_users.py\nas root to sync the new key"
        print "\nor wait at most an hour for the cron job to do it."
    else:
        print "Authentication failed"


if __name__ == "__main__":

    if len(sys.argv) < 2:
        print "usage: toolkit-login keyfile <user>"
        sys.exit()

    print "Starting Toolkit Service"
    ssh_key=sys.argv[1]
    if len(sys.argv) >= 3:
        user=sys.argv[2]
    else:
        user = get_answer('toolkit username')

    pwd = getpass.getpass()
    token = ""
    token = get_answer('bunit token')
    while len(token) != 6:
        print 'token code is not right. retry again.'
        token = get_answer('bunit token')

    get_pk(user,pwd,token,ssh_key)
