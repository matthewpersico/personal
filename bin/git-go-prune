# -*- sh -*-
# shellcheck shell=bash

# git-go-prune

declare -A git_go_prune_skip

_git-go-prune-ce ()
{
    cmd-echo --id git-go-prune "$@"
}

_git-go-prune-mark-the-wt-parent ()
{
     if git wt ina; then
         # If this is a worktree, we cannot delete the parent dir it lives in,
         # so mark in order to skip it later.
         declare isawto
         isawto=$(git repo is a worktree of)
         if [[ -n $isawto ]]; then
             git_go_prune_skip[$isawto]=1
             _git-go-prune-ce --dc "git_go_prune_skip[$isawto]=${git_go_prune_skip[$isawto]}"
             set | grep git_go_prune_skip
         fi
     fi
}

_git-go-prune-ce "Processing clean, non-open-pr repos"

declare -A never_prune
declare np
for np in $(listpath GIT_IMPORTANT_REPO_LIST); do
    never_prune[$np]=1
done

declare pause_between_repos=0
if [[ $1 == '--page' ]]; then
    pause_between_repos=1
fi

# | reverse is so that we do worktrees before their parent directories
declare _git_go_prune_i
for _git_go_prune_i in $(git go --listfull | sort -r ); do
    if [[ "$_git_go_prune_i" =~ '/home/mpersico5/gits/employer/mpersico5/testing' ]]; then echo "_git_go_prune_i=$_git_go_prune_i"; echo -n "git_go_prune_skip = "; set | grep git_go_prune_skip; fi
    if [[ -n ${never_prune[$_git_go_prune_i]} ]]; then
        _git-go-prune-ce --head --wc "Skipping $_git_go_prune_i, important repo"
    elif [[ -n ${git_go_prune_skip[$_git_go_prune_i]} ]]; then
        _git-go-prune-ce --head --wc "Skipping $_git_go_prune_i, worktrees still exist"
    elif ! (
        if builtin cd "$_git_go_prune_i"; then
            _git-go-prune-cecmd-echo --color BLUE --id git-go-prune --head "$(pwd)"
            git pull
            if git repo is pristine -v; then
                declare pr_get_output
                declare pr_get_status
                pr_get_output=$(git repo pr-get)
                declare pr_get_status=$?
                if [[ -n $pr_get_output ]]; then echo "$pr_get_output"; fi
                if ((pr_get_status == 0)) || [[ $pr_get_output =~ ^(Merged:|None) ]] ; then
                    declare resp
                    resp=$(cmd-yesno -q --id git-go-prune "Delete" "n")
                    case $resp in
                        y)
                            if git wt ina; then
                                git wt del --current
                            else
                                git repo del --current
                            fi
                            exit $?
                            ;;
                        n)
                            _git-go-prune-mark-the-wt-parent
                            exit 0
                            ;;
                        q)
                            exit 1
                            ;;
                    esac
                fi
            else
                _git-go-prune-mark-the-wt-parent
            fi
        fi
        ); then exit $?;
    fi
    if ((pause_between_repos==1)); then
        echo
        resp=$(cmd-yesno -q --id git-go-prune "continue" "Y")
        case $resp in
            y) continue;;
            *) exit 0 ;;
        esac
    fi
done
