# -*- sh -*-
# shellcheck shell=bash

# git-clone

if [[ -z $GIT_DISPATCHER ]]; then
    git-dispatch-warning git-clone
fi

use on_exit

cmd_echo_id='git-clone'

_git_clone_record_created_date ()
{
    git config --replace-all "${GIT_EXT_META_PREFIX}".git-clone.created "$(date "$GIT_EXT_META_DATE_FMT")" || return
}

_git_clone_record_named_branches ()
{
    git-repo named-branches true
}

_git-clone-set-triangle()
{
    local githost_url=$1;shift
    local githostkeycheck
    githostkeycheck=$( git kv --key-only --section svcs | grep -E "^$githost_url$")
    if [[ -n "$githostkeycheck" ]] ; then
        echo "Supposed to provide a URL, not a service name. Converting..."
        githost_url=$(git kv --get "svcs.$githostkeycheck")
        if [[ -z "$githost_url" ]]; then
            echo "No url found for githost '$1'";
            false; return
        fi
    fi
    local upstream_namespace=$1;shift
    local origin_namespace=$1;shift
    local upstream_repo=$1;shift
    local origin_repo=$1; shift

    local default_branch
    default_branch=$(git repo default-branch)

    local -A triangle_workflow
    triangle_workflow[branch.${default_branch}.merge]="refs/heads/${default_branch}"
    triangle_workflow[branch.${default_branch}.mergeoptions]="--ff-only"
    triangle_workflow[branch.${default_branch}.remote]="upstream"

    triangle_workflow[remote.origin.url]="${githost_url}${origin_namespace}/${origin_repo}"
    triangle_workflow[remote.pushdefault]="origin"
    triangle_workflow[remote.upstream.url]="${githost_url}${upstream_namespace}/${upstream_repo}"

    local key
    for key in "${!triangle_workflow[@]}"; do
        git config --replace-all "$key" "${triangle_workflow[$key]}" || return
    done

    ##
    ## These are special because they repeat
    ##
    key='remote.origin.fetch'

    git config --replace-all $key "+refs/heads/*:refs/remotes/origin/*" || return
    git config --add         $key "+refs/pull/*/head:refs/pull/origin/*" || return
    ## ^ allows git checkout -b 3 pull/origin/3

    key='remote.upstream.fetch'
    git config --replace-all $key "+refs/heads/*:refs/remotes/upstream/*" || return
    git config --add         $key "+refs/pull/*/head:refs/pull/upstream/*" || return
    git config --add         $key "+refs/notes/*:refs/notes/*" || return
    ## ^ allows git checkout -b 3 pull/upstream/3

    ## Our own metadata
    git config --replace-all "${GIT_EXT_META_PREFIX}".git-clone.triangle-remote "${upstream_namespace}" || return
}

main ()
{
    local opt_y=0
    local opt_t=0
    local opt_triangle_namespace=''
    local opt_worktree=1
    local opt_worktree_name=''
    local opt_worktree_fetch=''
    local opt_use_githost_dir=0
    local opt_make_fork=0
    local opt_make_triangle=0
    local opt_use_named_branches=0
    local dispatch_to_real_git=1
    local githost
    local namespace
    local repo
    local doandcdfile

    ## --------
    ## DO NOT attempt to convert this to a 'getopt' implementation; it would
    ## require specifying and handling every existing option in 'git clone' and
    ## it is just not necessary. Also, this handles non-option arguments, even
    ## if mixed in with options
    local -a pass_on

    while (( $# )); do
        local option=$1
        shift ## That way you avoid endless loops on invalid options.

        ## This bit deals with --foo=bar instead of --foo bar...
        local okey
        local ovalue=''
        ## but only deal with it if we really have an option. Otherwise you
        ## misinterpret items like this argument to git clone --config:
        ## "remote.origin.fetch=+refs/pull/*/head:refs/remotes/origin/pr/*'
        if [[ $option =~ ^- ]]; then
            if [[ "$option" =~ = ]]; then
                okey=${option%%=*}
                ovalue=${option#*=}
                option="$okey"
            fi
        fi
        case $option in
            ##
            ## Our options
            ##
            --doandcd )
                doandcdfile=${ovalue:-$1}
                [[ -z "$ovalue" ]] && shift ## If ovalue is blank, we used $1
                ;;
            --tree )
                dispatch_to_real_git=0
                opt_use_githost_dir=1;;
            --named-branches | --named | --nb)
                dispatch_to_real_git=0
                opt_use_named_branches=1;;
            -y | --yes )
                dispatch_to_real_git=0; opt_y=1;;
            -t | --timestamp )
                dispatch_to_real_git=0; opt_t=1;;
            --triangle )
                dispatch_to_real_git=0
                opt_make_triangle=1;;
            --fo | --forkof | --fork-of )
                opt_make_fork=1
                dispatch_to_real_git=0
                local tmp_otn=${ovalue:-$1}
                [[ -z "$ovalue" ]] && shift ## If ovalue is blank, we used $1
                if [[ "$tmp_otn" =~ ^- ]]; then
                    ## we got the next option, not an arg to this one
                    cmd-echo -id "$cmd_echo_id" --ec -- "Fork org ($tmp_otn) cannot start with a '-'."
                    false; return
                fi
                opt_triangle_namespace=${tmp_otn%/*}
                if [[ ! "$tmp_otn" = "$opt_triangle_namespace" ]]; then
                    cmd-echo -id "$cmd_echo_id" --wc -- \
                             "--$option takes an upstream namespace specification," \
                             "not a full upstream repo specification." \
                             "We will use" \
                             "    $opt_triangle_namespace" \
                             "not" \
                             "    $tmp_otn"
                fi
                ;;
            --wt | --worktree | --wtf | --worktree-fetch )
                dispatch_to_real_git=0
                opt_worktree=1
                opt_worktree_name="${ovalue:-$1}"
                [[ -z "$ovalue" ]] && shift ## If ovalue is blank, we used $1
                if [[ "$opt_worktree_name" =~ ^- ]]; then
                    ## we got the next option, not an arg to this one
                    cmd-echo -id "$cmd_echo_id" --ec -- "Worktree name ($opt_worktree_name) cannot start with a '-'."
                    false; return
                fi
                if [[ "$option" =~ f ]]; then
                    opt_worktree_fetch='--fetch'
                fi
                ;;
            --help | -h )
                git-usage "$0"; true; return ;;
            --debug | -x )
                dispatch_to_real_git=0; set -x; do-on-exit set +x;;
            * )
                ## If we are here, it is an option we are not processing, an
                ## arg to such an option or a straight-up arg.  Eventually, you
                ## call the real command with "${pass_on[@]}"
                pass_on+=("$option");
                [[ -n "$ovalue" ]] && pass_on+=("$ovalue")
                ;;
        esac
    done

    if ((dispatch_to_real_git)); then
        ## There are no options specified that make us think we want to run our
        ## clone code; go run system git clone.
        "$REALGIT" clone "${pass_on[@]}"
        return
    fi

    ## WARNING: At this point, 'pass_on' should contain only the repo to clone
    ## and maybe a different directory to clone into. If there are real
    ## options, then this logic won't work and we'll have to strip off any real
    ## options above.
    cmd-echo -- "Extended git clone functionality..."
    if ((opt_make_fork)) && ((opt_make_triangle)); then
        cmd-echo --wc -- "Option '--triangle' ignored with option '--fork-of'; the latter implies the former."
        opt_make_triangle=0
    fi

    [[ -z "${pass_on[0]}" ]] && git-usage "$0" "Missing arguments" && { false; return; }
    if [[ -z "${githost}" ]]; then
        local -a tmpa
        asplit "${pass_on[0]}" -s : -a tmpa
        if [[ "${tmpa[0]}" = "${pass_on[0]}" ]]; then
            cmd-echo -id "$cmd_echo_id" --ec -- "githost not specified and no 'githost:' found in '${pass_on[0]}'"
            false; return
        fi
        githost="${tmpa[0]}"
        namespace="${tmpa[1]}"
    else
        namespace=${pass_on[0]}
    fi
    ashift pass_on

    declare noop
    read -r githost noop noop noop < <(git utils decode-url "${githost}")
    local githost_url
    githost_url="$(git kv --get "svcs.${githost}")"
    if [[ -z "$githost_url" ]]; then
        cmd-echo -id "$cmd_echo_id" --ec -- "$githost is unknown. Valid githosts are:$(git kv --key-only --section svcs)"
        false; return
    fi
    if [[ "$namespace" == */* ]]; then
        local -a tmpa
        asplit "$namespace" -s / -a tmpa
        namespace=${tmpa[0]}
        repo=${tmpa[1]}
    else
        ashift pass_on repo
    fi

    if [[ -z $namespace ]] || [[ -z $repo ]]; then
        cmd-echo -id "$cmd_echo_id" --ec -- "Missing one or both of namespace and repo args."
        false; return
    fi

    local tgtdir
    tgtdir="$repo"
    local tgt_override=0

    if [[ -n ${pass_on[0]} ]]; then
        # This is the target dir we want to clone into
        ashift pass_on tgtdir
        tgt_override=1
    fi
    local cwpath
    cwpath="$(realpath "${PWD}")"
    local local_githost
    local_githost="$(basename "$cwpath")"
    if [[ "$local_githost" != "$githost" ]] && ((opt_use_githost_dir == 1)); then
        cmd-echo -- "You must be in a directory path ending in"\
                 "   $githost" \
                 "You are in $cwpath"
        local shouldbein
        shouldbein="$(git config --get --expand ext.git-repo-root.root)/$githost"
        if [[ ! -d "$shouldbein" ]]; then
            cmd-echo -ec -- "Cannot find '$shouldbein'." "Correct and re-execute."
            false; return
        else
            cmd-echo -- "Going to $shouldbein"
            builtin cd "$shouldbein" || exit
        fi
    else
        cmd-echo -id "$cmd_echo_id" -- "Neither --githost nor --tree were specified. Cloning right here (${PWD})."
    fi
    local tgt="$namespace/$tgtdir"
    local forked_repo
    if ((opt_make_fork)); then
        ## Then try to make a fork of the repo from the upstream org
        ## supplied. If the fork exists on the server, no harm no foul; we just
        ## continue on with what we found.
        cmd-echo -- "github-api --server $githost --data-mode --wait fork $opt_triangle_namespace $repo..."
        forked_repo=$(github-api --server "$githost" --data-mode --wait fork "$opt_triangle_namespace" "$repo")
        local dq="$?"
        if [[ $dq != $(true; echo $?) ]]; then
            return $dq
        fi
        if [[ $forked_repo != "$repo" ]]; then
            if ((tgt_override==0)); then
                cmd-echo -wc -- "Forked repo of $repo is named $forked_repo. Will use $forked_repo going forward."
                tgt="$namespace/$forked_repo"
            else
                cmd-echo -wc -- "Forked repo of $repo is named $forked_repo. Will reference $forked_repo going forward, but still use $tgtdir as the local repo directory, as requested."
            fi
        fi
    fi
    if [[ -e "$tgt" ]]; then
        local resp
        if ((opt_y)); then
            resp='y'
        else
            resp=$(cmd-yesno "'$tgt' exists. Will not clone over it. Remove it" n)
        fi
        if [[ "$resp" = 'n' ]]; then
            cmd-echo -- "Keeping."
            if ((opt_use_githost_dir)); then
                if [[ -n "$doandcdfile" ]]; then
                    cmd-echo -c -- " Going to $tgt..."
                    echo "git go $tgt" > "$doandcdfile"
                else
                    cmd-echo -c -- " Execute" "    git go $tgt" "to use."
                fi
            else
                echo
            fi
            true; return
        else
            rm -rf "$tgt"
        fi
    fi

    ## Do the clone
    cmd-echo -- "$REALGIT clone ${pass_on[*]} ${githost_url}$namespace/${forked_repo:-$repo} $tgt ..."
    if ! $REALGIT clone "${pass_on[@]}" "${githost_url}$namespace/${forked_repo:-$repo}" "$tgt"; then
        return
    fi

    ## Our own metadata
    (
        builtin cd "$tgt" || exit
        _git_clone_record_created_date
        ((opt_use_named_branches)) && _git_clone_record_named_branches
    )

    if ((opt_t)); then
        cmd-echo -- 'Setting timestamps...'
        (
            if builtin cd "$tgt"; then
                git-retimestamp
            else
                cmd-echo -id "$cmd_echo_id" --ec -- "Cannot cd $tgt" && { false; return; }
            fi
        )
        cmd-echo -- 'Done'
    fi

    if ((opt_make_triangle)); then
        ## If we didn't explicitly ask to make a fork, let's see if this clone
        ## is a fork anyway and set up the triangle workflow if so.
        local upstream
        upstream=$(builtin cd "$tgt" || exit
                   git repo is a fork --print)
        if [[ -n $upstream ]]; then
            cmd-echo -- "$tgt is a fork of $upstream"
            opt_triangle_namespace=$(dirname "$upstream")
        fi
    fi

    ## dirlist, not builtin cd, to take advantage this cd enhancement
    dirlist "$tgt"
    if [[ -n "$opt_triangle_namespace" ]]; then
        cmd-echo -- "Setting up triangle workflow with ${githost_url}${opt_triangle_namespace}/${repo}..."
        _git-clone-set-triangle "${githost_url}" "$opt_triangle_namespace" "$namespace" "$repo" "${forked_repo:-$repo}" || return
        if ! git pull ; then
            cmd-echo --ec -- 'If the error refers to a missing ref whose name contains "master",' \
                     "then your fork's default branch is not the same as the upstream." \
                     "Fix or delete the fork and retry."
            false; return # To refresh from the upstream
        fi
    else
        local key='remote.origin.fetch'
        git config --replace-all $key "+refs/heads/*:refs/remotes/origin/*" || return
        git config --add         $key "+refs/pull/*/head:refs/pull/origin/*" || return
        ## ^ allows git checkout -b 3 pull/origin/3
    fi
    git remote -v

    if ((opt_worktree)); then
        cmd-echo -- "Setting up for worktrees..."
        mkdir wt
        ls -ld "${PWD}/wt"
    fi

    if ((opt_use_githost_dir)); then
        ## Add this repo to the list
        git go-set
    fi

    if [[ -n "$opt_worktree_name" ]]; then
        git go "$namespace/$repo"
        git worktree create $opt_worktree_fetch "$opt_worktree_name"
    else
        if ((!opt_use_githost_dir)); then
            cmd-echo -- \
                     "Done. Execute" \
                     "    git go $namespace/$repo" \
                     "to use."
        else
            [[ -n "$doandcdfile" ]] && echo "dirlist ${PWD}" > "$doandcdfile"
            cmd-echo -- "Done."
        fi
    fi
}

main "$@"
exit
echo "$noop" > /dev/null # in lieu of shellcheck 2034

:<<'__PODUSAGE__'
=head1 NAME

git-clone - extension to git clone

=head1 SYNOPSIS

 git-clone [--tree] \
           [--fork-of org] \
           [[--wt|--worktree] new-worktree [--fetch]] \
           [--yes|y] [--timestamp|-t] \
           [--named-branches | --named | --nb] \
           repoURL [tgtdir]

=head1 DESCRIPTION2

Adds a few options to git clone. Without any of these options, just calls the real git clone. Otherwise, calls git clone with some additional actions.

B<Note:> We have disabled option ganging in order to be able to properly handle options being passed to the real 'git clone'; each single option requires its own '-'.

=head1 ARGUMENTS

=over 4

=item repoURL

The URL of the repo to clone in C<githost:org/repo> format.

=item tgtdir

If you want C<githost:org/repo> cloned into something other than the directory C<repo>.

=back

=head1 OPTIONS

=over 4

=item --tree

Use the githost of the repoURL to determine where in the ~/gits tree to place this clone.

=item --fork-of org

Create a repo in your namespace on the remote server that is a form of the same-named repo in the 'org' namespace. Clone the fork locally. Establish the 'origin' and 'upstream' remotes as the fork and the fork source, respectively. If the fork exists, we use it and continue.

=item --worktree new-worktree

Create a wt subdir, the requested worktree, a branch named 'new-worktree' and set it up as a tracking branch in the remote repo.

=item --fetch

Only used with --worktree, tries to fetch the existing remote branch 'new-worktree' instead of creating it  .

=item --yes

Answer yes to all prompts.

=item --timestamp

Read the git log of the repo and reset the timestamps on all the files to the date of the last commit of the file. Otherwise all files have the timestamp of when the repo is cloned.

=item --named-branches

If the cloned repo is not using the forked, triangle workflow, and the username
is used to distinguish branches, then specify this option and it will be noted
in the repo config. Then, when you run 'git worktree create' in the clone, if
you forget to add it to the branch/worktree name, you will be asked if you want
the branch to be prefixed with "$USER/".

=back

=cut

__PODUSAGE__
