# -*- sh -*-

# git-clone

##@@ 0001||group||git-clone||Clone a repo locally. Args: protocol namespace repo

declare usage_func="${FUNCNAME}-usage"

declare opt_y=0
declare opt_t=0
declare opt_triangle_namespace=''
declare opt_worktree=1
declare opt_local=0
OPTSARGS=$(getoptp -o tyh --long timestamp,yes,help,triangle:,noworktree,declare -n $FUNCNAME -- "$@")
declare status=$?
((status != 0)) && $usage_func ${FUNCNAME} && exit $status

eval set -- "$OPTSARGS"
while true
do
    case "$1" in
        -y|--yes) opt_y=1; shift ;;
        -t|--timestamp) opt_t=1; shift ;;
        -h|--help) $usage_func; exit $OK ;;
        --triangle) declare tmp_otn;
                    tmp_otn=$2;
                    shift; shift;
                    opt_triangle_namespace=${tmp_otn%/*}
                    if [ ! "$tmp_otn" = "$opt_triangle_namespace" ]
                    then
                        script-echo $0    "WARNING: --triangle takes an upstream namespace specification,"
                        script-echo -c $0 "         not a full upstream repo specification."
                        script-echo -c $0 "         We will use"
                        script-echo -c $0 "             $opt_triangle_namespace"
                        script-echo -c $0 "         not"
                        script-echo -c $0 "             $tmp_otn"
                    fi
                    ;;
        --noworktree ) opt_worktree=0; shift;;
        --declare ) opt_local=1; shift;;
        --) shift; break ;; ## end of opts, remaining $*, if any, are args
        *) script-echo $0 "Internal error!"; $usage_func ${FUNCNAME}; exit $NOT_OK ;;
    esac
done

[ -z "$1" ] && $usage_func ${FUNCNAME} && exit $NOT_OK

declare protocol=$1;shift
declare namespace=$1;shift
declare repo2
if [[ "$namespace" == */* ]]
then
    asplit tmpa / $namespace
    namespace=${tmpa[0]}
    repo=${tmpa[1]}
else
    repo=$1;shift
fi

declare cwpath=$(realpath $(pwd))
declare local_protocol=$(basename $cwpath)
if [ "$local_protocol" != "$protocol" ]
then
    if ((opt_local == 0))
    then
        script-echo $0    "You must be in a declare directory path ending in"
        script-echo -c $0 "   $protocol"
        script-echo -c $0 "You are in $cwpath"
        declare shouldbein="$gitfuncs_gitroot/$protocol"
        if [ ! -d $shouldbein ]
        then
            script-echo $0    "Cannot find '$shouldbein'."
            script-echo -c $0 "Correct and re-execute."
            exit $NOT_OK
        else
            declare resp
            if ((opt_y))
            then
                script-echo $0 "Going to $shouldbein"
                resp='y'
            else
                resp=$(func-yesno "cd to $shouldbein")
            fi
            if [ "$resp" = 'n' ]
            then
                script-echo $0 "Correct and re-execute."
                exit $NOT_OK
            else
                _git-cd-to $shouldbein
            fi
        fi
    else
        script-echo $0 -- "--declare specifed. Cloning into $(pwd)/$repo"
    fi
fi

declare protocol_url=$(kvstore get gitfuncs_gitsvcs $protocol)
if [ -z "$protocol_url" ]
then
    script-echo $0 "$protocol is unknown. Valid protocols are:$(kvstore vals gitfuncs_gitsvcs)"
    exit $NOT_OK
fi

declare tgt="$namespace/$repo"
if [ -e $tgt ]
then
    declare resp
    if ((opt_y))
    then
        resp='y'
    else
        resp=$(func-yesno "'$tgt' exists. Will not clone over it. Remove it" n)
    fi
    [ "$resp" = 'n' ] && exit $NOT_OK
    rm -rf $tgt
fi

declare cmd="git clone ${protocol_url}$namespace/$repo $namespace/$repo"
script-echo $0 $cmd ...
$cmd
status=$?; [ "$status" != '0' ] && exit $status
if ((opt_t))
then
    script-echo $0 'Setting timestamps...'
    (builtin cd $namespace/$repo; git-retimestamp)
    script-echo $0 'Done'
fi

## dirlist, not builtin cd, to take advantage this cd enhancement
dirlist $namespace/$repo
if [ -n "$opt_triangle_namespace" ]
then
    script-echo $0 "Setting up triangle workflow with ${protocol_url}$opt_triangle_namespace/${repo}..."
    git-set-triangle ${protocol_url} $opt_triangle_namespace $namespace $repo
    git pull # To refresh from the upstream
fi
git remote -v

if ((opt_worktree))
then
    script-echo $0 "Setting up for worktrees..."
    mkdir wt
    ls -ld $(pwd)/wt
fi

## Add this repo to the list
git-go-set

script-echo $0 Done. gitgo $namespace/$repo to use.
