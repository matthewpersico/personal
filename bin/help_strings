#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;

my %out;
my $max = 0;
my %line;
my $patt = qr/^\s+##@@\s+/;

my %opt;

GetOptions(\%opt,
           're=s@');

if($opt{re}) {
    $opt{re} = join('|',@{$opt{re}});
    $opt{re} = qr/$opt{re}/;
}

my $helpfile = shift @ARGV;

open(IH, '<', $helpfile);

while (<IH>) {
    next if $_ !~ m/$patt/;
    chomp;
    $_ =~ s/$patt//;
    my @tmp = split(/\|\|/,$_);
    if ($tmp[0] eq '0001') {
        @line{qw(ord group name text)} = ($tmp[2], $tmp[1], $tmp[2], $tmp[3]);
    } else {
        @line{qw(ord group name text)} = ($tmp[2], 'group', $tmp[2], $tmp[3]);
    }
    $line{text} ||= '';
    my $ok=($opt{re}
              ? ( $line{name} =~ m/$opt{re}/
                  ? 1
                  : 0 )
              : 1 );
    if($ok) {
        $out{$line{name}} = { group => ($line{group} eq 'group' ? 'general' : $line{group}),
                              name => $line{name},
                              text => $line{text},
                              ord => $line{ord} };
        $max = length($line{name}) > $max ? length($line{name}) : $max;
    }
}

## Aliases can point back to the original function for help text
for (keys %out) {
    if ($out{$_}{text} =~ m/(->)(.*)/) {
        my $ref_func = $2;
        $out{$_}{text} = "Alias for $_";
        $out{$_}{ord} = "$out{$ref_func}{ord}-$out{$_}{ord}";
    }
}

my $fmt = "%-${max}s - %s\n";
if( @ARGV ) {
    my %orig = %out;
    %out = ();
    for my $lookfor (@ARGV) {
        my @found = grep { $_ =~ m/$lookfor/ } keys %orig;
        if(@found) {
            @out{@found} = @orig{@found};
            delete @orig{@found};
        }
    }
}
my $group ='';
for (sort {$a->{group} cmp $b->{group}
             or
             $a->{ord} cmp $b->{ord}} values %out ) {
    if( $group ne $_->{group} ) {
        $group = $_->{group};
        print "\n$group:\n";
    }
    printf ($fmt, $_->{name}, $_->{text});
}
