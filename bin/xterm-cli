# -*- sh -*-
# shellcheck shell=bash
# shellcheck disable=SC2329 #https://github.com/koalaman/shellcheck/wiki/SC2329
# shellcheck disable=SC2218 #https://github.com/koalaman/shellcheck/wiki/SC2218
# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
# shellcheck disable=SC2155 #https://github.com/koalaman/shellcheck/wiki/SC2155

# xterm-cli

# Control the xterm from the command line

declare ticker_tmp
ticker_tmp="/tmp/ticker.$(hostname).$PPID"
declare action_pid=''
declare action_dir=''

xterm-cli-id ()
{
local idd
    local ppid=${action_pid:-${PPID}}
    # shellcheck disable=SC2001 #https://github.com/koalaman/shellcheck/wiki/SC2001
    local workdir=$(echo "${action_dir:-$(pwd)}" | sed "s|$HOME|~|")
    idd=$(xwininfo -name "$USER@$(hostname):${ppid}:${workdir}" \
    | grep 'Window id' \
    | sed -e 's/.* Window id: //' -e 's/ .*//')
    if [[ -n $1 ]]; then
        local -n ret=$1
        # shellcheck disable=SC2034 #https://github.com/koalaman/shellcheck/wiki/SC2034
        # https://github.com/koalaman/shellcheck/issues/817
        ret=$idd
    else
        echo "$idd"
    fi
set +x
}

xterm-cli-info ()
{
    local id=$1
    [[ -z $id ]] && xterm-cli-id id
    xwininfo -id "$id"
}

xterm-cli-raw-csi ()
{
    echo -ne "${CSI}$*t"
}

_xterm-cli-xground ()
{
    local col
    col=$1; shift
    if [[ -z $1 ]]; then
        if [[  $TERM =~ xterm ]]; then
            ## from http://superuser.com/questions/157563/programmatic-access-to-current-xterm-background-color
            exec < /dev/tty
            oldstty=$(stty -g)
            stty raw -echo min 0
            #          OSC    Ps  ;Pt ST
            echo -en "${OSC}${col};?${ESC}\\" >/dev/tty  # echo opts differ w/ OSes
            local result
            if IFS=';' read -r -d \\ color ; then
                result=$(echo "$color" | sed 's/^.*\;//;s/[^rgb:0-9a-f/]//g')
                idxresult=$(echo "$result" | sed 's/[:/]//g')
            fi
            stty "$oldstty"
            local var
            var=XTERM_XGROUND_MAP_${idxresult^^}
            local color
            color=$(eval echo "\$$var")
            if [[ -n "${color}" ]]; then
                echo "${color}"
                true; return
            else
                cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --wc "No mapped color found for $result"
            fi
        else
            # We don't need the warning when we expect it not to be defined.
            cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --wc "\$TERM ($TERM) does not contain 'xterm'; probably not an xterm"
        fi

        if [[ -n "$NEWXCOLOR" ]]; then
            echo "$NEWXCOLOR"
true; return
        else
            cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --wc "NEWXCOLOR not defined"
        fi

        cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --wc "Default color is GREY"
        echo GREY
    else
        local color=$1
        local var="FOREBACKMAP_${color^^}_RGB"
        [[ -z "${!var}" ]] && cmd-echo --id "xterm-cli(${FUNCNAME[0]})"  --wc "'$color' not a defined color scheme" && { false; return; }
        local rgb="${!var}"
        echo -ne "${CSI}38:2:${rgb%%,*}m" "${CSI}48:2:${rgb##*,}m"
    fi
}

xterm-cli-foreground ()
{
    _xterm-cli-xground 10 "$@"
}

xterm-cli-background ()
{
    _xterm-cli-xground 11 "$@"
}

xterm-cli-use-coords ()
{
    local func=$1;shift
    local x=$1;shift
    local y=$1;shift
    local action=$1;shift

    ## strips whitespace
    x=$((x+0))
    y=$((y+0))

    local tgt
    case $action in
        get | '' )
            if [[ -z $1 ]]; then
                # shellcheck disable=SC2016 #https://github.com/koalaman/shellcheck/wiki/SC2016
                # We want non-expanding single quotes
                tgt='$x:$y'
            else
                tgt='$'$1; shift
            fi
            eval echo "$tgt"
            true; return
            ;;

        set )
            local newx=$x
            local newy=$y
            if [[ $1 == 'x' ]]; then
                shift
                newx=$1
            elif [[ $1 == 'y' ]]; then
                shift
                newy=$1
            else
                newx=$1
                if [[ $newx =~ : ]]; then
                    newy=${newx##*:}
                    newx=${newx%%:*}
                else
                    shift;
                    newy=$1
                fi
                if [[ -z $newx ]] || [[ -z $newy ]]; then
                    cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --ec 'Must specify x and y if you do not specify which one'
                    false; return
                fi
            fi
            if [[ $newx =~ [+-] ]]; then
                finalx=$((x + newx))
            else
                finalx=$newx
            fi
            if [[ $newy =~ [+-] ]]; then
                finaly=$((y + newy))
            else
                finaly=$newy
            fi
            case $func in
                location )
                    echo -ne "${CSI}3;${finalx};${finaly}t"
                    ;;
                size )
                    echo -ne "${CSI}8;${finaly};${finalx}t"
                    ;;
            esac
            true; return
            ;;

        * )
            cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --ec "'$action' is an invalid action'"
            false; return
            ;;
    esac
}

xterm-location ()
{
    local winid
    xterm-cli-id winid
    local -a info
    readarray -t info < <(xterm-cli-info "$winid")

    local x=-1
    local y=-1
    for line in "${info[@]}"; do
        if [[ $line =~ Absolute\ upper-left\ X ]]; then
            x="${line#*:}"
        elif [[ $line =~ Absolute\ upper-left\ Y ]]; then
            y="${line#*:}"
        fi
        [[ $x != '-1' ]] && [[ $y != '-1' ]] && break
    done

    local action=$1; shift
    xterm-cli-use-coords location "$x" "$y" "$action" "$@"

}

xterm-cli-set-title ()
{
    echo -e "\\033]0;$*\\007\\c"
}


xterm-cli-size ()
{
    local winid
    xterm-cli-id winid
    local -a info
    readarray -t info < <(xterm-cli-info "$winid")

    local x=-1
    local y=-1
    local coords
    for line in "${info[@]}"; do
        if [[ $line =~ geometry ]]; then
            coords="${line#*-geometry}"
            coords="${coords%%+*}"
            coords="${coords%%-*}"
            x=${coords%%x*}
            y=${coords##*x}
        fi
        [[ $x != '-1' ]] && [[ $y != '-1' ]] && break
    done

    local action=$1; shift
    xterm-cli-use-coords size "$x" "$y" "$action" "$@"
}

_xterm-cli-ticker-cfg ()
{
    local i=0
    local M
    local T
    local live=0
    if [[ "$1" == '--live' ]]; then
        shift
        live=1
        M="::: $("$@") :::"
    else
        M="::: $* :::"
    fi
    T="$M$M$M$M"

    local f
    f="$ticker_tmp"
    echo "$M" > "$f"

    local S ## First time around clears the prompt

    while sleep .2s && [[ -r "$f" ]]; do
        # Use the direct function instead of another xterm-cli dispatch call.
        xterm-cli-set-title "$S"
        (( ++i>${#M} )) && i=1
        S=${T:i:40}
        if ((live)); then
            M="::: $("$@") :::"
            T="$M$M$M$M"
            echo "$M" > "$f"
        fi
    done
}

xterm-cli-ticker ()
{
    if [[ $1 =~ -kill ]]; then
        rm -f "$ticker_tmp"
        return
    fi

    if [[ -r "$ticker_tmp" ]]; then
        declare -a msg
        msg=( "Found $f"
              "Looks like there is already a ticker running"
              "with the banner:"
              " "
              )
        mapfile -O "${#msg[@]}" -t < <(cat "$ticker_tmp")
        cmd-echo --id "xterm-cli(${FUNCNAME[0]})" --wc "${msg[@]}"
    else
        _xterm-cli-ticker-cfg "$@" &
    fi
}

main ()
{
    local action
    local action_pid

    # Read the options and args from command line. Note that the long and short
    # don't have to match up.
    declare OPTSARGS
    declare shortopts='hx'
    declare longopts

    ajoin longopts -s , \
          help \
          pid: pwd:

    # Process the command line, first time around.
    OPTSARGS=$(getopt -a -o "$shortopts" -l "$longopts" -n "$(basename "$0")" -- "$@")

    # Reset the command line ($@).
    eval set -- "$OPTSARGS"

    # Reprocess the command line, extracting options and their arguments into
    # variables.
    while true; do
        declare option=$1
        shift
        [[ "$option" != '--' ]] && option=${option##-} && option=${option##-}
        case "$option" in
            h|help)
                bash-usage "$0"; true; return ;;
            x )
                set -x # OK if you are grepping
                ;;
            pid )
                action_pid=$1
                shift;;
            pwd )
                action_dir=$1
                shift;;
            --) break ;; ## VITAL!!! Exits the while loop, no more options,
                         ## remaining $*, if any, are args
            *)
                cmd-echo --id logit -ec -- "$option is an invalid option. See $0 --help"
                false; return ;;
        esac
    done

    action=$1
    shift

    if x-is-available; then
        # xterm-cli-* are functions defined in this script. The rest are functions
        # or scripts.
        local name
        for name in "xterm-cli-${action}" "xterm-${action}"; do
            local type
            type=$(type -t "$name")
            if [[ -n $type ]]; then
                "$name" "$@"
                return
            fi
        done
        cmd-echo --id xterm-cli --ec "'$action' is not an xterm-cli action"
        false; return
    else
        cmd-echo --id xterm-cli --ec --oii -- "xterm-cli:X server is not available to run '$action'"
        false; return
    fi
}

main "$@"
exit

# shellcheck disable=SC2317 #https://github.com/koalaman/shellcheck/wiki/SC2317
:<<'__PODUSAGE__'
=head1 NAME

xterm-cli - xterm commands/queries unified

=head1 SYNOPSIS

 xterm-cli id
           info

           [fore|back]ground
           background colorscheme

           location
           location get x|y

           location set x i
           location set y j
           location set x +/-i
           location set y +/-j

           location set i:j
           location set +/-i:+/-j

           size
           size get x|y

           size set x i
           size set y j
           size set x +/-i
           size set y +/-j

           size set i:j
           size set +/-i:+/-j

           raw-csi control sequences

           ticker [--kill]

=head1 DESCRIPTION

Control an xterm window from the command line.

=cut

__PODUSAGE__
